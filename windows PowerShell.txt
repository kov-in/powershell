set-location P:\скрипты_проект\power_scripts\MySVC.ps1
set-location P:\скрипты_проект\power_scripts\per_1
dir "D:\необходимости\словари\тексты"|select-object -property fullname, extension, length

.\obl_desv_vidimosti_per3
 get-childitem -path WSMan:\Localhost

C:\Users\Irina_999_555\Desktop

 найти все  Get-ChildItem c:\techdocs\*.ppt
....
$a=get-childitem  администр|sort-object Length
 $a|Out-File -FilePath 'C:\Users\Irina\Desktop\а\ы\file1.txt'
.....

 Как скачать файл с помощью PowerShell?
Invoke-WebRequest -Uri 'http://www.nirsoft.net/utils/searchmyfiles.zip' -OutFile 'C:\tools\searchmyfiles.zip'

                как создать содержание в текстовом файле всех находящихся в каталоге файлов
dir /s /b c: \music\*. mp3 > c: \list_mp3. txt 

#===================================================================================

НОВЫЕ ВОЗМОЖНОСТИ
    Windows PowerShell 2.0 включает следующие новые возможности.

  Удаленное взаимодействие

      Windows PowerShell 2.0 позволяет выполнять команды на одном или
      нескольких удаленных компьютерах с помощью одной команды
      Windows PowerShell. Можно выполнять отдельные команды или создавать
      постоянное соединение (сеанс) для выполнения последовательности
      связанных команд. Можно также запустить сеанс на удаленном
      компьютере, чтобы вводимые команды выполнялись непосредственно на
      удаленном компьютере.


      Функции удаленного взаимодействия Windows PowerShell основаны
      на удаленном управлении Windows (WinRM). WinRM - это
      выполненная Майкрософт реализация протокола WS-Management,
      стандартного протокола связи на основе SOAP, совместимого с
      брандмауэром.

  На удаленных компьютерах должны быть установлены Windows
  PowerShell 2.0, платформа .NET Framework 2.0 и служба WinRM.

  Среда Windows PowerShell ISE

      Windows PowerShell 2.0 включает интегрированную среду скриптов
      (ISE) Windows PowerShell, ведущее приложение, позволяющее
      выполнять команды и разрабатывать, писать, тестировать и
      отлаживать скрипты с использованием графического интерфейса с
      цветовым кодированием, основанного на Юникоде.


      Для Windows PowerShell ISE требуется платформа Microsoft .NET
      Framework 3.0 или более поздней версии.

 Функции вывода сообщений скриптов на различных языках при выполнении
 запрашивают язык и региональные параметры пользовательского интерфейса
 ($PsUICulture) операционной системы и затем импортируют соответствующие
 переведенные строки текста, которые можно выводить пользователю.
 Раздел данных позволяет хранить строки текста отдельно от кода,
 чтобы их было легко найти. Новый командлет ConvertFrom-StringData
 преобразует текстовые строки в напоминающие словарь хэш-таблицы для
 упрощения перевода.
 get-help about_Script_Internationalization.
#------------------------------------------------------------------------------------------#
Собственные команды, создающие интерфейс пользователя, нельзя
передавать по конвейеру командлету Out-Host.
#------------------------------------------------------------------------------------------#
 $h = @{Name="Hello"; Value="Test"}
$($h.keys) | foreach-object {$h.remove($_)}
#====================================================================




PS C:\>cmd  /c 'dir'/b              переход и работа в комстроке  Windows  cmd
cmd
Для запуска Windows PowerShell  с политикой выполнения RemoteSigned введите следующую команду:

powershell -executionPolicy RemoteSigned

или запуск готового скрипта
powershell -ExecutionPolicy unRestricted - file C:\..\..\..\..\ya
только команды
powershell  -command "get-service | sort-object Status"
или
powershell  -command "&{get-process powers*; get-process SVC*}"

________________________________________________________________
                                                                                в бат файле(.bat)
@cls
@echo "Using WindowsPOwershell from cmd and Bat-file"
@echo"======================================================="
@powershell  -noprofile -ExecutionPolicy unRestricted - file C:\..\..\..\..\ya.ps1
@echo"======================================================="
@echo"--------------------------------THE**END--------------------------------------"
______________________________________________________________________

C:\PS>start-service -displayname *remote* -whatif
    Описание ----------- Эта команда выводит на экран сведения о  том,
что произойдет при запуске служб, отображаемые имена которых  содержат
строку "remote".  Параметр  DisplayName  используется,  чтобы  указать
службы по их  отображаемым именам вместо  имен служб. Параметр  WhatIf
используется, чтобы  узнать,  что произойдет  при  выполнении  команды
вместо ее фактического выполнения.

 Открывающая кавычка  (`)  в  Windows  PowerShell  является  знаком
продолжения строки.
-----------------------------------
$a=get-process
$a | fl *                                               //покажи все свойства
--------------------------------------
                                                          Запуск от имени администратора
Pa$$w0rd-стандартный пароль Microsoft 

пуск, все программы, стандартные, Windows  PowerShell, на файле правой кнопкой мыши "запуск от имени администратора"за мигающим зеленым курсором вводим
PS C:\Windows\system32>Get-ExecutionPolicy 
PS C:\Windows\system32>Set-ExecutionPolicy 
PS C:\Windows\system32> Get-ExecutionPolicy
Restricted
PS C:\Windows\system32> Set-ExecutionPolicy

Командлет Set-ExecutionPolicy в конвейере команд в позиции 1
Укажите значения для следующих параметров:
ExecutionPolicy: RemoteSigned

                                                              Изменение политики выполнения
Политика выполнения обеспечивает защиту компьютера от ненадежных скриптов. Изменение политики выполнения может подвергнуть компьютер риску нарушения
системы безопасности, как описано в разделе справки, вызываемом командой about_Execution_Policies. Изменить политику выполнения?
[Y] Да - Y  [N] Нет - N  [S] Приостановить - S  [?] Справка (значением по умолчанию является "Y"):   y (enter)
или разрешение на время выполнения скрипта
cmd
powershell -ExecutionPolicy unRestricted - file C:\..\..\..\..\ya

ПАРАМЕТРЫ ЗАПУСКА WINDOWS POWERSHELL	2.0
Параметры Windows PowerShell:	
• -Command	
• -EncodedCommand	
• -ExecutionPolicy	
• -File	
• -InputFormat	
• -NoExit	
• -NoLogo	
• -Noninteractive
• -NoProfile
• -OutputFormat
• -PSConsileFile
• -Sta
• -Windowstyle
• -Version

вызов справки
PS C:\Windows\system32> help *options*

Name                              Category  Synopsis
----                              --------  --------
Get-PSSessionConfiguration        Cmdlet    Получает зарегистрированные конфигурации сеансов на компьютере.
Set-PSSessionConfiguration        Cmdlet    Изменяет свойства зарегистрированной конфигурации сеанса.
Get-Alias                         Cmdlet    Возвращает псевдонимы, действительные в ходе текущего сеанса.
Export-PSSession                  Cmdlet    Импортирует команды из другого сеанса и сохраняет их в модуле Windows PowerShell.
Set-TraceSource                   Cmdlet    Настраивает, запускает и останавливает трассировку компонентов Windows PowerShell.
Clear-ItemProperty                Cmdlet    Удаляет значение свойства без удаления самого свойства.
Get-WmiObject                     Cmdlet    Получает экземпляры классов WMI или сведения о доступных классах.
Set-Item                          Cmdlet    Заменяет значение элемента на значение, указанное в команде.
Remove-ItemProperty               Cmdlet    Удаляет свойство элемента и его значение.
about_remote_FAQ                  HelpFile  Содержит вопросы о выполнении удаленных команд в Windows
about_split                       HelpFile  Описание использования оператора split для разбивки одной или

  PS C:\Windows\system32> help 'Property'

Name                              Category  Synopsis
----                              --------  --------
Clear-ItemProperty                Cmdlet    Удаляет значение свойства без удаления самого свойства.
Copy-ItemProperty                 Cmdlet    Копирует свойство и его значение из одного указанного местоположения в другое.
Get-ItemProperty                  Cmdlet    Получает свойства заданного элемента.
Move-ItemProperty                 Cmdlet    Перемещает свойство из одного местоположения в другое.
New-ItemProperty                  Cmdlet    Создает новое свойство элемента и задает значение этого свойства. Например, командлет New-ItemProperty можно использовать для создания и изменения значений и данных реестра, кот...
Remove-ItemProperty               Cmdlet    Удаляет свойство элемента и его значение.
Rename-ItemProperty               Cmdlet    Переименовывает свойство элемента.
Set-ItemProperty                  Cmdlet    Создает или изменяет значение свойства элемента.



PS C:\Windows\system32> help '-Property'

Name                              Category  Synopsis
----                              --------  --------
Disable-PSRemoting                Cmdlet    Предотвращает получение компьютером удаленных команд Windows PowerShell.
Get-WinEvent                      Cmdlet    Получает события из журналов событий и файлов журналов отслеживания событий, находящихся на локальном компьютере и на удаленных компьютерах.
Get-Counter                       Cmdlet    Получает данные счетчиков производительности на локальном компьютере и удаленных компьютерах.
Get-Command                       Cmdlet    Возвращает базовые сведения о командлетах и о других элементах команд Windows PowerShell.
Register-PSSessionConfiguration   Cmdlet    Создает и регистрирует новую конфигурацию сеанса.
Get-PSSessionConfiguration        Cmdlet    Получает зарегистрированные конфигурации сеансов на компьютере.
Set-PSSessionConfiguration        Cmdlet    Изменяет свойства зарегистрированной конфигурации сеанса.
Disable-PSSessionConfiguration    Cmdlet    Запрещает доступ к конфигурациям сеанса на локальном компьютере.
Invoke-Command                    Cmdlet    Выполняет команды на локальном и удаленных компьютерах.
Get-PSSession                     Cmdlet    Получает сеансы Windows PowerShell (объекты PSSession) в текущем сеансе.
Start-Job                         Cmdlet    Запускает фоновое задание Windows PowerShell.
Get-Job                           Cmdlet    Получает фоновые задания Windows PowerShell, активные в текущем сеансе.
Remove-Job                        Cmdlet    Удаляет фоновое задание Windows PowerShell.
Import-Module                     Cmdlet    Добавляет модули в текущий сеанс.
Get-Module                        Cmdlet    Получает модули, которые были импортированы или могут быть импортированы в текущий сеанс.
Format-List                       Cmdlet    Форматирует вывод как список свойств, в котором каждое свойство выводится на новой строке.
Format-Table                      Cmdlet    Форматирует вывод в виде таблицы.
Format-Wide                       Cmdlet    Форматирует объекты в виде широкой таблицы, в которой отображается только одно свойство каждого объекта.
Out-GridView                      Cmdlet    Отправляет результаты в интерактивную таблицу в отдельном окне.
Register-ObjectEvent              Cmdlet    Создает подписку на события, создаваемые объектами Microsoft .NET Framework.
Get-Event                         Cmdlet    Получает события из очереди событий.
Get-EventSubscriber               Cmdlet    Получает подписчики на события в текущем сеансе.
Add-Member                        Cmdlet    Добавляет определенный пользователем элемент в экземпляр объекта оболочки Windows PowerShell.
ConvertTo-Html                    Cmdlet    Преобразует объекты Microsoft .NET Framework в код HTML, который может отображаться в веб-браузере.
Get-Culture                       Cmdlet    Получает текущее значение культуры, установленное в операционной системе.
Get-Date                          Cmdlet    Получает текущие значение даты и времени.
Get-Host                          Cmdlet    Получает объект, представляющий текущую основную программу. Отображает также версию Windows PowerShell и региональные сведения по умолчанию.
Select-String                     Cmdlet    Находит текст в строках и файлах.
Measure-Object                    Cmdlet    Рассчитывает числовые свойства объектов, а также количество знаков, слов и строк в строковых объектах, например в текстовых файлах.
Update-List                       Cmdlet    Добавляет и удаляет элементы в значении свойства, содержащего коллекцию объектов.
New-Object                        Cmdlet    Создает экземпляр объекта Microsoft .NET Framework или COM object.
Select-Object                     Cmdlet    Выбирает указанные свойства объекта или набора объектов. Также он может выбирать уникальные объекты из массива объектов или выбирать указанное число объектов с начала или с конц...
Group-Object                      Cmdlet    Группирует объекты, в которых указанные свойства имеют одно и то же значение.
Sort-Object                       Cmdlet    Сортирует объекты по значениям свойств.
Set-Variable                      Cmdlet    Задает значение переменной. Если переменная с указанным именем не существует, она создается.
Get-EventLog                      Cmdlet    Получает события, зарегистрированные в журнале событий, или список журналов событий, находящихся на локальном или удаленном компьютере.
Get-ItemProperty                  Cmdlet    Получает свойства заданного элемента.
Get-Service                       Cmdlet    Получает службы на локальном или удаленном компьютере.
Stop-Service                      Cmdlet    Останавливает одну или несколько выполняющихся служб.
Get-Acl                           Cmdlet    Получает дескриптор безопасности для ресурса, такого как файл или раздел реестра.
Test-AppLockerPolicy              Cmdlet    Проверяет, разрешен ли запуск указанных во входных данных файлов для заданного пользователя на основе указанной политики AppLocker.
about_aliases                     HelpFile  Описывает использование альтернативных имен командлетов и команд
about_command_precedence          HelpFile  Описывает, как Windows PowerShell определяет выполняемую команду.
about_eventlogs                   HelpFile  Windows PowerShell создает журнал событий Windows с именем "Windows
about_hash_tables                 HelpFile  Описывает, как создавать, использовать и сортировать хэш-таблицы
about_job_details                 HelpFile  Содержит сведения о фоновых заданиях на локальных и удаленных
about_modules                     HelpFile  Описание процедур установки, импорта и использования модулей
about_pipelines                   HelpFile  Объединение команд в конвейеры в Windows PowerShell
about_preference_variables        HelpFile  Переменные, которые настраивают поведение Windows PowerShell
about_properties                  HelpFile  Содержит описание использования свойств объектов в Windows
about_remote_FAQ                  HelpFile  Содержит вопросы о выполнении удаленных команд в Windows
about_remote_output               HelpFile  Описывает, как интерпретировать и форматировать выходные данные
about_remote_troubleshooting      HelpFile  Описывает, как устранять неполадки удаленных операций в
about_Session_Configurations      HelpFile  Описание конфигураций сеансов, определяющих, пользователей, которые могут
about_types.ps1xml                HelpFile  Описывает, как с помощью файлов Types.ps1xml расширить типы
-------------------------------------------------
                                                              Строки, выполняющие команду Windows PowerShell
Для записи строки, выполняющей команду Windows PowerShell, используйте следующий формат:
"& {<command>}"
где кавычки обозначают строку, а оператор вызова (&) приводит к выполнению команды.
ft -вывод в формате таблицы
fl -вывод в формате листа
(командлет).метод(действие с объектом ).свойство(из чего состоит объект)
(командлет).метод.свойство

(get-date).dayofweek
-----------------------------------
PS C:\Windows\system32> get-help ConvertTo-Html -detailed

ИМЯ
    ConvertTo-Html

ОПИСАНИЕ
    Преобразует объекты Microsoft .NET Framework в код HTML, который может отображаться в веб-браузере.


СИНТАКСИС
    ConvertTo-Html [[-Head] <string[]>] [[-Title] <string>] [[-Body] <string[]>] [-CssUri <Uri>] [[-Property] <Object[]>] [-As <string>] [-InputObject <psobject>] [-PostContent <string[]>] [-PreContent <string[]>] [<CommonPa
    rameters>]

    ConvertTo-Html [-Fragment] [[-Property] <Object[]>] [-As <string>] [-InputObject <psobject>] [-PostContent <string[]>] [-PreContent <string[]>] [<CommonParameters>]


ОПИСАНИЕ
    Командлет ConvertTo-Html преобразует объекты .NET Framework в код HTML, который может отображаться в веб-браузере. Этот командлет можно использовать для вывода результатов выполнения команды на веб-страницу.

    Параметры командлета ConvertTo-Html позволяют выбирать свойства объектов, задавать формат таблиц или списков, определять заголовок HTML-страницы, добавлять текст перед объектом и после него, а также возвращать только фрагмент с таблицей или списком, а не полную страницу.

    При передаче командлету ConvertTo-Html нескольких объектов Windows PowerShell создает таблицу (или список) на основании свойств первого переданного объекта. Если у оставшихся объектов нет одного из указанных свойств, то значению этого свойства для такого объекта будет соответствовать пустая ячейка. Если же у оставшихся объектов имеются дополнительные свойства, значения этих свойств будут проигнорированы.


ПАРАМЕТРЫ
    -As <string>
        Определяет форматирование объекта — таблица или список. Допустимые значения: TABLE и LIST. По умолчанию используется значение TABLE.

        В случае указания значения TABLE создается таблица HTML, напоминающая формат таблицы Windows PowerShell. В строке заголовка отображаются имена свойств. Каждая строка таблицы соответствует одному объекту и содержит зн
        ачения всех свойств этого объекта.

        В случае указания значения LIST для каждого объекта создается таблица HTML из двух столбцов, напоминающая формат списка Windows PowerShell. В первом столбце отображается имя свойства, а во втором — его значение.

    -Body <string[]>
        Задает текст для добавления после открывающего тега <BODY>. По умолчанию в этом месте нет текста.

    -CssUri <Uri>
        Задает универсальный идентификатор ресурса (URI) каскадной таблицы стилей (CSS), применяемой к HTML-файлу.  URI включается в ссылку на таблицу стилей в выходных данных.

    -Fragment [<SwitchParameter>]
        Создает только таблицу HTML. Теги HTML, HEAD, TITLE и BODY будут опущены.

    -Head <string[]>
        Задает содержимое тега <HEAD>. По умолчанию используется код "<title>HTML TABLE</title>".  Если параметр Head задан, то параметр Title игнорируется.

    -InputObject <psobject>
        Задает объекты, которые должны быть представлены в коде HTML. Введите переменную, содержащую объекты, либо получающую их команду или выражение.

        При задании с помощью этого параметра нескольких объектов, например при перечислении всех работающих на компьютере служб, командлет ConvertTo-Html создает таблицу, в которой отображаются свойства коллекции или массив
        а объектов (System.Object[]). Чтобы создать таблицу из отдельных объектов, следует передавать их командлету ConvertTo-Html с помощью оператора конвейера.

    -PostContent <string[]>
        Задает текст для добавления после закрывающего тега </TABLE>. По умолчанию в этом месте нет текста.

    -PreContent <string[]>
        Задает текст для добавления перед открывающим тегом <TABLE>. По умолчанию в этом месте нет текста.

    -Property <Object[]>
        Включает в код HTML заданные свойства объектов.

    -Title <string>
        Задает заголовок HTML-файла, т. е. текст, помещаемый между тегами <TITLE>.

    <CommonParameters>
        Данный командлет поддерживает общие параметры: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer и OutVariable. Для получения дополнительных сведений введите
        "get-help about_commonparameters".

    -------------------------- ПРИМЕР 1 --------------------------
    C:\PS>convertto-html -inputobject (get-date)
    Описание
    -----------
    Эта команда создает HTML-страницу, на которой отображаются свойства текущей даты. Параметр InputObject используется для передачи результатов выполнения командлета Get-Date командлету ConvertTo-Html.
    -------------------------- ПРИМЕР 2 --------------------------

    C:\PS>get-alias | convertto-html > aliases.htm

    C:\PS> invoke-item aliases.htm

    Описание
    -----------
    Эта команда создает HTML-страницу, на которой перечислены псевдонимы Windows PowerShell для текущей консоли.

    Команда получает псевдонимы с помощью командлета Get-Alias. Для передачи псевдонимов командлету ConvertTo-Html, который создает HTML-страницу, используется оператор конвейера (|).

    -------------------------- ПРИМЕР 3 --------------------------

    C:\PS>get-eventlog -logname "Windows PowerShell | convertto-html > pslog.htm

    Описание
    -----------
    Эта команда создает HTML-страницу с именем pslog.htm, на которой отображаются события, зарегистрированные в журнале событий Windows PowerShell на локальном компьютере.

    Для получения событий из журнала Windows PowerShell, используется командлет Get-EventLog, а для передачи этих событий командлету ConvertTo-Html используется оператор конвейера (|).

    Кроме того, команда использует оператор перенаправления (>), чтобы переслать код HTML в файл pslog.htm.

    -------------------------- ПРИМЕР 4 --------------------------

    C:\PS>get-process | convertto-html -property Name, Path, Company -title "Process Information" > proc.htm; ii proc.htm

    Описание
    -----------
    Эти команды создают и открывают HTML-страницу, на которой перечислены значения имени, пути и компании для процессов на локальном компьютере.

    Первая команда с помощью командлета Get-Process получает объекты, которые представляют выполняющиеся на компьютере процессы. Команда передает объекты процессов в командлет ConvertTo-Html с помощью оператора конвейера (|)
   
    Команда использует параметр Property, чтобы выбрать три свойства объектов процессов для включения в таблицу. Параметр Title используется в команде для задания заголовка HTML-страницы. Кроме того, команда использует опера
    тор перенаправления (>), чтобы переслать полученный код HTML в файл Proc.htm.

    Вторая команда использует командлет Invoke-Item (псевдоним ii), чтобы открыть файл Proc.htm в браузере по умолчанию. Две команды разделены точкой с запятой (;).

    -------------------------- ПРИМЕР 5 --------------------------

    C:\PS>get-service | convertto-html -CssUri "test.css"

    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html>
    <head>
    <title>HTML TABLE</title>
    <link rel="stylesheet" type="text/css" href="test.css" />
    ...

    Описание
    -----------
    Эта команда создает HTML-страницу для объектов-служб, возвращаемых командлетом Get-Service. Чтобы указать каскадную таблицу стилей для HTML-страницы, в этой команде используется параметр CssUri.

    Параметр CssUri добавляет в итоговый HTML-документ дополнительный тег <link rel="stylesheet" type="text/css". Атрибут HREF в этом теге содержит имя таблицы стилей.

    -------------------------- ПРИМЕР 6 --------------------------

    C:\PS>get-service | convertto-html -as LIST > services.htm

    Описание
    -----------
    Эта команда создает HTML-страницу для объектов-служб, возвращаемых командлетом Get-Service. Параметр As используется в этой команде для указания формата списка. Оператор перенаправления (>) передает полученный код HTML в
     файл Services.htm.

    -------------------------- ПРИМЕР 7 --------------------------

    C:\PS>get-date | cth -fragment

    <table>
    <colgroup>...</colgroup>
    <tr><th>DisplayHint</th><th>DateTime</th><th>Date</th><th>Day</th><th>DayOfWeek</th><th>DayOfYear</th><th>Hour</th><th>
    Kind</th><th>Millisecond</th><th>Minute</th><th>Month</th><th>Second</th><th>Ticks</th><th>TimeOfDay</th><th>Year</th><
    /tr>
    <tr><td>DateTime</td><td>Monday, May 05, 2008 10:40:04 AM</td><td>5/5/2008 12:00:00 AM</td><td>5</td><td>Monday</td><td
    >126</td><td>10</td><td>Local</td><td>123</td><td>40</td><td>5</td><td>4</td><td>633455808041237213</td><td>10:40:04.12
    37213</td><td>2008</td></tr>
    </table>

    Описание
    -----------
    Эта команда с помощью командлета ConvertTo-Html создает таблицу HTML для текущей даты. С помощью командлета Get-Date команда получает текущее значение даты. А затем с помощью оператора конвейера (|) результаты передаются
     командлету ConvertTo-Html (обозначенному псевдонимом "cth").

    Команда ConvertTo-Html включает параметр Fragment, который ограничивает вывод только таблицей HTML. В результате другие элементы HTML-страницы, например теги <HEAD> и <BODY>, пропускаются.

    -------------------------- ПРИМЕР 8 --------------------------

    C:\PS>get-eventlog -log "Windows PowerShell" | convertto-html -property id, level, task

    Описание
    -----------
    Эта команда с помощью командлета Get-EventLog получает события из журнала событий Windows PowerShell.

    С помощью оператора конвейера (|) она передает события командлету ConvertTo-Html, который преобразует события в формат HTML.

    Команда ConvertTo-Html использует параметр Property, чтобы выбрать только следующие свойства события: ID, Level и Task.

    -------------------------- ПРИМЕР 9 --------------------------

    C:\PS>get-service A* | ConvertTo-Html -title "Windows Services: Server01" -body (get-date) -pre "<P>Generated by Corporate IT</P
    >" -post "For details, contact Corporate IT." > services.htm; ii services.htm

    Описание
    -----------
    Эта команда создает и открывает веб-страницу, на которой отображается список служб компьютера, имена которых начинаются на "A". Она использует параметры Title, Body, PreContent и PostContent командлета ConvertTo-Html, чт
    обы настроить содержимое страницы.

    Первая часть команды получает начинающиеся на "A" службы компьютера с помощью командлета Get-Service. Затем результаты передаются в командлет ConvertTo-Html с помощью оператора конвейера (|). Кроме того, команда использу
    ет оператор перенаправления (>), чтобы переслать результат в файл Services.htm.

    Двоеточие (;) отделяет первую команду от второй, в которой с помощью командлета Invoke-Item (псевдоним "ii") файл Services.htm открывается в браузере по умолчанию.

ЗАМЕЧАНИЯ
    Для просмотра примеров введите: "get-help ConvertTo-Html -examples".
    Для получения дополнительных сведений введите: "get-help ConvertTo-Html -detailed".
    Для получения технических сведений введите: "get-help ConvertTo-Html -full".
-----------------------------------------------
PS C:\Windows\system32>
                                                                                                                     справка
    Get-Help
КРАТКОЕ ОПИСАНИЕ
    Отображает справочные сведения о командлетах и концепциях Windows
    PowerShell.

ПОЛНОЕ ОПИСАНИЕ

СИНТАКСИС
    get-helphelp {<имя_командлета> | <название_раздела>}
    help {<имя_командлета> | <название_раздела>}
    <имя_командлета> -?

    Команды "Get-help" and "-?" отображают справку на одной странице.
    Команда "Help" - на нескольких.

    Примеры
      get-help get-process   :отображает справку о командлете
                              Get-Process.
      get-help about_signing :отображает справку о
                              подписании скриптов.
      help where-object      :отображает справку о командлете
                              Where-Object.
      help about_foreach     :отображает справку о циклах foreach
                              в PowerShell.
      set-service -?         :отображает справку о командлете
                              Set-Service.

    В командах справки можно использовать подстановочные знаки
    (исключая команду "-?"). Если поисковому запросу соответствует
    несколько разделов справки, оболочка PowerShell отображает список
    этих разделов. Если запросу соответствует только один раздел,
    оболочка PowerShell отобразит его сразу.

    Примеры
      get-help *      :отображает все разделы справки.
      get-help get-*  :отображает разделы, начинающиеся с get-.
      help *object*   :отображает разделы, имя которых содержит слово
                       "object".
      get-help about* :отображает все концептуальные разделы.

    Чтобы получить сведения о подстановочных знаках, введите:
      get-help about_wildcard

ПРИМЕЧАНИЕ
    Дополнительные сведения о Windows PowerShell см. в следующих
    разделах справки:
      get-command  :получает сведения о командлетах из
                    кода командлета.
      get-member   :получает свойства и методы объекта.
      where-object :фильтрует свойства объекта.
      about_object :возвращает сведения об использовании объектов в
                    Windows PowerShell.
      about_remote :возвращает сведения о выполнении команд на
                    удаленных компьютерах.

    Концептуальные разделы справки (с именем "about_<раздел>"),
    например:
      about_regular_expression.

    Названия файлов концептуальных разделов нужно вводить на
    английском языке, даже если используется локализованная версия
    Windows PowerShell.

    С помощью команд справки можно также узнать псевдонимы
    командлетов. Это альтернативные имена, которые обычно проще
    вводить. Например, командлет Invoke-Command имеет
    псевдоним remote.

    Чтобы узнать псевдонимы, введите команду:

      get-alias

ПОЛНОЕ ОПИСАНИЕ
    Во многих случаях требуется запустить командлет для обработки не
    отдельных элементов, а их группы. Например, может потребоваться
    найти все файлы с расширением PPT в каталоге C:\Techdocs. Если
    запустить следующую команду, будут возвращены все элементы каталога:

        Get-ChildItem c:\techdocs


    Проблема с этой командой заключается в том, что придется
    просмотреть все документы, перечисленные в каталоге, чтобы
    выяснить, какие файлы имеют расширение PPT. Однако набор возвращаемых
    элементов можно ограничить с помощью подстановочных знаков в параметрах
    командлета. Подстановочный знак - это тип заполнителя, который
    позволяет искать среди неизвестных значений и возвращать конкретные
    результаты. Процесс использования подстановочных знаков иногда именуется
    "глобализацией" (globbing). Например, предыдущий пример можно
    изменить так, чтобы получить только PPT-файлы.

        Get-ChildItem c:\techdocs\*.ppt


    В этом случае звездочка (*) используется в качестве
    подстановочного знака, чтобы указать, что перед расширением PPT могут
    располагаться любые знаки. Поскольку указано расширение файла, все файлы,
    возвращаемые командой, должны иметь это расширение, но при этом имена
    файлов могут быть любыми. В результате возвращаются только нужные файлы.


    Оболочка Windows PowerShell поддерживает несколько подстановочных
    знаков наряду с подстановочным знаком звездочки.


        Описание подстановочного знака        Пример   Совпадает         Не совпадает
        -------- ------------------           -------- ----------------- --------
        *        Совпадает с нулем или        a*       A, ag, Apple      banana
                 большим числом знаков

        ?        Совпадает точно с одним      ?n       an, in, on        ran
                 знаком в указанной позиции

        [ ]      Совпадает с диапазоном       [a-l]ook book, cook, look  took
                 знаков

        [ ]      Совпадает с указанными       [bc]ook  book, cook        hook
                 знаками


    Большинство командлетов позволяют использовать подстановочные знаки в
    некоторых параметрах. В разделе справки для каждого командлета
    описано, в каких параметрах допускаются подстановочные знаки, если
    они вообще разрешены. В параметрах, в которых допускаются
    подстановочные знаки, они используются без учета регистра. Например,
    ?n возвращает An, an, In, in, On и on.


    Можно сочетать подстановочные знаки в одном параметре. Например, чтобы
    показать все TXT-файлы в каталоге C:\Techdocs, которые начинаются с
    букв от "a" до "l", можно использовать следующую команду:

        Get-ChildItem c:\techdocs\[a-l]*.txt


    Используемый в команде подстановочный знак диапазона ([a-l])
    указывает, что имя файла должно начинаться с букв от "a" до "l".
    Затем в команде используется подстановочный знак звездочки в качестве
    заполнителя для любых знаков между первой буквой и расширением файла.


PS C:\Windows\system32>  get-help *

Name                              Category  Synopsis
----                              --------  --------
ac                                Alias     Add-Content
asnp                              Alias     Add-PSSnapin
clc                               Alias     Clear-Content
cli                               Alias     Clear-Item
clp                               Alias     Clear-ItemProperty
clv                               Alias     Clear-Variable
compare                           Alias     Compare-Object
cpi                               Alias     Copy-Item
cpp                               Alias     Copy-ItemProperty
cvpa                              Alias     Convert-Path
dbp                               Alias     Disable-PSBreakpoint
diff                              Alias     Compare-Object
ebp                               Alias     Enable-PSBreakpoint
epal                              Alias     Export-Alias
epcsv                             Alias     Export-Csv
fc                                Alias     Format-Custom
fl                                Alias     Format-List
foreach                           Alias     ForEach-Object
%                                 Alias     ForEach-Object
ft                                Alias     Format-Table
fw                                Alias     Format-Wide
gal                               Alias     Get-Alias
gbp                               Alias     Get-PSBreakpoint
gc                                Alias     Get-Content
gci                               Alias     Get-ChildItem
gcm                               Alias     Get-Command
gdr                               Alias     Get-PSDrive
gcs                               Alias     Get-PSCallStack
ghy                               Alias     Get-History
gi                                Alias     Get-Item
gl                                Alias     Get-Location
gm                                Alias     Get-Member
gmo                               Alias     Get-Module
gp                                Alias     Get-ItemProperty
gps                               Alias     Get-Process
group                             Alias     Group-Object
gsv                               Alias     Get-Service
gsnp                              Alias     Get-PSSnapin
gu                                Alias     Get-Unique
gv                                Alias     Get-Variable
gwmi                              Alias     Get-WmiObject
iex                               Alias     Invoke-Expression
ihy                               Alias     Invoke-History
ii                                Alias     Invoke-Item
ipmo                              Alias     Import-Module
iwmi                              Alias     Invoke-WmiMethod
ipal                              Alias     Import-Alias
ipcsv                             Alias     Import-Csv
measure                           Alias     Measure-Object
mi                                Alias     Move-Item
mp                                Alias     Move-ItemProperty
nal                               Alias     New-Alias
ndr                               Alias     New-PSDrive
ni                                Alias     New-Item
nv                                Alias     New-Variable
nmo                               Alias     New-Module
oh                                Alias     Out-Host
ogv                               Alias     Out-GridView
ise                               Alias     powershell_ise.exe
rbp                               Alias     Remove-PSBreakpoint
rdr                               Alias     Remove-PSDrive
ri                                Alias     Remove-Item
rni                               Alias     Rename-Item
rnp                               Alias     Rename-ItemProperty
rp                                Alias     Remove-ItemProperty
rmo                               Alias     Remove-Module
rsnp                              Alias     Remove-PSSnapin
rv                                Alias     Remove-Variable
rwmi                              Alias     Remove-WmiObject
rvpa                              Alias     Resolve-Path
sal                               Alias     Set-Alias
sasv                              Alias     Start-Service
sbp                               Alias     Set-PSBreakpoint
sc                                Alias     Set-Content
select                            Alias     Select-Object
si                                Alias     Set-Item
sl                                Alias     Set-Location
swmi                              Alias     Set-WmiInstance
sleep                             Alias     Start-Sleep
sort                              Alias     Sort-Object
sp                                Alias     Set-ItemProperty
saps                              Alias     Start-Process
start                             Alias     Start-Process
spps                              Alias     Stop-Process
spsv                              Alias     Stop-Service
sv                                Alias     Set-Variable
tee                               Alias     Tee-Object
where                             Alias     Where-Object
?                                 Alias     Where-Object
write                             Alias     Write-Output
cat                               Alias     Get-Content
cd                                Alias     Set-Location
clear                             Alias     Clear-Host
cp                                Alias     Copy-Item
h                                 Alias     Get-History
history                           Alias     Get-History
kill                              Alias     Stop-Process
lp                                Alias     Out-Printer
ls                                Alias     Get-ChildItem
man                               Alias     help
mount                             Alias     New-PSDrive
md                                Alias     mkdir
mv                                Alias     Move-Item
popd                              Alias     Pop-Location
ps                                Alias     Get-Process
pushd                             Alias     Push-Location
pwd                               Alias     Get-Location
r                                 Alias     Invoke-History
rm                                Alias     Remove-Item
rmdir                             Alias     Remove-Item
echo                              Alias     Write-Output
cls                               Alias     Clear-Host
chdir                             Alias     Set-Location
copy                              Alias     Copy-Item
del                               Alias     Remove-Item
dir                               Alias     Get-ChildItem
erase                             Alias     Remove-Item
move                              Alias     Move-Item
rd                                Alias     Remove-Item
ren                               Alias     Rename-Item
set                               Alias     Set-Variable
type                              Alias     Get-Content
icm                               Alias     Invoke-Command
clhy                              Alias     Clear-History
gjb                               Alias     Get-Job
rcjb                              Alias     Receive-Job
rjb                               Alias     Remove-Job
sajb                              Alias     Start-Job
spjb                              Alias     Stop-Job
wjb                               Alias     Wait-Job
nsn                               Alias     New-PSSession
gsn                               Alias     Get-PSSession
rsn                               Alias     Remove-PSSession
ipsn                              Alias     Import-PSSession
epsn                              Alias     Export-PSSession
etsn                              Alias     Enter-PSSession
exsn                              Alias     Exit-PSSession
prompt                            Function  prompt ...
TabExpansion                      Function  TabExpansion [[-line] <Object>] [[-lastWord] <Object>]...
Clear-Host                        Function  Clear-Host ...
more                              Function  more [[-paths] <String[]>]...
help                              Function
mkdir                             Function
Disable-PSRemoting                Cmdlet    Предотвращает получение компьютером удаленных команд Windows PowerShell.
Get-Verb                          Function  Get-Verb [[-verb] <String[]>] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-WarningVariable <String>] [-O...
A:                                Function  A: ...
B:                                Function  B: ...
C:                                Function  C: ...
D:                                Function  D: ...
E:                                Function  E: ...
F:                                Function  F: ...
G:                                Function  G: ...
H:                                Function  H: ...
I:                                Function  I: ...
J:                                Function  J: ...
K:                                Function  K: ...
L:                                Function  L: ...
M:                                Function  M: ...
N:                                Function  N: ...
O:                                Function  O: ...
P:                                Function  P: ...
Q:                                Function  Q: ...
R:                                Function  R: ...
S:                                Function  S: ...
T:                                Function  T: ...
U:                                Function  U: ...
V:                                Function  V: ...
W:                                Function  W: ...
X:                                Function  X: ...
Y:                                Function  Y: ...
Z:                                Function  Z: ...
cd..                              Function  cd.. ...
cd\                               Function  cd\ ...
ImportSystemModules               Function  ImportSystemModules ...
Disable-PSTrace                   Function  Disable-PSTrace ...
Disable-PSWSManCombinedTrace      Function  Disable-PSWSManCombinedTrace ...
Disable-WSManTrace                Function  Disable-WSManTrace ...
Enable-PSTrace                    Function  Enable-PSTrace ...
Enable-PSWSManCombinedTrace       Function  Enable-PSWSManCombinedTrace ...
Enable-WSManTrace                 Function  Enable-WSManTrace ...
Get-LogProperties                 Function  Get-LogProperties [-Name] <Object> [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-WarningVariable <String>...
Set-LogProperties                 Function  Set-LogProperties [-LogDetails] <LogDetails> [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-WarningVariabl...
Start-Trace                       Function  Start-Trace [-SessionName] <String> [[-OutputFilePath] <String>] [[-ProviderFilePath] <String>] [-ETS] [-Format <Object>] [-MinBuffers <Int32>] [-MaxBuffers <Int32>] [-BufferSiz...
Stop-Trace                        Function  Stop-Trace [-SessionName] <Object> [-ETS] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-WarningVariable <...
Get-WinEvent                      Cmdlet    Получает события из журналов событий и файлов журналов отслеживания событий, находящихся на локальном компьютере и на удаленных компьютерах.
Get-Counter                       Cmdlet    Получает данные счетчиков производительности на локальном компьютере и удаленных компьютерах.
Import-Counter                    Cmdlet    Импортирует файлы журналов счетчиков производительности (BLG, CSV, TSV) и создает объекты, представляющие каждую выборку счетчика в журнале.
Export-Counter                    Cmdlet    Командлет Export-Counter получает объекты PerformanceCounterSampleSet и экспортирует их в файлы журналов счетчиков.
Disable-WSManCredSSP              Cmdlet    Отключает проверку подлинности поставщика услуг безопасности CredSSP на клиентском компьютере.
Enable-WSManCredSSP               Cmdlet    Включает проверку подлинности поставщика услуг безопасности CredSSP на клиентском компьютере.
Get-WSManCredSSP                  Cmdlet    Получает связанную с поставщиком услуг безопасности конфигурацию для клиента.
Set-WSManQuickConfig              Cmdlet    Настраивает локальный компьютер для удаленного управления.
Test-WSMan                        Cmdlet    Проверяет, запущена ли служба WinRM на локальном или удаленном компьютере.
Invoke-WSManAction                Cmdlet    Вызывает действие на объекте, заданном при помощи URI ресурса и селекторов.
Connect-WSMan                     Cmdlet    Подключается к службе WinRM на удаленном компьютере.
Disconnect-WSMan                  Cmdlet    Отключает клиент от службы WinRM на удаленном компьютере.
Get-WSManInstance                 Cmdlet    Отображает сведения об управлении для экземпляра ресурса, заданного URI ресурса.
Set-WSManInstance                 Cmdlet    Вносит изменения в относящиеся к ресурсу сведения об управлении.
Remove-WSManInstance              Cmdlet    Удаляет экземпляр ресурса управления.
New-WSManInstance                 Cmdlet    Создает новый экземпляр ресурса управления.
New-WSManSessionOption            Cmdlet    Создает хэш-таблицу параметров сеанса WS-Management для использования в качестве входных параметров следующих командлетов WS-Management:...
Get-Command                       Cmdlet    Возвращает базовые сведения о командлетах и о других элементах команд Windows PowerShell.
Get-Help                          Cmdlet    Отображает сведения о командах и концепциях Windows PowerShell.
Get-History                       Cmdlet    Возвращает список команд, введенных за время текущего сеанса.
Invoke-History                    Cmdlet    Выполняет команды из журнала сеанса.
Add-History                       Cmdlet    Добавляет записи в журнал сеанса.
Clear-History                     Cmdlet    Удаляет записи из журнала сеанса.
Register-PSSessionConfiguration   Cmdlet    Создает и регистрирует новую конфигурацию сеанса.
Unregister-PSSessionConfiguration Cmdlet    Удаляет зарегистрированные конфигурации сеанса с компьютера.
Get-PSSessionConfiguration        Cmdlet    Получает зарегистрированные конфигурации сеансов на компьютере.
Set-PSSessionConfiguration        Cmdlet    Изменяет свойства зарегистрированной конфигурации сеанса.
Enable-PSSessionConfiguration     Cmdlet    Разрешает доступ к конфигурациям сеанса на локальном компьютере.
Disable-PSSessionConfiguration    Cmdlet    Запрещает доступ к конфигурациям сеанса на локальном компьютере.
Enable-PSRemoting                 Cmdlet    Настраивает компьютер для получения удаленных команд.
Invoke-Command                    Cmdlet    Выполняет команды на локальном и удаленных компьютерах.
New-PSSession                     Cmdlet    Создает постоянное подключение к локальному или удаленному компьютеру.
Get-PSSession                     Cmdlet    Получает сеансы Windows PowerShell (объекты PSSession) в текущем сеансе.
Remove-PSSession                  Cmdlet    Закрывает один или несколько сеансов Windows PowerShell (PSSession).
Start-Job                         Cmdlet    Запускает фоновое задание Windows PowerShell.
Get-Job                           Cmdlet    Получает фоновые задания Windows PowerShell, активные в текущем сеансе.
Receive-Job                       Cmdlet    Получает результаты фоновых заданий Windows PowerShell в текущем сеансе.
Stop-Job                          Cmdlet    Останавливает фоновое задание Windows PowerShell.
Wait-Job                          Cmdlet    Отключает командную строку до завершения выполнения одного или нескольких фоновых заданий Windows PowerShell, запущенных в этом сеансе.
Remove-Job                        Cmdlet    Удаляет фоновое задание Windows PowerShell.
Enter-PSSession                   Cmdlet    Начинает интерактивный сеанс с удаленным компьютером.
Exit-PSSession                    Cmdlet    Завершает интерактивный сеанс с удаленным компьютером.
New-PSSessionOption               Cmdlet    Создает объект, содержащий дополнительные параметры для PSSession.
ForEach-Object                    Cmdlet    Выполняет операцию для каждого из последовательности объектов ввода.
Where-Object                      Cmdlet    Создает фильтр, который определяет, какие объекты будут переданы по командному конвейеру.
Set-PSDebug                       Cmdlet    Позволяет включать и отключать функции отладки скриптов, устанавливать уровень трассировки и переключать строгий режим.
Set-StrictMode                    Cmdlet    Задает и применяет правила кодирования в выражениях, скриптах и блоках скрипта.
New-Module                        Cmdlet    Создает новый динамический модуль, который существует только в памяти.
Import-Module                     Cmdlet    Добавляет модули в текущий сеанс.
Export-ModuleMember               Cmdlet    Задает экспортируемые элементы модуля.
Get-Module                        Cmdlet    Получает модули, которые были импортированы или могут быть импортированы в текущий сеанс.
Remove-Module                     Cmdlet    Удаляет модули из текущего сеанса.
New-ModuleManifest                Cmdlet    Создает новый манифест модуля.
Test-ModuleManifest               Cmdlet    Проверяет, что файл манифеста модуля точно описывает содержимое модуля.
Add-PSSnapin                      Cmdlet    Добавляет одну или несколько оснасток Windows PowerShell в текущий сеанс.
Remove-PSSnapin                   Cmdlet    Удаляет оснастки Windows PowerShell из текущего сеанса.
Get-PSSnapin                      Cmdlet    Возвращает оснастки Windows PowerShell на данном компьютере.
Export-Console                    Cmdlet    Экспортирует имена оснасток в текущем сеансе в файл консоли.
Format-List                       Cmdlet    Форматирует вывод как список свойств, в котором каждое свойство выводится на новой строке.
Format-Custom                     Cmdlet    Использует пользовательское представление для форматирования вывода.
Format-Table                      Cmdlet    Форматирует вывод в виде таблицы.
Format-Wide                       Cmdlet    Форматирует объекты в виде широкой таблицы, в которой отображается только одно свойство каждого объекта.
Out-Null                          Cmdlet    Удаляет вывод вместо того, чтобы отправить его на консоль.
Out-Default                       Cmdlet    Отправляет выходные данные в модуль форматирования по умолчанию и в командлет вывода по умолчанию.
Out-Host                          Cmdlet    Отправляет вывод в командную строку.
Out-File                          Cmdlet    Отправляет вывод в файл.
Out-Printer                       Cmdlet    Отправляет вывод на принтер.
Out-String                        Cmdlet    Отправляет объекты основному приложению в виде последовательности строк.
Out-GridView                      Cmdlet    Отправляет результаты в интерактивную таблицу в отдельном окне.
Get-FormatData                    Cmdlet    Получает данные форматирования для текущего сеанса.
Export-FormatData                 Cmdlet    Сохраняет данные форматирования текущего сеанса в файле форматирования.
Register-ObjectEvent              Cmdlet    Создает подписку на события, создаваемые объектами Microsoft .NET Framework.
Register-EngineEvent              Cmdlet    Создает подписку на события, создаваемые обработчиком Windows PowerShell и командлетом New-Event.
Wait-Event                        Cmdlet    Ожидает определенного события, прежде чем продолжить выполнение.
Get-Event                         Cmdlet    Получает события из очереди событий.
Remove-Event                      Cmdlet    Удаляет события из очереди событий.
Get-EventSubscriber               Cmdlet    Получает подписчики на события в текущем сеансе.
Unregister-Event                  Cmdlet    Отменяет подписку на событие.
New-Event                         Cmdlet    Создает новое событие.
Add-Member                        Cmdlet    Добавляет определенный пользователем элемент в экземпляр объекта оболочки Windows PowerShell.
Add-Type                          Cmdlet    Добавляет тип (класс) Microsoft .NET Framework в сеанс Windows PowerShell.
Compare-Object                    Cmdlet    Сравнивает два набора объектов.
ConvertTo-Html                    Cmdlet    Преобразует объекты Microsoft .NET Framework в код HTML, который может отображаться в веб-браузере.
ConvertFrom-StringData            Cmdlet    Преобразует строку, содержащую одну или несколько пар типа ключ-значение в хэш-таблицу.
Export-CSV                        Cmdlet    Преобразует объекты Microsoft .NET Framework в набор строк переменной длины, содержащих разделенные запятыми значения (CSV), и сохраняет эти строки в CSV-файл.
Import-CSV                        Cmdlet    Преобразует свойства объекта из CSV-файла (с разделителями-запятыми) в CSV-версии исходных объектов.
ConvertTo-CSV                     Cmdlet    Преобразует объекты Microsoft .NET Framework в набор строк переменной длины, содержащих разделенные запятыми значения (CSV).
ConvertFrom-CSV                   Cmdlet    Преобразует свойства объекта из CSV-формата (с разделителями-запятыми) в CSV-версии исходных объектов.
Export-Alias                      Cmdlet    Экспортирует сведения об определенных на текущий момент псевдонимах в файл.
Invoke-Expression                 Cmdlet    Выполняет команды или выражения на локальном компьютере.
Get-Alias                         Cmdlet    Возвращает псевдонимы, действительные в ходе текущего сеанса.
Get-Culture                       Cmdlet    Получает текущее значение культуры, установленное в операционной системе.
Get-Date                          Cmdlet    Получает текущие значение даты и времени.
Get-Host                          Cmdlet    Получает объект, представляющий текущую основную программу. Отображает также версию Windows PowerShell и региональные сведения по умолчанию.
Get-Member                        Cmdlet    Получает свойства и методы объектов.
Get-Random                        Cmdlet    Получает случайное число или случайным образом выбирает объекты из коллекции.
Get-UICulture                     Cmdlet    Получает текущие параметры культуры пользовательского интерфейса операционной системы.
Get-Unique                        Cmdlet    Возвращает уникальные элементы из отсортированного списка.
Export-PSSession                  Cmdlet    Импортирует команды из другого сеанса и сохраняет их в модуле Windows PowerShell.
Import-PSSession                  Cmdlet    Импортирует в текущий сеанс команды из другого сеанса.
Import-Alias                      Cmdlet    Импортирует список псевдонимов из файла.
Import-LocalizedData              Cmdlet    Импортирует относящиеся к конкретному языку данные в скрипты и функции на основе выбранной в операционной системе культуры пользовательского интерфейса.
Select-String                     Cmdlet    Находит текст в строках и файлах.
Measure-Object                    Cmdlet    Рассчитывает числовые свойства объектов, а также количество знаков, слов и строк в строковых объектах, например в текстовых файлах.
New-Alias                         Cmdlet    Создает новый псевдоним.
New-TimeSpan                      Cmdlet    Создает объект TimeSpan.
Read-Host                         Cmdlet    Считывает из консоли строку ввода.
Set-Alias                         Cmdlet    Создает или изменяет псевдоним (альтернативное имя) командлета или другого элемента команды в текущем сеансе Windows PowerShell.
Set-Date                          Cmdlet    Устанавливает системное время на компьютере.
Start-Sleep                       Cmdlet    Приостанавливает выполнение скрипта или сеанса на указанный период времени.
Tee-Object                        Cmdlet    Сохраняет выходные данные команды в файле или переменной и отображает их на консоли.
Measure-Command                   Cmdlet    Измеряет время выполнения блоков скриптов и командлетов.
Update-List                       Cmdlet    Добавляет и удаляет элементы в значении свойства, содержащего коллекцию объектов.
Update-TypeData                   Cmdlet    Обновляет текущую расширенную конфигурацию типов, перезагружая файлы *.types.ps1xml в память.
Update-FormatData                 Cmdlet    Обновляет данные форматирования для текущего сеанса.
Write-Host                        Cmdlet    Записывает в основную программу пользовательский вывод.
Write-Progress                    Cmdlet    Отображает индикатор выполнения в командном окне Windows PowerShell.
New-Object                        Cmdlet    Создает экземпляр объекта Microsoft .NET Framework или COM object.
Select-Object                     Cmdlet    Выбирает указанные свойства объекта или набора объектов. Также он может выбирать уникальные объекты из массива объектов или выбирать указанное число объектов с начала или с конц...
Group-Object                      Cmdlet    Группирует объекты, в которых указанные свойства имеют одно и то же значение.
Sort-Object                       Cmdlet    Сортирует объекты по значениям свойств.
Get-Variable                      Cmdlet    Получает переменные, определенные для текущей консоли.
New-Variable                      Cmdlet    Создает новую переменную.
Set-Variable                      Cmdlet    Задает значение переменной. Если переменная с указанным именем не существует, она создается.
Remove-Variable                   Cmdlet    Удаляет переменную и ее значение.
Clear-Variable                    Cmdlet    Удаляет значение переменной.
Export-Clixml                     Cmdlet    Создает XML-представление объекта или объектов и сохраняет его в файле.
Import-Clixml                     Cmdlet    Импортирует файл CLIXML и создает соответствующие объекты в оболочке Windows PowerShell.
ConvertTo-XML                     Cmdlet    Создает XML-представление объекта.
Select-XML                        Cmdlet    Находит текст в XML-строке или документе.
Write-Debug                       Cmdlet    Выводит сообщение отладки на консоль.
Write-Verbose                     Cmdlet    Записывает текст в поток подробных сообщений.
Write-Warning                     Cmdlet    Записывает предупреждающее сообщение.
Write-Error                       Cmdlet    Записывает объект в поток ошибок.
Write-Output                      Cmdlet    Отправляет заданные объекты очередной команде в конвейере. Если команда является последней командой в конвейере, объекты отображаются на консоли.
Set-PSBreakpoint                  Cmdlet    Устанавливает точку останова на строке, команде или переменной.
Get-PSBreakpoint                  Cmdlet    Получает настроенные в текущем сеансе точки останова.
Remove-PSBreakpoint               Cmdlet    Удаляет из текущей консоли точки останова.
Enable-PSBreakpoint               Cmdlet    Включает точки останова для текущей консоли.
Disable-PSBreakpoint              Cmdlet    Отключает точки останова для текущей консоли.
Get-PSCallStack                   Cmdlet    Отображает текущий стек вызова.
Send-MailMessage                  Cmdlet    Отправляет сообщение электронной почты.
Get-TraceSource                   Cmdlet    Возвращает компоненты Windows PowerShell, подготовленные к трассировке.
Set-TraceSource                   Cmdlet    Настраивает, запускает и останавливает трассировку компонентов Windows PowerShell.
Trace-Command                     Cmdlet    Настраивает и запускает трассировку указанного выражения или команды.
Start-Transcript                  Cmdlet    Создает запись всего сеанса Windows PowerShell или его части в текстовом файле.
Stop-Transcript                   Cmdlet    Останавливает запись.
Add-Content                       Cmdlet    Добавляет содержимое в заданные элементы, например слова в файл.
Clear-Content                     Cmdlet    Удаляет содержимое элемента без удаления самого элемента, например, удаляет текст из файла.
Clear-ItemProperty                Cmdlet    Удаляет значение свойства без удаления самого свойства.
Join-Path                         Cmdlet    Соединяет корневой и вложенный пути в один. Поставщик задает разделители пути.
Convert-Path                      Cmdlet    Преобразует путь Windows PowerShell в путь поставщика Windows PowerShell.
Copy-ItemProperty                 Cmdlet    Копирует свойство и его значение из одного указанного местоположения в другое.
Get-EventLog                      Cmdlet    Получает события, зарегистрированные в журнале событий, или список журналов событий, находящихся на локальном или удаленном компьютере.
Clear-EventLog                    Cmdlet    Удаляет все записи из заданных журналов событий на локальном или удаленном компьютере.
Write-EventLog                    Cmdlet    Записывает событие в журнал событий.
Limit-EventLog                    Cmdlet    Задает свойства журнала событий, устанавливающие ограничения размера журнала и возраста его записей.
Show-EventLog                     Cmdlet    Отображает журналы событий локального или удаленного компьютера в средстве просмотра событий.
New-EventLog                      Cmdlet    Создает новый журнал событий и новый источник событий на локальном или удаленном компьютере.
Remove-EventLog                   Cmdlet    Удаляет журнал событий или отменяет регистрацию источника событий.
Get-ChildItem                     Cmdlet    Извлекает элементы и их потомки из заданных местоположений.
Get-Content                       Cmdlet    Извлекает содержимое элемента, находящегося в заданном местоположении.
Get-ItemProperty                  Cmdlet    Получает свойства заданного элемента.
Get-WmiObject                     Cmdlet    Получает экземпляры классов WMI или сведения о доступных классах.
Invoke-WmiMethod                  Cmdlet    Вызывает методы инструментария управления Windows (WMI)
Move-ItemProperty                 Cmdlet    Перемещает свойство из одного местоположения в другое.
Get-Location                      Cmdlet    Получает сведения о текущем рабочем местоположении.
Set-Location                      Cmdlet    Присваивает текущему местоположению заданное значение.
Push-Location                     Cmdlet    Добавляет текущее местоположение в начало списка местоположений ("стек").
Pop-Location                      Cmdlet    Меняет текущее местоположение на местоположение, указанное в последней записи стека. Запись с местоположением может быть извлечена как из стека, заданного по умолчанию, так и из...
New-PSDrive                       Cmdlet    Создает диск Windows PowerShell в текущем сеансе.
Remove-PSDrive                    Cmdlet    Удаляет диск Windows PowerShell из заданного местоположения.
Get-PSDrive                       Cmdlet    Получает диски Windows PowerShell, используемые в текущем сеансе.
Get-Item                          Cmdlet    Получает элемент, находящийся в заданном местоположении.
New-Item                          Cmdlet    Создает новый элемент.
Set-Item                          Cmdlet    Заменяет значение элемента на значение, указанное в команде.
Remove-Item                       Cmdlet    Удаляет заданные элементы.
Move-Item                         Cmdlet    Перемещает элемент из одного местоположения в другое.
Rename-Item                       Cmdlet    Переименовывает элемент в пространстве имен поставщика Windows PowerShell.
Copy-Item                         Cmdlet    Копирует элемент из одного местоположения в другое внутри одного пространства имен.
Clear-Item                        Cmdlet    Удаляет содержимое элемента без удаления самого элемента.
Invoke-Item                       Cmdlet    Выполняет действие по умолчанию над указанным элементом.
Get-PSProvider                    Cmdlet    Получает сведения об указанном поставщике Windows PowerShell.
New-ItemProperty                  Cmdlet    Создает новое свойство элемента и задает значение этого свойства. Например, командлет New-ItemProperty можно использовать для создания и изменения значений и данных реестра, кот...
Split-Path                        Cmdlet    Возвращает указанную часть пути.
Test-Path                         Cmdlet    Проверяет, существуют ли все элементы пути.
Get-Process                       Cmdlet    Получает процессы, выполняющиеся на локальном или удаленном компьютере.
Stop-Process                      Cmdlet    Останавливает один или несколько выполняющихся процессов.
Wait-Process                      Cmdlet    Ожидает остановки процессов, прежде чем принимать следующий ввод.
Debug-Process                     Cmdlet    Отлаживает один или несколько процессов, выполняющихся на локальном компьютере.
Start-Process                     Cmdlet    Запускает один или несколько процессов на локальном компьютере.
Remove-ItemProperty               Cmdlet    Удаляет свойство элемента и его значение.
Remove-WmiObject                  Cmdlet    Удаляет экземпляр существующего класса инструментария управления Windows (WMI).
Rename-ItemProperty               Cmdlet    Переименовывает свойство элемента.
Register-WmiEvent                 Cmdlet    Подписывает на событие инструментария управления Windows (WMI).
Resolve-Path                      Cmdlet    Разрешает значения подстановочных знаков в пути и отображает содержимое, находящееся по заданному пути.
Get-Service                       Cmdlet    Получает службы на локальном или удаленном компьютере.
Stop-Service                      Cmdlet    Останавливает одну или несколько выполняющихся служб.
Start-Service                     Cmdlet    Запускает остановленные службы.
Suspend-Service                   Cmdlet    Приостанавливает одну или несколько выполняющихся служб.
Resume-Service                    Cmdlet    Возобновляет работу приостановленных служб.
Restart-Service                   Cmdlet    Останавливает, а затем запускает заново одну или несколько служб.
Set-Service                       Cmdlet    Запускает, останавливает и приостанавливает службу и изменяет ее свойства.
New-Service                       Cmdlet    Создает новую службу Windows.
Set-Content                       Cmdlet    Записывает новое содержимое в элемент или заменяет им старое.
Set-ItemProperty                  Cmdlet    Создает или изменяет значение свойства элемента.
Set-WmiInstance                   Cmdlet    Создает или обновляет экземпляр существующего класса инструментария управления Windows (WMI).
Get-Transaction                   Cmdlet    Получает текущую (активную) транзакцию.
Start-Transaction                 Cmdlet    Запускает транзакцию.
Complete-Transaction              Cmdlet    Фиксирует активную транзакцию.
Undo-Transaction                  Cmdlet    Откатывает активную транзакцию.
Use-Transaction                   Cmdlet    Добавляет блок скрипта в активную транзакцию.
New-WebServiceProxy               Cmdlet    Создает прокси-объект веб-службы, позволяющий использовать веб-службу и управлять ей в Windows PowerShell.
Get-HotFix                        Cmdlet    Получает исправления, примененные на локальном компьютере или на удаленных компьютерах.
Test-Connection                   Cmdlet    Отправляет пакеты эхо-запросов ICMP (запросы проверки связи) одному или нескольким компьютерам.
Enable-ComputerRestore            Cmdlet    Включает функцию восстановления системы на указанном диске файловой системы.
Disable-ComputerRestore           Cmdlet    Отключает функцию восстановления системы на указанном диске файловой системы.
Checkpoint-Computer               Cmdlet    Создает точку восстановления системы на локальном компьютере.
Get-ComputerRestorePoint          Cmdlet    Получает точки восстановления системы на локальном компьютере.
Restart-Computer                  Cmdlet    Перезапускает ("перезагружает") операционную систему локального и удаленных компьютеров.
Stop-Computer                     Cmdlet    Останавливает локальный и удаленные компьютеры (завершает работу компьютеров).
Restore-Computer                  Cmdlet    Запускает восстановление системы на локальном компьютере.
Add-Computer                      Cmdlet    Добавление локального компьютера в домен или рабочую группу.
Remove-Computer                   Cmdlet    Удаление локального компьютера из домена или рабочей группы.
Test-ComputerSecureChannel        Cmdlet    Проверяет и исправляет безопасный канал между локальным компьютером и его доменом.
Reset-ComputerMachinePassword     Cmdlet    Сбрасывает пароль учетной записи компьютера.
Get-Acl                           Cmdlet    Получает дескриптор безопасности для ресурса, такого как файл или раздел реестра.
Set-Acl                           Cmdlet    Изменяет дескриптор безопасности указанного ресурса, например файла или раздела реестра.
Get-PfxCertificate                Cmdlet    Получает данные о PFX-файлах сертификата в компьютере.
Get-Credential                    Cmdlet    Получает объект хранения учетных данных на основе имени пользователя и пароля.
Get-ExecutionPolicy               Cmdlet    Получает политики выполнения для текущего сеанса.
Set-ExecutionPolicy               Cmdlet    Изменяет пользовательские параметры политики выполнения Windows PowerShell.
Get-AuthenticodeSignature         Cmdlet    Получает сведения о подписи Authenticode в файле.
Set-AuthenticodeSignature         Cmdlet    Добавляет подпись Authenticode, чтобы подписать скрипт Windows PowerShell или другой файл.
ConvertFrom-SecureString          Cmdlet    Преобразует защищенную строку в зашифрованную стандартную строку.
ConvertTo-SecureString            Cmdlet    Преобразует зашифрованные стандартные строки в защищенные строки. Можно также преобразовать обычный текст в защищенные строки. Используется с командлетами ConvertFrom-SecureStri...
Get-AppLockerFileInformation      Cmdlet    Получает информацию AppLocker о файлах из списка файлов или журнала событий.
Get-AppLockerPolicy               Cmdlet    Получает локальную, действующую или доменную политику AppLocker.
New-AppLockerPolicy               Cmdlet    Создает новую политику AppLocker из списка сведений о файлах и других параметров создания политики.
Set-AppLockerPolicy               Cmdlet    Задает политику AppLocker для указанного объекта групповой политики (GPO).
Test-AppLockerPolicy              Cmdlet    Проверяет, разрешен ли запуск указанных во входных данных файлов для заданного пользователя на основе указанной политики AppLocker.
Add-BitsFile                      Cmdlet    Добавляет один или несколько файлов в существующее задание передачи фоновой интеллектуальной службы передачи (BITS).
Complete-BitsTransfer             Cmdlet    Завершает задание передачи фоновой интеллектуальной службы передачи (BITS).
Get-BitsTransfer                  Cmdlet    Извлекает связанный объект BitsJob существующего задания передачи фоновой интеллектуальной службы передачи (BITS).
Remove-BitsTransfer               Cmdlet    Отменяет задание передачи фоновой интеллектуальной службы передачи (BITS).
Resume-BitsTransfer               Cmdlet    Возобновляет задание передачи фоновой интеллектуальной службы передачи (BITS).
Set-BitsTransfer                  Cmdlet    Вносит изменения в свойства существующего задания передачи фоновой интеллектуальной службы передачи (BITS).
Start-BitsTransfer                Cmdlet    Создает новое задание передачи фоновой интеллектуальной службы передачи (BITS).
Suspend-BitsTransfer              Cmdlet    Приостанавливает задание передачи фоновой интеллектуальной службы передачи (BITS).
Get-TroubleshootingPack           Cmdlet    Этот командлет получает информацию о диагностическом пакете. Его также можно использовать для создания файла ответов.
Invoke-TroubleshootingPack        Cmdlet    Запускает диагностический пакет для устранения неполадок в интерактивном или в автоматическом режиме и создает отчет о результатах.
WSMan                             Provider  Обеспечивает доступ к конфигурационной информации веб-служб WS-Management.
Alias                             Provider  Предоставляет доступ к псевдонимам Windows PowerShell и представленным ими значениям.
Environment                       Provider  Предоставляет доступ к переменным среды Windows.
FileSystem                        Provider  Предоставляет доступ к файлам и каталогам.
Function                          Provider  Предоставляет доступ к функциям, определенным в Windows PowerShell.
Registry                          Provider  Предоставляет доступ к разделам и значениям системного реестра в Windows PowerShell.
Variable                          Provider  Предоставляет доступ к переменным Windows PowerShell и их значениям.
Certificate                       Provider  Обеспечивает доступ к хранилищам сертификатов X.509 и сертификатам из оболочки Windows PowerShell.
about_BITS_Cmdlets                HelpFile  Содержит общие сведения о фоновой интеллектуальной службе передачи
about_aliases                     HelpFile  Описывает использование альтернативных имен командлетов и команд
about_Arithmetic_Operators        HelpFile  Описание арифметических операторов, используемых в Windows PowerShell.
about_arrays                      HelpFile  Описание компактной структуры размещения элементов данных
about_Assignment_Operators        HelpFile  Описание использования операторов для присваивания значений
about_Automatic_Variables         HelpFile  Описание переменных, в которых хранятся сведения о состоянии оболочки
about_Break                       HelpFile  Описывает инструкции, которые можно использовать для немедленного
about_command_precedence          HelpFile  Описывает, как Windows PowerShell определяет выполняемую команду.
about_Command_Syntax              HelpFile  Описывает синтаксис, используемый в справке для Windows PowerShell.
about_Comment_Based_Help          HelpFile  Описание написания разделов справки на основе комментариев для
about_CommonParameters            HelpFile  Описание параметров, которые могут использоваться с любым командлетом.
about_Comparison_Operators        HelpFile  Описание операторов сравнения, используемых в Windows PowerShell.
about_Continue                    HelpFile  Описывает использование инструкции Continue для немедленного перехода
about_Core_Commands               HelpFile  Выводит список командлетов, предназначенных для работы с поставщиками
about_data_sections               HelpFile  Описывает разделы Data, позволяющие отделить текстовые строки и
about_debuggers                   HelpFile  Описывает отладчик Windows PowerShell.
about_do                          HelpFile  Выполняет список инструкций один или несколько раз в зависимости
about_environment_variables       HelpFile  Описывает, как обращаться к переменным среды Windows из Windows
about_escape_characters           HelpFile  Представляет escape-символы Windows PowerShell и их назначение.
about_eventlogs                   HelpFile  Windows PowerShell создает журнал событий Windows с именем "Windows
about_execution_policies          HelpFile  Описывает политики выполнения Windows PowerShell и способы
about_For                         HelpFile  Описывает команду языка, которую можно использовать для выполнения
about_Foreach                     HelpFile  Описывает команду языка, позволяющую перебрать все элементы в
about_format.ps1xml               HelpFile  Файлы Format.ps1xml в Windows PowerShell определяют формат по
about_functions                   HelpFile  Описывает, как создавать и использовать функции в Windows PowerShell.
about_functions_advanced          HelpFile  Представляет расширенные функции, которые работают подобно
about_functions_advanced_methods  HelpFile  Описывает, каким образом функции, имеющие атрибут CmdletBinding, могут
about_functions_advanced_param... HelpFile  Описывает, как добавлять статические и динамические параметры в функции,
about_functions_cmdletbindinga... HelpFile  Описывает атрибут, который объявляет функцию, действие которой
about_hash_tables                 HelpFile  Описывает, как создавать, использовать и сортировать хэш-таблицы
about_History                     HelpFile  Описывает, как извлекать команды из журнала команд.
about_If                          HelpFile  Описывает команду языка, которую можно использовать для
about_jobs                        HelpFile  Сведения о выполнении команд и выражений в фоновых заданиях Windows
about_job_details                 HelpFile  Содержит сведения о фоновых заданиях на локальных и удаленных
about_join                        HelpFile  Описание принципов действия оператора -join, объединяющего
about_Language_Keywords           HelpFile  Описание ключевых слов языка скриптов Windows PowerShell.
about_Line_Editing                HelpFile  Описание способов редактирования команд в командной строке Windows
about_locations                   HelpFile  Описание способов доступа к элементам из рабочего местоположения
about_logical_operators           HelpFile  Описание операторов, объединяющих инструкции Windows PowerShell.
about_methods                     HelpFile  Описание способов использования методов для выполнения действий с
about_modules                     HelpFile  Описание процедур установки, импорта и использования модулей
about_objects                     HelpFile  Основные сведения об объектах в Windows PowerShell.
about_operators                   HelpFile  Описание операторов, поддерживаемых в Windows PowerShell.
about_parameters                  HelpFile  Описание работы с параметрами командлетов в Windows PowerShell.
about_Parsing                     HelpFile  Описание синтаксического анализа команд в Windows PowerShell.
about_Path_Syntax                 HelpFile  Описание форматов полного и относительного имени пути в Windows
about_pipelines                   HelpFile  Объединение команд в конвейеры в Windows PowerShell
about_preference_variables        HelpFile  Переменные, которые настраивают поведение Windows PowerShell
about_profiles                    HelpFile  Содержит описание, как создавать и использовать профиль Windows
about_prompts                     HelpFile  Описывает функцию Prompt и показывает, как создать пользовательску
about_properties                  HelpFile  Содержит описание использования свойств объектов в Windows
about_providers                   HelpFile  Описание принципов, по которым поставщики Windows PowerShell
about_pssessions                  HelpFile  Содержит описание сеансов Windows PowerShell (сеансы PSSession) и
about_pssession_details           HelpFile  Предоставляет подробное описание сеансов Windows PowerShell и их
about_PSSnapins                   HelpFile  Описывает оснастки Windows PowerShell, содержит сведения об
about_Quoting_Rules               HelpFile  Описывает правила использования одиночных и двойных кавычек в Windows
about_Redirection                 HelpFile  Описывает порядок перенаправления вывода из Windows PowerShell
about_Ref                         HelpFile  Описывает порядок создания и использования типа ссылочной переменной.
about_regular_expressions         HelpFile  Описание регулярных выражений в Windows PowerShell.
about_remote                      HelpFile  Описывает, как выполнять удаленные команды в Windows PowerShell.
about_remote_FAQ                  HelpFile  Содержит вопросы о выполнении удаленных команд в Windows
about_remote_jobs                 HelpFile  Описывает, как выполнять фоновые задания на удаленных компьютерах.
about_remote_output               HelpFile  Описывает, как интерпретировать и форматировать выходные данные
about_remote_requirements         HelpFile  Описывает требования к системе и конфигурации для выполнения удаленных
about_remote_troubleshooting      HelpFile  Описывает, как устранять неполадки удаленных операций в
about_requires                    HelpFile  Запрещает выполнение скриптов при отсутствии указанных оснасток
about_Reserved_Words              HelpFile  Содержит список зарезервированных слов, которые имеют специальное
about_Return                      HelpFile  Выход из текущей области действия, которая может быть функцией,
about_scopes                      HelpFile  Объясняется концепция области действия в Windows PowerShell и
about_scripts                     HelpFile  Описание написания и выполнения скриптов в Windows PowerShell.
about_script_blocks               HelpFile  Определение блока скрипта и описание использования блоков скрипта
about_script_internationalization HelpFile  Описание возможностей интернационализации скриптов Windows
about_Session_Configurations      HelpFile  Описание конфигураций сеансов, определяющих, пользователей, которые могут
about_Signing                     HelpFile  Описание процедуры подписания скриптов для их соответствия политикам
about_Special_Characters          HelpFile  Описание специальных символов, которые можно использовать, чтобы
about_split                       HelpFile  Описание использования оператора split для разбивки одной или
about_Switch                      HelpFile  Описание использования инструкции Switch для обработки нескольких
about_Throw                       HelpFile  Описание ключевого слова Throw, генерирующего ошибку с
about_transactions                HelpFile  Описание способов управления операциями транзакций в Windows
about_trap                        HelpFile  Описывает ключевое слово, обрабатывающее прерывающие ошибки.
about_try_catch_finally           HelpFile  Описание использования блоков Try, Catch и Finally для обработки
about_types.ps1xml                HelpFile  Описывает, как с помощью файлов Types.ps1xml расширить типы
about_type_operators              HelpFile  Описывает операторы, работающие с типами Microsoft .NET Framework.
about_Variables                   HelpFile  Описание хранения переменными значений, используемых в Windows
about_While                       HelpFile  Описывает инструкцию языка, которую можно использовать для
about_wildcards                   HelpFile  Описывает использование подстановочных знаков в Windows PowerShell.
about_Windows_PowerShell_2.0      HelpFile  Описание новых возможностей Windows PowerShell версии 2.0.
about_Windows_PowerShell_ISE      HelpFile  Описание функций интегрированной среды скриптов (ISE) Windows
about_WMI_Cmdlets                 HelpFile  Содержит общие сведения об инструментарии управления Windows (WMI)
about_WS-Management_Cmdlets       HelpFile  Содержит общие сведения о протоколе WS-Management, помогающие
default                           HelpFile  Отображает справочные сведения о командлетах и концепциях Windows
>> ImportSystemModules               Function  ImportSystemModules ...
>> Disable-PSTrace                   Function  Disable-PSTrace ...
>> Disable-PSWSManCombinedTrace      Function  Disable-PSWSManCombinedTrace ...
>> Disable-WSManTrace                Function  Disable-WSManTrace ...
>> Enable-PSTrace                    Function  Enable-PSTrace ...
>> Enable-PSWSManCombinedTrace       Function  Enable-PSWSManCombinedTrace ...
>> Enable-WSManTrace                 Function  Enable-WSManTrace ...
>> Get-LogProperties                 Function  Get-LogProperties [-Name] <Object> [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-WarningVariable
..
>> Set-LogProperties                 Function  Set-LogProperties [-LogDetails] <LogDetails> [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-Warnin
..
>> Start-Trace                       Function  Start-Trace [-SessionName] <String> [[-OutputFilePath] <String>] [[-ProviderFilePath] <String>] [-ETS] [-Format <Object>] [-MinBuffers <Int32>] [-MaxBuffers <Int32>] [-B
..
>> Stop-Trace                        Function  Stop-Trace [-SessionName] <Object> [-ETS] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-WarningVa
..
>> Get-WinEvent                      Cmdlet    Получает события из журналов событий и файлов журналов отслеживания событий, находящихся на локальном компьютере и на удаленных компьютерах.
>> Get-Counter                       Cmdlet    Получает данные счетчиков производительности на локальном компьютере и удаленных компьютерах.
>> Import-Counter                    Cmdlet    Импортирует файлы журналов счетчиков производительности (BLG, CSV, TSV) и создает объекты, представляющие каждую выборку счетчика в журнале.
>> Export-Counter                    Cmdlet    Командлет Export-Counter получает объекты PerformanceCounterSampleSet и экспортирует их в файлы журналов счетчиков.
>> Disable-WSManCredSSP              Cmdlet    Отключает проверку подлинности поставщика услуг безопасности CredSSP на клиентском компьютере.
>> Enable-WSManCredSSP               Cmdlet    Включает проверку подлинности поставщика услуг безопасности CredSSP на клиентском компьютере.
>> Get-WSManCredSSP                  Cmdlet    Получает связанную с поставщиком услуг безопасности конфигурацию для клиента.
>> Set-WSManQuickConfig              Cmdlet    Настраивает локальный компьютер для удаленного управления.
>> Test-WSMan                        Cmdlet    Проверяет, запущена ли служба WinRM на локальном или удаленном компьютере.
>> Invoke-WSManAction                Cmdlet    Вызывает действие на объекте, заданном при помощи URI ресурса и селекторов.
>> Connect-WSMan                     Cmdlet    Подключается к службе WinRM на удаленном компьютере.
>> Disconnect-WSMan                  Cmdlet    Отключает клиент от службы WinRM на удаленном компьютере.
>> Get-WSManInstance                 Cmdlet    Отображает сведения об управлении для экземпляра ресурса, заданного URI ресурса.
>> Set-WSManInstance                 Cmdlet    Вносит изменения в относящиеся к ресурсу сведения об управлении.
>> Remove-WSManInstance              Cmdlet    Удаляет экземпляр ресурса управления.
>> New-WSManInstance                 Cmdlet    Создает новый экземпляр ресурса управления.
>> New-WSManSessionOption            Cmdlet    Создает хэш-таблицу параметров сеанса WS-Management для использования в качестве входных параметров следующих командлетов WS-Management:...
>> Get-Command                       Cmdlet    Возвращает базовые сведения о командлетах и о других элементах команд Windows PowerShell.
>> Get-Help                          Cmdlet    Отображает сведения о командах и концепциях Windows PowerShell.
>> Get-History                       Cmdlet    Возвращает список команд, введенных за время текущего сеанса.
>> Invoke-History                    Cmdlet    Выполняет команды из журнала сеанса.
>> Add-History                       Cmdlet    Добавляет записи в журнал сеанса.
>> Clear-History                     Cmdlet    Удаляет записи из журнала сеанса.
>> Register-PSSessionConfiguration   Cmdlet    Создает и регистрирует новую конфигурацию сеанса.
>> Unregister-PSSessionConfiguration Cmdlet    Удаляет зарегистрированные конфигурации сеанса с компьютера.
>> Get-PSSessionConfiguration        Cmdlet    Получает зарегистрированные конфигурации сеансов на компьютере.
>> Set-PSSessionConfiguration        Cmdlet    Изменяет свойства зарегистрированной конфигурации сеанса.
>> Enable-PSSessionConfiguration     Cmdlet    Разрешает доступ к конфигурациям сеанса на локальном компьютере.
>> Disable-PSSessionConfiguration    Cmdlet    Запрещает доступ к конфигурациям сеанса на локальном компьютере.
>> Enable-PSRemoting                 Cmdlet    Настраивает компьютер для получения удаленных команд.
>> Invoke-Command                    Cmdlet    Выполняет команды на локальном и удаленных компьютерах.
>> New-PSSession                     Cmdlet    Создает постоянное подключение к локальному или удаленному компьютеру.
>> Get-PSSession                     Cmdlet    Получает сеансы Windows PowerShell (объекты PSSession) в текущем сеансе.
>> Remove-PSSession                  Cmdlet    Закрывает один или несколько сеансов Windows PowerShell (PSSession).
>> Start-Job                         Cmdlet    Запускает фоновое задание Windows PowerShell.
>> Get-Job                           Cmdlet    Получает фоновые задания Windows PowerShell, активные в текущем сеансе.
>> Receive-Job                       Cmdlet    Получает результаты фоновых заданий Windows PowerShell в текущем сеансе.
>> Stop-Job                          Cmdlet    Останавливает фоновое задание Windows PowerShell.
>> Wait-Job                          Cmdlet    Отключает командную строку до завершения выполнения одного или нескольких фоновых заданий Windows PowerShell, запущенных в этом сеансе.
>> Remove-Job                        Cmdlet    Удаляет фоновое задание Windows PowerShell.
>> Enter-PSSession                   Cmdlet    Начинает интерактивный сеанс с удаленным компьютером.
>> Exit-PSSession                    Cmdlet    Завершает интерактивный сеанс с удаленным компьютером.
>> New-PSSessionOption               Cmdlet    Создает объект, содержащий дополнительные параметры для PSSession.
>> ForEach-Object                    Cmdlet    Выполняет операцию для каждого из последовательности объектов ввода.
>> Where-Object                      Cmdlet    Создает фильтр, который определяет, какие объекты будут переданы по командному конвейеру.
>> Set-PSDebug                       Cmdlet    Позволяет включать и отключать функции отладки скриптов, устанавливать уровень трассировки и переключать строгий режим.
>> Set-StrictMode                    Cmdlet    Задает и применяет правила кодирования в выражениях, скриптах и блоках скрипта.
>> New-Module                        Cmdlet    Создает новый динамический модуль, который существует только в памяти.
>> Import-Module                     Cmdlet    Добавляет модули в текущий сеанс.
>> Export-ModuleMember               Cmdlet    Задает экспортируемые элементы модуля.
>> Get-Module                        Cmdlet    Получает модули, которые были импортированы или могут быть импортированы в текущий сеанс.
>> Remove-Module                     Cmdlet    Удаляет модули из текущего сеанса.
>> New-ModuleManifest                Cmdlet    Создает новый манифест модуля.
>> Test-ModuleManifest               Cmdlet    Проверяет, что файл манифеста модуля точно описывает содержимое модуля.
>> Add-PSSnapin                      Cmdlet    Добавляет одну или несколько оснасток Windows PowerShell в текущий сеанс.
>> Remove-PSSnapin                   Cmdlet    Удаляет оснастки Windows PowerShell из текущего сеанса.
>> Get-PSSnapin                      Cmdlet    Возвращает оснастки Windows PowerShell на данном компьютере.
>> Export-Console                    Cmdlet    Экспортирует имена оснасток в текущем сеансе в файл консоли.
>> Format-List                       Cmdlet    Форматирует вывод как список свойств, в котором каждое свойство выводится на новой строке.
>> Format-Custom                     Cmdlet    Использует пользовательское представление для форматирования вывода.
>> Format-Table                      Cmdlet    Форматирует вывод в виде таблицы.
>> Format-Wide                       Cmdlet    Форматирует объекты в виде широкой таблицы, в которой отображается только одно свойство каждого объекта.
>> Out-Null                          Cmdlet    Удаляет вывод вместо того, чтобы отправить его на консоль.
>> Out-Default                       Cmdlet    Отправляет выходные данные в модуль форматирования по умолчанию и в командлет вывода по умолчанию.
>> Out-Host                          Cmdlet    Отправляет вывод в командную строку.
>> Out-File                          Cmdlet    Отправляет вывод в файл.
>> Out-Printer                       Cmdlet    Отправляет вывод на принтер.
>> Out-String                        Cmdlet    Отправляет объекты основному приложению в виде последовательности строк.
>> Out-GridView                      Cmdlet    Отправляет результаты в интерактивную таблицу в отдельном окне.
>> Get-FormatData                    Cmdlet    Получает данные форматирования для текущего сеанса.
>> Export-FormatData                 Cmdlet    Сохраняет данные форматирования текущего сеанса в файле форматирования.
>> Register-ObjectEvent              Cmdlet    Создает подписку на события, создаваемые объектами Microsoft .NET Framework.
>> Register-EngineEvent              Cmdlet    Создает подписку на события, создаваемые обработчиком Windows PowerShell и командлетом New-Event.
>> Wait-Event                        Cmdlet    Ожидает определенного события, прежде чем продолжить выполнение.
>> Get-Event                         Cmdlet    Получает события из очереди событий.
>> Remove-Event                      Cmdlet    Удаляет события из очереди событий.
>> Get-EventSubscriber               Cmdlet    Получает подписчики на события в текущем сеансе.
>> Unregister-Event                  Cmdlet    Отменяет подписку на событие.
>> New-Event                         Cmdlet    Создает новое событие.
>> Add-Member                        Cmdlet    Добавляет определенный пользователем элемент в экземпляр объекта оболочки Windows PowerShell.
>> Add-Type                          Cmdlet    Добавляет тип (класс) Microsoft .NET Framework в сеанс Windows PowerShell.
>> Compare-Object                    Cmdlet    Сравнивает два набора объектов.
>> ConvertTo-Html                    Cmdlet    Преобразует объекты Microsoft .NET Framework в код HTML, который может отображаться в веб-браузере.
>> ConvertFrom-StringData            Cmdlet    Преобразует строку, содержащую одну или несколько пар типа ключ-значение в хэш-таблицу.
>> Export-CSV                        Cmdlet    Преобразует объекты Microsoft .NET Framework в набор строк переменной длины, содержащих разделенные запятыми значения (CSV), и сохраняет эти строки в CSV-файл.
>> Import-CSV                        Cmdlet    Преобразует свойства объекта из CSV-файла (с разделителями-запятыми) в CSV-версии исходных объектов.
>> ConvertTo-CSV                     Cmdlet    Преобразует объекты Microsoft .NET Framework в набор строк переменной длины, содержащих разделенные запятыми значения (CSV).
>> ConvertFrom-CSV                   Cmdlet    Преобразует свойства объекта из CSV-формата (с разделителями-запятыми) в CSV-версии исходных объектов.
>> Export-Alias                      Cmdlet    Экспортирует сведения об определенных на текущий момент псевдонимах в файл.
>> Invoke-Expression                 Cmdlet    Выполняет команды или выражения на локальном компьютере.
>> Get-Alias                         Cmdlet    Возвращает псевдонимы, действительные в ходе текущего сеанса.
>> Get-Culture                       Cmdlet    Получает текущее значение культуры, установленное в операционной системе.
>> Get-Date                          Cmdlet    Получает текущие значение даты и времени.
>> Get-Host                          Cmdlet    Получает объект, представляющий текущую основную программу. Отображает также версию Windows PowerShell и региональные сведения по умолчанию.
>> Get-Member                        Cmdlet    Получает свойства и методы объектов.
>> Get-Random                        Cmdlet    Получает случайное число или случайным образом выбирает объекты из коллекции.
>> Get-UICulture                     Cmdlet    Получает текущие параметры культуры пользовательского интерфейса операционной системы.
>> Get-Unique                        Cmdlet    Возвращает уникальные элементы из отсортированного списка.
>> Export-PSSession                  Cmdlet    Импортирует команды из другого сеанса и сохраняет их в модуле Windows PowerShell.
>> Import-PSSession                  Cmdlet    Импортирует в текущий сеанс команды из другого сеанса.
>> Import-Alias                      Cmdlet    Импортирует список псевдонимов из файла.
>> Import-LocalizedData              Cmdlet    Импортирует относящиеся к конкретному языку данные в скрипты и функции на основе выбранной в операционной системе культуры пользовательского интерфейса.
>> Select-String                     Cmdlet    Находит текст в строках и файлах.
>> Measure-Object                    Cmdlet    Рассчитывает числовые свойства объектов, а также количество знаков, слов и строк в строковых объектах, например в текстовых файлах.
>> New-Alias                         Cmdlet    Создает новый псевдоним.
>> New-TimeSpan                      Cmdlet    Создает объект TimeSpan.
>> Read-Host                         Cmdlet    Считывает из консоли строку ввода.
>> Set-Alias                         Cmdlet    Создает или изменяет псевдоним (альтернативное имя) командлета или другого элемента команды в текущем сеансе Windows PowerShell.
>> Set-Date                          Cmdlet    Устанавливает системное время на компьютере.
>> Start-Sleep                       Cmdlet    Приостанавливает выполнение скрипта или сеанса на указанный период времени.
>> Tee-Object                        Cmdlet    Сохраняет выходные данные команды в файле или переменной и отображает их на консоли.
>> Measure-Command                   Cmdlet    Измеряет время выполнения блоков скриптов и командлетов.
>> Update-List                       Cmdlet    Добавляет и удаляет элементы в значении свойства, содержащего коллекцию объектов.
>> Update-TypeData                   Cmdlet    Обновляет текущую расширенную конфигурацию типов, перезагружая файлы *.types.ps1xml в память.
>> Update-FormatData                 Cmdlet    Обновляет данные форматирования для текущего сеанса.
>> Write-Host                        Cmdlet    Записывает в основную программу пользовательский вывод.
>> Write-Progress                    Cmdlet    Отображает индикатор выполнения в командном окне Windows PowerShell.
>> New-Object                        Cmdlet    Создает экземпляр объекта Microsoft .NET Framework или COM object.
>> Select-Object                     Cmdlet    Выбирает указанные свойства объекта или набора объектов. Также он может выбирать уникальные объекты из массива объектов или выбирать указанное число объектов с начала ил
..
>> Group-Object                      Cmdlet    Группирует объекты, в которых указанные свойства имеют одно и то же значение.
>> Sort-Object                       Cmdlet    Сортирует объекты по значениям свойств.
>> Get-Variable                      Cmdlet    Получает переменные, определенные для текущей консоли.
>> New-Variable                      Cmdlet    Создает новую переменную.
>> Set-Variable                      Cmdlet    Задает значение переменной. Если переменная с указанным именем не существует, она создается.
>> Remove-Variable                   Cmdlet    Удаляет переменную и ее значение.
>> Clear-Variable                    Cmdlet    Удаляет значение переменной.
>> Export-Clixml                     Cmdlet    Создает XML-представление объекта или объектов и сохраняет его в файле.
>> Import-Clixml                     Cmdlet    Импортирует файл CLIXML и создает соответствующие объекты в оболочке Windows PowerShell.
>> ConvertTo-XML                     Cmdlet    Создает XML-представление объекта.
>> Select-XML                        Cmdlet    Находит текст в XML-строке или документе.
>> Write-Debug                       Cmdlet    Выводит сообщение отладки на консоль.
>> Write-Verbose                     Cmdlet    Записывает текст в поток подробных сообщений.
>> Write-Warning                     Cmdlet    Записывает предупреждающее сообщение.
>> Write-Error                       Cmdlet    Записывает объект в поток ошибок.
>> Write-Output                      Cmdlet    Отправляет заданные объекты очередной команде в конвейере. Если команда является последней командой в конвейере, объекты отображаются на консоли.
>> Set-PSBreakpoint                  Cmdlet    Устанавливает точку останова на строке, команде или переменной.
>> Get-PSBreakpoint                  Cmdlet    Получает настроенные в текущем сеансе точки останова.
>> Remove-PSBreakpoint               Cmdlet    Удаляет из текущей консоли точки останова.
>> Enable-PSBreakpoint               Cmdlet    Включает точки останова для текущей консоли.
>> Disable-PSBreakpoint              Cmdlet    Отключает точки останова для текущей консоли.
>> Get-PSCallStack                   Cmdlet    Отображает текущий стек вызова.
>> Send-MailMessage                  Cmdlet    Отправляет сообщение электронной почты.
>> Get-TraceSource                   Cmdlet    Возвращает компоненты Windows PowerShell, подготовленные к трассировке.
>> Set-TraceSource                   Cmdlet    Настраивает, запускает и останавливает трассировку компонентов Windows PowerShell.
>> Trace-Command                     Cmdlet    Настраивает и запускает трассировку указанного выражения или команды.
>> Start-Transcript                  Cmdlet    Создает запись всего сеанса Windows PowerShell или его части в текстовом файле.
>> Stop-Transcript                   Cmdlet    Останавливает запись.
>> Add-Content                       Cmdlet    Добавляет содержимое в заданные элементы, например слова в файл.
>> Clear-Content                     Cmdlet    Удаляет содержимое элемента без удаления самого элемента, например, удаляет текст из файла.
>> Clear-ItemProperty                Cmdlet    Удаляет значение свойства без удаления самого свойства.
>> Join-Path                         Cmdlet    Соединяет корневой и вложенный пути в один. Поставщик задает разделители пути.
>> Convert-Path                      Cmdlet    Преобразует путь Windows PowerShell в путь поставщика Windows PowerShell.
>> Copy-ItemProperty                 Cmdlet    Копирует свойство и его значение из одного указанного местоположения в другое.
>> Get-EventLog                      Cmdlet    Получает события, зарегистрированные в журнале событий, или список журналов событий, находящихся на локальном или удаленном компьютере.
>> Clear-EventLog                    Cmdlet    Удаляет все записи из заданных журналов событий на локальном или удаленном компьютере.
>> Write-EventLog                    Cmdlet    Записывает событие в журнал событий.
>> Limit-EventLog                    Cmdlet    Задает свойства журнала событий, устанавливающие ограничения размера журнала и возраста его записей.
>> Show-EventLog                     Cmdlet    Отображает журналы событий локального или удаленного компьютера в средстве просмотра событий.
>> New-EventLog                      Cmdlet    Создает новый журнал событий и новый источник событий на локальном или удаленном компьютере.
>> Remove-EventLog                   Cmdlet    Удаляет журнал событий или отменяет регистрацию источника событий.
>> Get-ChildItem                     Cmdlet    Извлекает элементы и их потомки из заданных местоположений.
>> Get-Content                       Cmdlet    Извлекает содержимое элемента, находящегося в заданном местоположении.
>> Get-ItemProperty                  Cmdlet    Получает свойства заданного элемента.
>> Get-WmiObject                     Cmdlet    Получает экземпляры классов WMI или сведения о доступных классах.
>> Invoke-WmiMethod                  Cmdlet    Вызывает методы инструментария управления Windows (WMI)
>> Move-ItemProperty                 Cmdlet    Перемещает свойство из одного местоположения в другое.
>> Get-Location                      Cmdlet    Получает сведения о текущем рабочем местоположении.
>> Set-Location                      Cmdlet    Присваивает текущему местоположению заданное значение.
>> Push-Location                     Cmdlet    Добавляет текущее местоположение в начало списка местоположений ("стек").
>> Pop-Location                      Cmdlet    Меняет текущее местоположение на местоположение, указанное в последней записи стека. Запись с местоположением может быть извлечена как из стека, заданного по умолчанию,
..
>> New-PSDrive                       Cmdlet    Создает диск Windows PowerShell в текущем сеансе.
>> Remove-PSDrive                    Cmdlet    Удаляет диск Windows PowerShell из заданного местоположения.
>> Get-PSDrive                       Cmdlet    Получает диски Windows PowerShell, используемые в текущем сеансе.
>> Get-Item                          Cmdlet    Получает элемент, находящийся в заданном местоположении.
>> New-Item                          Cmdlet    Создает новый элемент.
>> Set-Item                          Cmdlet    Заменяет значение элемента на значение, указанное в команде.
>> Remove-Item                       Cmdlet    Удаляет заданные элементы.
>> Move-Item                         Cmdlet    Перемещает элемент из одного местоположения в другое.
>> Rename-Item                       Cmdlet    Переименовывает элемент в пространстве имен поставщика Windows PowerShell.
>> Copy-Item                         Cmdlet    Копирует элемент из одного местоположения в другое внутри одного пространства имен.
>> Clear-Item                        Cmdlet    Удаляет содержимое элемента без удаления самого элемента.
>> Invoke-Item                       Cmdlet    Выполняет действие по умолчанию над указанным элементом.
>> Get-PSProvider                    Cmdlet    Получает сведения об указанном поставщике Windows PowerShell.
>> New-ItemProperty                  Cmdlet    Создает новое свойство элемента и задает значение этого свойства. Например, командлет New-ItemProperty можно использовать для создания и изменения значений и данных реес
..
>> Split-Path                        Cmdlet    Возвращает указанную часть пути.
>> Test-Path                         Cmdlet    Проверяет, существуют ли все элементы пути.
>> Get-Process                       Cmdlet    Получает процессы, выполняющиеся на локальном или удаленном компьютере.
>> Stop-Process                      Cmdlet    Останавливает один или несколько выполняющихся процессов.
>> Wait-Process                      Cmdlet    Ожидает остановки процессов, прежде чем принимать следующий ввод.
>> Debug-Process                     Cmdlet    Отлаживает один или несколько процессов, выполняющихся на локальном компьютере.
>> Start-Process                     Cmdlet    Запускает один или несколько процессов на локальном компьютере.
>> Remove-ItemProperty               Cmdlet    Удаляет свойство элемента и его значение.
>> Remove-WmiObject                  Cmdlet    Удаляет экземпляр существующего класса инструментария управления Windows (WMI).
>> Rename-ItemProperty               Cmdlet    Переименовывает свойство элемента.
>> Register-WmiEvent                 Cmdlet    Подписывает на событие инструментария управления Windows (WMI).
>> Resolve-Path                      Cmdlet    Разрешает значения подстановочных знаков в пути и отображает содержимое, находящееся по заданному пути.
>> Get-Service                       Cmdlet    Получает службы на локальном или удаленном компьютере.
>> Stop-Service                      Cmdlet    Останавливает одну или несколько выполняющихся служб.
>> Start-Service                     Cmdlet    Запускает остановленные службы.
>> Suspend-Service                   Cmdlet    Приостанавливает одну или несколько выполняющихся служб.
>> Resume-Service                    Cmdlet    Возобновляет работу приостановленных служб.
>> Restart-Service                   Cmdlet    Останавливает, а затем запускает заново одну или несколько служб.
>> Set-Service                       Cmdlet    Запускает, останавливает и приостанавливает службу и изменяет ее свойства.
>> New-Service                       Cmdlet    Создает новую службу Windows.
>> Set-Content                       Cmdlet    Записывает новое содержимое в элемент или заменяет им старое.
>> Set-ItemProperty                  Cmdlet    Создает или изменяет значение свойства элемента.
>> Set-WmiInstance                   Cmdlet    Создает или обновляет экземпляр существующего класса инструментария управления Windows (WMI).
>> Get-Transaction                   Cmdlet    Получает текущую (активную) транзакцию.
>> Start-Transaction                 Cmdlet    Запускает транзакцию.
>> Complete-Transaction              Cmdlet    Фиксирует активную транзакцию.
>> Undo-Transaction                  Cmdlet    Откатывает активную транзакцию.
>> Use-Transaction                   Cmdlet    Добавляет блок скрипта в активную транзакцию.
>> New-WebServiceProxy               Cmdlet    Создает прокси-объект веб-службы, позволяющий использовать веб-службу и управлять ей в Windows PowerShell.
>> Get-HotFix                        Cmdlet    Получает исправления, примененные на локальном компьютере или на удаленных компьютерах.
>> Test-Connection                   Cmdlet    Отправляет пакеты эхо-запросов ICMP (запросы проверки связи) одному или нескольким компьютерам.
>> Enable-ComputerRestore            Cmdlet    Включает функцию восстановления системы на указанном диске файловой системы.
>> Disable-ComputerRestore           Cmdlet    Отключает функцию восстановления системы на указанном диске файловой системы.
>> Checkpoint-Computer               Cmdlet    Создает точку восстановления системы на локальном компьютере.
>> Get-ComputerRestorePoint          Cmdlet    Получает точки восстановления системы на локальном компьютере.
>> Restart-Computer                  Cmdlet    Перезапускает ("перезагружает") операционную систему локального и удаленных компьютеров.
>> Stop-Computer                     Cmdlet    Останавливает локальный и удаленные компьютеры (завершает работу компьютеров).
>> Restore-Computer                  Cmdlet    Запускает восстановление системы на локальном компьютере.
>> Add-Computer                      Cmdlet    Добавление локального компьютера в домен или рабочую группу.
>> Remove-Computer                   Cmdlet    Удаление локального компьютера из домена или рабочей группы.
>> Test-ComputerSecureChannel        Cmdlet    Проверяет и исправляет безопасный канал между локальным компьютером и его доменом.
>> Reset-ComputerMachinePassword     Cmdlet    Сбрасывает пароль учетной записи компьютера.
>> Get-Acl                           Cmdlet    Получает дескриптор безопасности для ресурса, такого как файл или раздел реестра.
>> Set-Acl                           Cmdlet    Изменяет дескриптор безопасности указанного ресурса, например файла или раздела реестра.
>> Get-PfxCertificate                Cmdlet    Получает данные о PFX-файлах сертификата в компьютере.
>> Get-Credential                    Cmdlet    Получает объект хранения учетных данных на основе имени пользователя и пароля.
>> Get-ExecutionPolicy               Cmdlet    Получает политики выполнения для текущего сеанса.
>> Set-ExecutionPolicy               Cmdlet    Изменяет пользовательские параметры политики выполнения Windows PowerShell.
>> Get-AuthenticodeSignature         Cmdlet    Получает сведения о подписи Authenticode в файле.
>> Set-AuthenticodeSignature         Cmdlet    Добавляет подпись Authenticode, чтобы подписать скрипт Windows PowerShell или другой файл.
>> ConvertFrom-SecureString          Cmdlet    Преобразует защищенную строку в зашифрованную стандартную строку.
>> ConvertTo-SecureString            Cmdlet    Преобразует зашифрованные стандартные строки в защищенные строки. Можно также преобразовать обычный текст в защищенные строки. Используется с командлетами ConvertFrom-Se
..
>> Get-AppLockerFileInformation      Cmdlet    Получает информацию AppLocker о файлах из списка файлов или журнала событий.
>> Get-AppLockerPolicy               Cmdlet    Получает локальную, действующую или доменную политику AppLocker.
>> New-AppLockerPolicy               Cmdlet    Создает новую политику AppLocker из списка сведений о файлах и других параметров создания политики.
>> Set-AppLockerPolicy               Cmdlet    Задает политику AppLocker для указанного объекта групповой политики (GPO).
>> Test-AppLockerPolicy              Cmdlet    Проверяет, разрешен ли запуск указанных во входных данных файлов для заданного пользователя на основе указанной политики AppLocker.
>> Add-BitsFile                      Cmdlet    Добавляет один или несколько файлов в существующее задание передачи фоновой интеллектуальной службы передачи (BITS).
>> Complete-BitsTransfer             Cmdlet    Завершает задание передачи фоновой интеллектуальной службы передачи (BITS).
>> Get-BitsTransfer                  Cmdlet    Извлекает связанный объект BitsJob существующего задания передачи фоновой интеллектуальной службы передачи (BITS).
>> Remove-BitsTransfer               Cmdlet    Отменяет задание передачи фоновой интеллектуальной службы передачи (BITS).
>> Resume-BitsTransfer               Cmdlet    Возобновляет задание передачи фоновой интеллектуальной службы передачи (BITS).
>> Set-BitsTransfer                  Cmdlet    Вносит изменения в свойства существующего задания передачи фоновой интеллектуальной службы передачи (BITS).
>> Start-BitsTransfer                Cmdlet    Создает новое задание передачи фоновой интеллектуальной службы передачи (BITS).
>> Suspend-BitsTransfer              Cmdlet    Приостанавливает задание передачи фоновой интеллектуальной службы передачи (BITS).
>> Get-TroubleshootingPack           Cmdlet    Этот командлет получает информацию о диагностическом пакете. Его также можно использовать для создания файла ответов.
>> Invoke-TroubleshootingPack        Cmdlet    Запускает диагностический пакет для устранения неполадок в интерактивном или в автоматическом режиме и создает отчет о результатах.
>> WSMan                             Provider  Обеспечивает доступ к конфигурационной информации веб-служб WS-Management.
>> Alias                             Provider  Предоставляет доступ к псевдонимам Windows PowerShell и представленным ими значениям.
>> Environment                       Provider  Предоставляет доступ к переменным среды Windows.
>> FileSystem                        Provider  Предоставляет доступ к файлам и каталогам.
>> Function                          Provider  Предоставляет доступ к функциям, определенным в Windows PowerShell.
>> Registry                          Provider  Предоставляет доступ к разделам и значениям системного реестра в Windows PowerShell.
>> Variable                          Provider  Предоставляет доступ к переменным Windows PowerShell и их значениям.
>> Certificate                       Provider  Обеспечивает доступ к хранилищам сертификатов X.509 и сертификатам из оболочки Windows PowerShell.
>> about_BITS_Cmdlets                HelpFile  Содержит общие сведения о фоновой интеллектуальной службе передачи
>> about_aliases                     HelpFile  Описывает использование альтернативных имен командлетов и команд
>> about_Arithmetic_Operators        HelpFile  Описание арифметических операторов, используемых в Windows PowerShell.
>> about_arrays                      HelpFile  Описание компактной структуры размещения элементов данных
>> about_Assignment_Operators        HelpFile  Описание использования операторов для присваивания значений
>> about_Automatic_Variables         HelpFile  Описание переменных, в которых хранятся сведения о состоянии оболочки
>> about_Break                       HelpFile  Описывает инструкции, которые можно использовать для немедленного
>> about_command_precedence          HelpFile  Описывает, как Windows PowerShell определяет выполняемую команду.
>> about_Command_Syntax              HelpFile  Описывает синтаксис, используемый в справке для Windows PowerShell.
>> about_Comment_Based_Help          HelpFile  Описание написания разделов справки на основе комментариев для
>> about_CommonParameters            HelpFile  Описание параметров, которые могут использоваться с любым командлетом.
>> about_Comparison_Operators        HelpFile  Описание операторов сравнения, используемых в Windows PowerShell.
>> about_Continue                    HelpFile  Описывает использование инструкции Continue для немедленного перехода
>> about_Core_Commands               HelpFile  Выводит список командлетов, предназначенных для работы с поставщиками
>> about_data_sections               HelpFile  Описывает разделы Data, позволяющие отделить текстовые строки и
>> about_debuggers                   HelpFile  Описывает отладчик Windows PowerShell.
>> about_do                          HelpFile  Выполняет список инструкций один или несколько раз в зависимости
>> about_environment_variables       HelpFile  Описывает, как обращаться к переменным среды Windows из Windows
>> about_escape_characters           HelpFile  Представляет escape-символы Windows PowerShell и их назначение.
>> about_eventlogs                   HelpFile  Windows PowerShell создает журнал событий Windows с именем "Windows
>> about_execution_policies          HelpFile  Описывает политики выполнения Windows PowerShell и способы
>> about_For                         HelpFile  Описывает команду языка, которую можно использовать для выполнения
>> about_Foreach                     HelpFile  Описывает команду языка, позволяющую перебрать все элементы в
>> about_format.ps1xml               HelpFile  Файлы Format.ps1xml в Windows PowerShell определяют формат по
>> about_functions                   HelpFile  Описывает, как создавать и использовать функции в Windows PowerShell.
>> about_functions_advanced          HelpFile  Представляет расширенные функции, которые работают подобно
>> about_functions_advanced_methods  HelpFile  Описывает, каким образом функции, имеющие атрибут CmdletBinding, могут
>> about_functions_advanced_param... HelpFile  Описывает, как добавлять статические и динамические параметры в функции,
>> about_functions_cmdletbindinga... HelpFile  Описывает атрибут, который объявляет функцию, действие которой
>> about_hash_tables                 HelpFile  Описывает, как создавать, использовать и сортировать хэш-таблицы
>> about_History                     HelpFile  Описывает, как извлекать команды из журнала команд.
>> about_If                          HelpFile  Описывает команду языка, которую можно использовать для
>> about_jobs                        HelpFile  Сведения о выполнении команд и выражений в фоновых заданиях Windows
>> about_job_details                 HelpFile  Содержит сведения о фоновых заданиях на локальных и удаленных
>> about_join                        HelpFile  Описание принципов действия оператора -join, объединяющего
>> about_Language_Keywords           HelpFile  Описание ключевых слов языка скриптов Windows PowerShell.
>> about_Line_Editing                HelpFile  Описание способов редактирования команд в командной строке Windows
>> about_locations                   HelpFile  Описание способов доступа к элементам из рабочего местоположения
>> about_logical_operators           HelpFile  Описание операторов, объединяющих инструкции Windows PowerShell.
>> about_methods                     HelpFile  Описание способов использования методов для выполнения действий с
>> about_modules                     HelpFile  Описание процедур установки, импорта и использования модулей
>> about_objects                     HelpFile  Основные сведения об объектах в Windows PowerShell.
>> about_operators                   HelpFile  Описание операторов, поддерживаемых в Windows PowerShell.
>> about_parameters                  HelpFile  Описание работы с параметрами командлетов в Windows PowerShell.
>> about_Parsing                     HelpFile  Описание синтаксического анализа команд в Windows PowerShell.
>> about_Path_Syntax                 HelpFile  Описание форматов полного и относительного имени пути в Windows
>> about_pipelines                   HelpFile  Объединение команд в конвейеры в Windows PowerShell
>> about_preference_variables        HelpFile  Переменные, которые настраивают поведение Windows PowerShell
>> about_profiles                    HelpFile  Содержит описание, как создавать и использовать профиль Windows
>> about_prompts                     HelpFile  Описывает функцию Prompt и показывает, как создать пользовательску
>> about_properties                  HelpFile  Содержит описание использования свойств объектов в Windows
>> about_providers                   HelpFile  Описание принципов, по которым поставщики Windows PowerShell
>> about_pssessions                  HelpFile  Содержит описание сеансов Windows PowerShell (сеансы PSSession) и
>> about_pssession_details           HelpFile  Предоставляет подробное описание сеансов Windows PowerShell и их
>> about_PSSnapins                   HelpFile  Описывает оснастки Windows PowerShell, содержит сведения об
>> about_Quoting_Rules               HelpFile  Описывает правила использования одиночных и двойных кавычек в Windows
>> about_Redirection                 HelpFile  Описывает порядок перенаправления вывода из Windows PowerShell
>> about_Ref                         HelpFile  Описывает порядок создания и использования типа ссылочной переменной.
>> about_regular_expressions         HelpFile  Описание регулярных выражений в Windows PowerShell.
>> about_remote                      HelpFile  Описывает, как выполнять удаленные команды в Windows PowerShell.
>> about_remote_FAQ                  HelpFile  Содержит вопросы о выполнении удаленных команд в Windows
>> about_remote_jobs                 HelpFile  Описывает, как выполнять фоновые задания на удаленных компьютерах.
>> about_remote_output               HelpFile  Описывает, как интерпретировать и форматировать выходные данные
>> about_remote_requirements         HelpFile  Описывает требования к системе и конфигурации для выполнения удаленных
>> about_remote_troubleshooting      HelpFile  Описывает, как устранять неполадки удаленных операций в
>> about_requires                    HelpFile  Запрещает выполнение скриптов при отсутствии указанных оснасток
>> about_Reserved_Words              HelpFile  Содержит список зарезервированных слов, которые имеют специальное
>> about_Return                      HelpFile  Выход из текущей области действия, которая может быть функцией,
>> about_scopes                      HelpFile  Объясняется концепция области действия в Windows PowerShell и
>> about_scripts                     HelpFile  Описание написания и выполнения скриптов в Windows PowerShell.
>> about_script_blocks               HelpFile  Определение блока скрипта и описание использования блоков скрипта
>> about_script_internationalization HelpFile  Описание возможностей интернационализации скриптов Windows
>> about_Session_Configurations      HelpFile  Описание конфигураций сеансов, определяющих, пользователей, которые могут
>> about_Signing                     HelpFile  Описание процедуры подписания скриптов для их соответствия политикам
>> about_Special_Characters          HelpFile  Описание специальных символов, которые можно использовать, чтобы
>> about_split                       HelpFile  Описание использования оператора split для разбивки одной или
>> about_Switch                      HelpFile  Описание использования инструкции Switch для обработки нескольких
>> about_Throw                       HelpFile  Описание ключевого слова Throw, генерирующего ошибку с
>> about_transactions                HelpFile  Описание способов управления операциями транзакций в Windows
>> about_trap                        HelpFile  Описывает ключевое слово, обрабатывающее прерывающие ошибки.
>> about_try_catch_finally           HelpFile  Описание использования блоков Try, Catch и Finally для обработки
>> about_types.ps1xml                HelpFile  Описывает, как с помощью файлов Types.ps1xml расширить типы
>> about_type_operators              HelpFile  Описывает операторы, работающие с типами Microsoft .NET Framework.
>> about_Variables                   HelpFile  Описание хранения переменными значений, используемых в Windows
>> about_While                       HelpFile  Описывает инструкцию языка, которую можно использовать для
>> about_wildcards                   HelpFile  Описывает использование подстановочных знаков в Windows PowerShell.
>> about_Windows_PowerShell_2.0      HelpFile  Описание новых возможностей Windows PowerShell версии 2.0.
>> about_Windows_PowerShell_ISE      HelpFile  Описание функций интегрированной среды скриптов (ISE) Windows
>> about_WMI_Cmdlets                 HelpFile  Содержит общие сведения об инструментарии управления Windows (WMI)
>> about_WS-Management_Cmdlets       HelpFile  Содержит общие сведения о протоколе WS-Management, помогающие
>> default                           HelpFile  Отображает справочные сведения о командлетах и концепциях Windows

PS C:\Windows\system32>

PS C:\Windows\system32> get-service | get-member


   TypeName: System.ServiceProcess.ServiceController

Name                      MemberType    Definition
----                      ----------    ----------
Name                      AliasProperty Name = ServiceName
RequiredServices          AliasProperty RequiredServices = ServicesDependedOn
Disposed                  Event         System.EventHandler Disposed(System.Object, System.EventArgs)
Close                     Method        System.Void Close()
Continue                  Method        System.Void Continue()
CreateObjRef              Method        System.Runtime.Remoting.ObjRef CreateObjRef(type requestedType)
Dispose                   Method        System.Void Dispose()
Equals                    Method        bool Equals(System.Object obj)
ExecuteCommand            Method        System.Void ExecuteCommand(int command)
GetHashCode               Method        int GetHashCode()
GetLifetimeService        Method        System.Object GetLifetimeService()
GetType                   Method        type GetType()
InitializeLifetimeService Method        System.Object InitializeLifetimeService()
Pause                     Method        System.Void Pause()
Refresh                   Method        System.Void Refresh()
Start                     Method        System.Void Start(), System.Void Start(string[] args)
Stop                      Method        System.Void Stop()
ToString                  Method        string ToString()
WaitForStatus             Method        System.Void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desiredStatus), System.Void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desiredStatus, System...
CanPauseAndContinue       Property      System.Boolean CanPauseAndContinue {get;}
CanShutdown               Property      System.Boolean CanShutdown {get;}
CanStop                   Property      System.Boolean CanStop {get;}
Container                 Property      System.ComponentModel.IContainer Container {get;}
DependentServices         Property      System.ServiceProcess.ServiceController[] DependentServices {get;}
DisplayName               Property      System.String DisplayName {get;set;}
MachineName               Property      System.String MachineName {get;set;}
ServiceHandle             Property      System.Runtime.InteropServices.SafeHandle ServiceHandle {get;}
ServiceName               Property      System.String ServiceName {get;set;}
ServicesDependedOn        Property      System.ServiceProcess.ServiceController[] ServicesDependedOn {get;}
ServiceType               Property      System.ServiceProcess.ServiceType ServiceType {get;}
Site                      Property      System.ComponentModel.ISite Site {get;set;}
Status                    Property      System.ServiceProcess.ServiceControllerStatus Status {get;}


PS C:\Windows\system32>

PS C:\Windows\system32> get-service schedule | format-list -property *


Name                : schedule
RequiredServices    : {RPCSS, EventLog}
CanPauseAndContinue : False
CanShutdown         : False
CanStop             : True
DisplayName         : Планировщик заданий
DependentServices   : {}
MachineName         : .
ServiceName         : schedule
ServicesDependedOn  : {RPCSS, EventLog}
ServiceHandle       :
Status              : Running
ServiceType         : Win32ShareProcess
Site                :
Container           :



PS C:\Windows\system32>

PS C:\Windows\system32> get-help about_execution_policies
РАЗДЕЛ
    about_Execution_Policies

КРАТКОЕ ОПИСАНИЕ
    Описывает политики выполнения Windows PowerShell и способы
    управления ими.

ПОЛНОЕ ОПИСАНИЕ
    Политики выполнения Windows PowerShell позволяют определять
    условия, при которых среда Windows PowerShell загружает файлы
    конфигурации и выполняет скрипты.

    Политику выполнения можно задать для локального компьютера, текущего
    пользователя или конкретного сеанса. Для задания политик выполнения для
    пользователей и компьютеров можно использовать параметры групповой
    политики.

    Политики выполнения для локального компьютера и текущего пользователя
    хранятся в реестре. Политики выполнения не требуется задавать в
    профиле Windows PowerShell. Политика выполнения для конкретного
    сеанса хранится только в памяти и теряется после закрытия сеанса.

    Политика выполнения не является механизмом обеспечения безопасности,
    который ограничивает действия пользователей. Например, пользователи могут
    обходить политику путем ввода содержимого скрипта в командной строке, если
    выполнить скрипт не удается. Вместо этого политика выполнения помогает
    пользователям задавать базовые правила и не позволяет непреднамеренно нарушать их.


                                                  ПОЛИТИКИ ВЫПОЛНЕНИЯ WINDOWS POWERSHELL
 -------------------------------------

    Существуют следующие политики выполнения Windows PowerShell.

    Restricted - политика по умолчанию.

        Restricted
            - Политика выполнения по умолчанию.

            - Допускает отдельные команды, но скрипты выполнять нельзя.

            - Препятствует выполнению всех файлов скриптов, включая файлы
              форматирования и конфигурации (PS1XML), файлы скриптов модулей
              (PSM1) и профили Windows PowerShell (PS1).

        AllSigned
            - Выполнение скриптов разрешено.

            - Требует, чтобы все скрипты и файлы конфигурации были
              подписаны надежным издателем, в том числе скрипты,
              подготовленные на локальном компьютере.

            - Перед выполнением скриптов издателей, для которых еще не
              определено, являются ли они надежными, выводятся
              предупреждения.

            - Имеется риск выполнения неподписанных скриптов из
              источников, отличных от Интернета, а также подписанных, но
              вредоносных скриптов.

        RemoteSigned
            - Выполнение скриптов разрешено.

            - Требует наличия цифровой подписи надежного издателя у
              скриптов и файлов конфигурации, загружаемых из
              Интернета (включая электронную почту и программы мгновенного
              обмена сообщениями).

            - Не требует наличия цифровых подписей у скриптов, выполняемых и
              написанных на локальном компьютере (не загруженных из Интернета).

            - Имеется риск выполнения подписанных, но вредоносных
              скриптов.

        Unrestricted
            - Могут выполняться неподписанные скрипты. (Имеется риск
              выполнения вредоносных скриптов.)

            - Предупреждает пользователя перед выполнением скриптов и
              файлов конфигурации, загруженных из Интернета.

        Bypass
            - Ничего не блокируется, и никакие предупреждения и запросы не
              появляются.

            - Эта политика выполнения предназначена для конфигураций,
              в которых скрипт Windows PowerShell встроен в более крупное
              приложение, или для конфигураций, в которых Windows PowerShell
              является платформой для программы, у которой имеется собственная
              модель обеспечения безопасности.

        Undefined
            - В текущей области не задана политика выполнения.

            - Если политика выполнения во всех областях имеет значение
              Undefined, действует политика выполнения Restricted, которая
              является политикой выполнения по умолчанию.


    Примечание. В системах, которые не отличают UNC-пути от путей в
                Интернете, выполнение скриптов, которые задаются UNC-путями,
                может быть запрещено, если включена политика выполнения RemoteSigned.



 ОБЛАСТЬ ПОЛИТИКИ ВЫПОЛНЕНИЯ
 ---------------------------
    Можно задать политику выполнения, которая действует только в
    конкретной области.

    Допустимые значения параметра Scope - Process, CurrentUser и
    LocalMachine. При задании политики выполнения по умолчанию
    используется значение LocalMachine.

    Значения Scope перечислены в порядке приоритета.

        - Process
             Действие политики выполнения распространяется только на
             текущий сеанс (текущий процесс Windows PowerShell). Политика
             выполнения хранится в переменной среды $PSExecutionPolicyPreference.
             Это значение удаляется, когда сеанс, в котором задана политика,
             закрывается.

        - CurrentUser
             Действие политики выполнения распространяется только на
             текущего пользователя. Она хранится в разделе реестра
             HKEY_CURRENT_USER.

        - LocalMachine
             Действие политики выполнения распространяется на всех
             пользователей текущего компьютера. Она хранится в
             разделе реестра HKEY_LOCAL_MACHINE.

    Политика, имеющая более высокий приоритет, действует в текущем
    сеансе даже в том случае, если на более низком уровне приоритета
    была задана более строгая политика.

    Дополнительные сведения см. в описании командлета Set-ExecutionPolicy.



 ПОЛУЧЕНИЕ ПОЛИТИКИ ВЫПОЛНЕНИЯ
 ------------------------------
    Чтобы получить политику выполнения Windows PowerShell, которая
    действует в текущем сеансе, используется командлет Get-ExecutionPo
    licy.

    Следующая команда получает текущую политику выполнения:

        get-executionpolicy


    Чтобы получить все политики выполнения, влияющие на текущий сеанс и
    отобразить их в порядке приоритета, введите:

        get-executionpolicy -list

    Выходные данные будут выглядеть примерно следующим образом:

                  Scope    ExecutionPolicy
                  -----    ---------------
          MachinePolicy          Undefined
             UserPolicy          Undefined
                Process          Undefined
            CurrentUser       RemoteSigned
           LocalMachine          AllSigned

    В этом случае действует политика выполнения RemoteSigned,
    поскольку политика выполнения текущего пользователя имеет приоритет по
    сравнению с политикой выполнения для локального компьютера.

    Чтобы получить политику выполнения для конкретной области, следует
    использовать параметр Scope командлета Get-ExecutionPolicy.

    Например, следующая команда получает политику выполнения для области
    текущего пользователя.

        get-executionpolicy -scope CurrentUser




 ИЗМЕНЕНИЕ ПОЛИТИКИ ВЫПОЛНЕНИЯ
 ------------------------------
    Чтобы изменить политику выполнения Windows PowerShell на
    компьютере, следует использовать командлет Set-ExecutionPolicy.

    Изменение вступает в силу немедленно; перезапускать оболочку Windows
    PowerShell не требуется.

    Если задать политику выполнения для локального компьютера (по
    умолчанию) или текущего пользователя, изменение сохраняется в
    реестре и остается в силе, пока политика не будет изменена снова.

    Если задать политику выполнения для текущего процесса, она не
    сохраняется в реестре. Она сохраняется, пока текущий процесс и все его
    дочерние процессы не будут закрыты.


    Примечание. В Windows Vista и более поздних версиях Windows для
                выполнения команд, которые изменяют политику выполнения
                для локального компьютера (по умолчанию), запустите Windows
                PowerShell командой "Запуск от имени администратора".


    Чтобы изменить политику выполнения, введите:

        Set-ExecutionPolicy <имя_политики>

    Пример:

        Set-ExecutionPolicy RemoteSigned



    Чтобы задать политику выполнения в конкретной области, введите:

        Set-ExecutionPolicy <имя_политики> -scope <область>

    Пример:

        Set-ExecutionPolicy RemoteSigned -scope CurrentUser


    Команда изменения политики выполнения может быть выполнена
    успешно, но не изменить действующую политику выполнения.

    Например, команда, устанавливающая политику выполнения для локального
    компьютера, может быть выполнена успешно, но она может быть переопределена
    политикой выполнения для текущего пользователя.



 УДАЛЕНИЕ ПОЛИТИКИ ВЫПОЛНЕНИЯ
 ----------------------------
    Чтобы удалить политику выполнения для конкретной области, следует
    задать для политики выполнения значение Undefined.

    Например, чтобы удалить политику выполнения для всех пользователей
    локального компьютера, введите:

        set-executionpolicy Undefined

    Также можно ввести команду:

        set-executionpolicy Undefined -scope LocalMachine

    Если ни в одной из областей не задана ни одна политика
    выполнения, будет действовать политика выполнения Restricted, которая
    является политикой по умолчанию.



 УСТАНОВКА ПОЛИТИКИ ВЫПОЛНЕНИЯ В POWERSHELL.EXE
 ----------------------------------------------
    С помощью параметра ExecutionPolicy программы PowerShell.exe
    можно задать политику выполнения для нового сеанса Windows PowerShell.
    Действие политики распространяется только на текущий сеанс и его
    дочерние сеансы.

    Чтобы задать политику выполнения для нового сеанса, запустите Windows
    PowerShell в командной строке (например, Cmd.exe или Windows PowerShell),
    а затем воспользуйтесь параметром ExecutionPolicy программы PowerShell.exe,
    чтобы задать политику выполнения.

    Пример:

        powershell.exe -executionpolicy -allsigned


    Задаваемая политика выполнения не сохраняется в реестре.
    Вместо этого она сохранятся в переменной среды $PSExecutionPolicyP
    reference. Переменная удаляется, когда сеанс, в котором задана
    политика, закрывается.

    На протяжении сеанса политика выполнения, которая задана для
    сеанса, имеет приоритет по сравнению с политикой выполнения,
    заданной в реестре для локального компьютера или текущего
    пользователя. Однако она не имеет приоритета по сравнению с
    политикой выполнения, заданной с помощью групповой политики
    (см. ниже).



 УПРАВЛЕНИЕ ПОЛИТИКАМИ ВЫПОЛНЕНИЯ С ПОМОЩЬЮ ГРУППОВОЙ ПОЛИТИКИ
 -------------------------------------------------------------
    С помощью параметра групповой политики "Включить выполнение
    скриптов" можно управлять политикой выполнения компьютеров в
    организации. Этот параметр групповой политики переопределяет
    политики выполнения, заданные в Windows PowerShell во всех областях.

    Параметр политики "Включить выполнение скриптов" работает
    следующим образом.

    -- Если отключить параметр "Включить выполнение скриптов", скрипты
       выполняться не будут. Это эквивалентно применению политики выполнения
       Restricted.

    -- Если включить параметр "Включить выполнение скриптов", можно
       выбрать политику выполнения. Параметры групповой политики
       эквивалентны следующим политикам выполнения.

        Групповая политика          Политика выполнения
        ----------------------      -------------------
        Разрешить все скрипты.      Unrestricted

        Разрешить локальные         RemoteSigned
        скрипты и удаленные
        подписанные скрипты.

        Разрешить только            AllSigned
        подписанные скрипты.

     -- Если параметр "Включить выполнение скриптов" не задан, он не
        действует. Действует политика выполнения, заданная в Windows
        PowerShell.


    Файл PowerShellExecutionPolicy.adm добавляет политику "Включить
    выполнение скриптов" в узлы "Конфигурация компьютера" и "Конфигурация
    пользователя" редактора групповой политики по следующим путям.

        В Windows XP и Windows Server 2003:
        Административные шаблоны\Компоненты Windows\Windows PowerShell

        В Windows Vista и более поздних версиях Windows:
        Административные шаблоны\Классические административные
        шаблоны\Компоненты Windows\Windows PowerShell

    Политики в узле "Конфигурация компьютера" имеют приоритет по
    сравнению с политиками в узле "Конфигурация пользователя".

    Файл PowerShellExecutionPolicy.adm можно загрузить из Центра загрузки
    Майкрософт. Дополнительные сведения см. в разделе "Административные
    шаблоны для Windows PowerShell" по адресу
    http://go.microsoft.com/fwlink/?LinkId=131786.


 ПРИОРИТЕТ ПОЛИТИК ВЫПОЛНЕНИЯ
 ----------------------------
    При определении действующей политики выполнения для сеанса среда
    Windows PowerShell вычисляет политики выполнения на основании
    следующего порядка приоритетов.

        - Групповая политика: конфигурация компьютера
        - Групповая политика: конфигурация пользователя
        - Политика выполнения: Process (или PowerShell.exe
        - ExecutionPolicy) Политика выполнения: CurrentUser
        - Политика выполнения: LocalMachine


 УПРАВЛЕНИЕ ПОДПИСАННЫМИ И НЕПОДПИСАННЫМИ СКРИПТАМИ
 --------------------------------------------------
    Если в Windows PowerShell установлена политика выполнения
    RemoteSigned, среда Windows PowerShell не будет выполнять
    неподписанные скрипты, загружаемые из Интернета (включая
    электронную почту и программы мгновенного обмена сообщениями).

    Можно подписать скрипт или выполнить неподписанный скрипт без
    изменения политики выполнения.

    Дополнительные сведения см. в разделе about_Signing.


СМ. ТАКЖЕ
    Get-ExecutionPolicy
    Set-ExecutionPolicy
    about_Signing
    "Административные шаблоны для Windows PowerShell"
        (http://go.microsoft.com/fwlink/?LinkId=131786)
PS C:\Windows\system32>

Windows PowerShell
(C) Корпорация Майкрософт, 2009. Все права защищены.

PS C:\Windows\system32> get-help get-command -detailed

ИМЯ
    Get-Command

ОПИСАНИЕ
    Возвращает базовые сведения о командлетах и о других элементах команд Windows PowerShell.


СИНТАКСИС
    Get-Command [[-Name] <string[]>] [-CommandType {Alias | Function | Filter | Cmdlet | ExternalScript | Application | Script | All}] [[-ArgumentList] <Object[]>] [-Module <string[]>] [-Syntax] [-TotalCount <int>] [<CommonP
    arameters>]

    Get-Command [-Noun <string[]>] [-Verb <string[]>] [[-ArgumentList] <Object[]>] [-Module <string[]>] [-Syntax] [-TotalCount <int>] [<CommonParameters>]


ОПИСАНИЕ
    Командлет Get-Command возвращает базовые сведения о командлетах и других элементах команд Windows PowerShell в сеансе, таких как псевдонимы, функции, фильтры, скрипты и приложения.

    Get-Command получает данные непосредственно из кода командлета, функции, скрипта или псевдонима в отличие от Get-Help, который получает информацию из файлов справки.

    При вызове без параметров Get-Command получает все командлеты и функции в текущем сеансе. "Get-Command *" получает все элементы Windows PowerShell и все файлы, не относящиеся к Windows-PowerShell, в переменной среды Path
     ($env:path). Он группирует файлы в команде типа "Application".

    Для поиска команд, добавленных в сеанс путем добавления оснастки Windows PowerShell или импорта модуля, можно использовать параметр Module Get-Command.


ПАРАМЕТРЫ
    -ArgumentList <Object[]>
        Получает данные о командлете или функции, используемых с указанными параметрами ("аргументами"), такими как путь.  Псевдоним ArgumentList — Args.

        Для определения параметров, добавленных к командлету при его использовании с определенным провайдером, установите значение ArgumentList равным пути на диске поставщика, например "HKEY_LOCAL_MACHINE\Software" или "cer
        t:\my".

    -CommandType <CommandTypes>
        Получает только команды указанных типов. Используйте "CommandType" или псевдоним "Type". По умолчанию командлет Get-Command получает командлеты и функции.

        Допустимые значения:
        -- Alias: все псевдонимы Windows PowerShell в текущем сеансе.

        -- All: команды всех типов. Эквивалентно "get-command *".

        -- Application: все файлы, отличные от файлов Windows PowerShell, которые присутствуют в путях, указанных в переменной среды Path ($env:path), в том числе файлы TXT, EXE и DLL.

        -- Cmdlet: командлеты в текущем сеансе. По умолчанию используется значение "Cmdlet".

        -- ExternalScript: все файлы PS1, которые присутствуют в путях, указанных в переменной среды Path ($env:path).

        -- Filter и Function: все функции Windows PowerShell.

        -- Script: блоки скриптов в текущем сеансе.

    -Module <string[]>
        Получает команды, которые поставляются с определенными модулями или оснастками. Введите имена модулей или оснасток или введите объекты оснасток или модулей.

        Можно обращаться к этому параметру по его имени (Module) или его псевдониму (PSSnapin). Выбранное имя параметра не влияет на результаты выполнения команды или ее выходные данные.

        Этот параметр принимает строковые значения, но также можно предоставить объект PSModuleInfo или PSSnapinInfo, например объекты, возвращаемые Get-Module, Get-PSSnapin и Import-PSSession.

    -Name <string[]>
        Получает сведения только о командлетах или элементах команды с указанным именем. <Строка> представляет целое имя или часть имени командлета или элемента команды. Подстановочные знаки разрешены.

        Для перечисления команд с одинаковыми именами в порядке выполнения введите имя команды без подстановочных знаков. Дополнительные сведения см. в разделе "Примечания".

    -Noun <string[]>
        Получает командлеты или функции с именами, в которых содержится указанное существительное. <Строка> представляет одно или несколько существительных или шаблонов существительных, таких как "process" или "*item*". Подс
        тановочные знаки разрешены.

    -Syntax [<SwitchParameter>]
        Получает только указанные данные об элементе команды.
                   * Для псевдонимов извлекается стандартное имя.
                   * Для командлетов извлекается синтаксис.
                   * Для функций и фильтров извлекается определение функции.
                   * Для скриптов и приложений (файлов) извлекаются путь и имя файла.

    -TotalCount <int>
        Получает только указанное количество элементов команды. Этот параметр позволяет ограничить объем выходных данных команды.

    -Verb <string[]>
        Получает данные о командлетах и функциях с именами, в которых содержится указанный глагол. <Строка> представляет один или несколько глаголов или шаблонов глаголов, таких как "remove" или "*et". Подстановочные знаки разрешены.

    <CommonParameters>
        Данный командлет поддерживает общие параметры: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer и OutVariable. Для получения дополнительных сведений введите
        "get-help about_commonparameters".
    -------------------------- ПРИМЕР 1 --------------------------
    C:\PS>get-command
    Описание
    -----------
    Эта команда получает сведения обо всех командлетах и функциях Windows PowerShell.
    На экране по умолчанию указывается тип команды ("Cmdlet", "Function" или "Filter"), имя командлета или функции и синтаксис или определение функции.
    -------------------------- ПРИМЕР 2 --------------------------
    C:\PS>get-command -verb set | format-list
    Description
    -----------
    Эта команда получает сведения обо всех командлетах и функциях, содержащих глагол "set", и отображает список, содержащий часть этих сведений.

    В формате списка содержатся поля, которые пропущены в отображении этой таблицы, в том числе полный синтаксис вызова. Для отображения всех полей (всех свойств объекта) введите команду "get-command -verb set | format-list
    *".
   -------------------------- ПРИМЕР 3 --------------------------

    C:\PS>get-command -type cmdlet | sort-object noun | format-table -group noun
    Description
    -----------
    Эта команда извлекает все командлеты, производит алфавитную сортировку по существительному в имени командлета и отображает их, группируя
    по существительному. Такой способ отображения поможет найти командлеты, предназначенные для определенной задачи.

    По умолчанию командлет Get-Command отображает элементы в порядке их обнаружения системой. В этом же порядке они выбираются для запуска, если команда запуска допускает неоднозначное толкование.
    -------------------------- ПРИМЕР 4 --------------------------
    C:\PS>get-command -module Microsoft.PowerShell.Security, TestModule
    Description
    -----------
    Эта команда получает команды из оснастки Microsoft.PowerShell.Security и модуля Test-Module.

    Параметр Module позволяет получить команды, которые были добавлены при импорте модулей или добавлении оснасток Windows PowerShell.
    -------------------------- ПРИМЕР 5 --------------------------
    C:\PS>get-command get-childitem -args cert: -syntax
    Description
    -----------
    Эта команда извлекает сведения о командлете Get-ChildItem при использовании Get-ChildItem с поставщиком Windows PowerShell Certificate.

    При сравнении отображаемого в результате синтаксиса вызова с синтаксисом вызова, который отображается, если пропустить параметр Args (ArgumentList), можно видеть, что при вызове командлета Get-ChildItem поставщик Certificate динамически добавляет параметр CodeSigningCert.
    -------------------------- ПРИМЕР 6 --------------------------
    C:\PS>(get-command get-childitem -ArgumentList cert:).parametersets[0].parameters | where-object { $_.IsDynamic }
    Description
    -----------
    Эта команда извлекает только параметры, динамически добавляемые при вызове командлета Get-ChildItem поставщиком Windows PowerShell Certificate. Этот метод альтернативен методу из предыдущего примера.

    В данном случае сначала выполняется команда "get-command get-childitem -ArgumentList cert:". При помощи командлета Get-Command она извлекает данные о командлете Get-ChildItem при его использовании совместно с поставщиком     Certificate. Конструкция ".parametersets[0]" выбирает первую последовательность параметров (последовательность 0) из результатов вызова "get-childitem -argumentList cert:", а конструкция ".parameters" выбирает параметры
     в этой последовательности параметров. Полученные в результате параметры передаются по конвейеру командлету Where-Object для проверки каждого параметра ("$_.") при помощи его свойства IsDynamic. Для нахождения свойств об
    ъектов в команде воспользуйтесь командлетом Get-Member.
    -------------------------- ПРИМЕР 7 --------------------------
    C:\PS>get-command *
    Description
    -----------
    Эта команда получает информацию о командлетах, функциях, фильтрах, скриптах и псевдонимах Windows PowerShell в текущей консоли.

    Она также получает информацию обо всех файлах, которые присутствуют в путях, указанных в переменной среды Path ($env:path). Для каждого файла возвращается объект ApplicationInfo (System.Management.Automation.ApplicationI
    nfo), а не объект FileInfo (System.IO.FileInfo)
    -------------------------- ПРИМЕР 8 --------------------------
    C:\PS>get-command | where-object {$_.definition -like "*first*"}

    CommandType     Name                        Definition
    -----------     ----                        ---------
    Cmdlet          Select-Object               Select-Object [[-Property]

    Description
    -----------
    Эта команда находит командлет или функцию на основании имени одного из параметров. Эту команду можно использовать для определения командлета или функции, если удается вспомнить только имя одного из параметров.

    В данном примере известно, что у одного командлета или функции есть параметр First, который позволяет получить первые "n" объектов в списке, но неизвестно имя командлета.

    В команде используется командлет Get-Command, позволяющий получить объект CmdletInfo, который представляет все командлеты и функции в сеансе. У объекта CmdletInfo есть свойство Definition, в котором содержится синтаксис
    командлета или функции с указанием всех параметров.

    Оператор конвейера (|) используется для передачи объекта CmdletInfo командлету Where-Object, который анализирует определение (синтаксис) каждого объекта ($_) и выполняет поиск значения "first".

    Результат выполнения команды показывает, что параметр First принадлежит командлету Select-Object.
    -------------------------- ПРИМЕР 9 --------------------------
    C:\PS>get-command dir | format-list

    Name              : dir
    CommandType       : Alias
    Definition        : Get-ChildItem
    ReferencedCommand : Get-ChildItem
    ResolvedCommand   : Get-ChildItem

    Description
    -----------
    В этом примере показано, как использовать командлет Get-Command для псевдонима. Хотя командлет Get-Command обычно используется для командлетов, он также отображает информацию о коде в скриптах, функциях, псевдонимах и ис
    полняемых файлах.

    Эта команда удаляет отображает псевдоним "dir" в текущей консоли. Результат передается по конвейеру командлетам Format-List.
    -------------------------- ПРИМЕР 10 --------------------------

    C:\PS>get-command notepad

    CommandType     Name           Definition
    -----------     ----           ----------
    Application     notepad.exe    C:\WINDOWS\system32\notepad.exe
    Application     NOTEPAD.EXE    C:\WINDOWS\NOTEPAD.EXE

    Description
    -----------
    В этом примере показано, как использовать командлет Get-Command для определения команды, выполняемой Windows PowerShell в случае, если доступны несколько команд с одинаковым именем. При использовании параметра Name без п
    одстановочных знаков командлет Get-Command перечисляет команды с указанным именем в порядке выполнения.

    Это команда показывает, какая программа Notepad будет запущена Windows PowerShell при вводе "Notepad" без полного пути. В команде используется параметр Name без подстановочных знаков.

    Пример выходных данных показывает команды с именем "Notepad" в текущей консоли. Из приведенных данных можно сделать вывод, что Windows PowerShell запустит экземпляр Notepad.exe из каталога C:\Windows\System32.
    -------------------------- ПРИМЕР 11 --------------------------
    C:\PS>(get-command get-date).pssnapin
    C:\PS> (get-command remove-gpo).module
    Description
    -----------
    Эти команды показывают, как найти оснастку или модуль, к которому принадлежит определенный командлет.

    В первой команде для определения оснастки, добавившей командлет Get-Date, используется свойство PSSnapin объекта CmdletInfo.

    Во второй команде для определения модуля, добавившего командлет Remove-GPO, используется свойство Module объекта CmdletInfo.
ЗАМЕЧАНИЯ
    Для просмотра примеров введите: "get-help Get-Command -examples".
    Для получения дополнительных сведений введите: "get-help Get-Command -detailed".
    Для получения технических сведений введите: "get-help Get-Command -full".

PS C:\Windows\system32> get-help get-command -examples

ИМЯ
    Get-Command

ОПИСАНИЕ
    Возвращает базовые сведения о командлетах и о других элементах команд Windows PowerShell.
    -------------------------- ПРИМЕР 1 --------------------------
    C:\PS>get-command
    Описание
    -----------
    Эта команда получает сведения обо всех командлетах и функциях Windows PowerShell.

    На экране по умолчанию указывается тип команды ("Cmdlet", "Function" или "Filter"), имя командлета или функции и синтаксис или определение функции.
    -------------------------- ПРИМЕР 2 --------------------------
    C:\PS>get-command -verb set | format-list
    Description
    -----------
    Эта команда получает сведения обо всех командлетах и функциях, содержащих глагол "set", и отображает список, содержащий часть этих сведений.

    В формате списка содержатся поля, которые пропущены в отображении этой таблицы, в том числе полный синтаксис вызова. Для отображения всех полей (всех свойств объекта) введите команду "get-command -verb set | format-list
    *".
    -------------------------- ПРИМЕР 3 --------------------------
    C:\PS>get-command -type cmdlet | sort-object noun | format-table -group noun
    Description
    -----------
    Эта команда извлекает все командлеты, производит алфавитную сортировку по существительному в имени командлета и отображает их, группируя
    по существительному. Такой способ отображения поможет найти командлеты, предназначенные для определенной задачи.

    По умолчанию командлет Get-Command отображает элементы в порядке их обнаружения системой. В этом же порядке они выбираются для запуска, если команда запуска допускает неоднозначное толкование.
    -------------------------- ПРИМЕР 4 --------------------------
    C:\PS>get-command -module Microsoft.PowerShell.Security, TestModule
    Description
    -----------
    Эта команда получает команды из оснастки Microsoft.PowerShell.Security и модуля Test-Module.
    Параметр Module позволяет получить команды, которые были добавлены при импорте модулей или добавлении оснасток Windows PowerShell.
    -------------------------- ПРИМЕР 5 --------------------------
    C:\PS>get-command get-childitem -args cert: -syntax
    Description
    -----------
    Эта команда извлекает сведения о командлете Get-ChildItem при использовании Get-ChildItem с поставщиком Windows PowerShell Certificate.

    При сравнении отображаемого в результате синтаксиса вызова с синтаксисом вызова, который отображается, если пропустить параметр Args (ArgumentList), можно видеть, что при вызове командлета Get-ChildItem поставщик Certifi
    cate динамически добавляет параметр CodeSigningCert.
    -------------------------- ПРИМЕР 6 --------------------------
    C:\PS>(get-command get-childitem -ArgumentList cert:).parametersets[0].parameters | where-object { $_.IsDynamic }
    Description
    -----------
    Эта команда извлекает только параметры, динамически добавляемые при вызове командлета Get-ChildItem поставщиком Windows PowerShell Certificate. Этот метод альтернативен методу из предыдущего примера.

    В данном случае сначала выполняется команда "get-command get-childitem -ArgumentList cert:". При помощи командлета Get-Command она извлекает данные о командлете Get-ChildItem при его использовании совместно с поставщиком
     Certificate. Конструкция ".parametersets[0]" выбирает первую последовательность параметров (последовательность 0) из результатов вызова "get-childitem -argumentList cert:", а конструкция ".parameters" выбирает параметры
     в этой последовательности параметров. Полученные в результате параметры передаются по конвейеру командлету Where-Object для проверки каждого параметра ("$_.") при помощи его свойства IsDynamic. Для нахождения свойств 
объектов в команде воспользуйтесь командлетом Get-Member.
   -------------------------- ПРИМЕР 7 --------------------------
    C:\PS>get-command *
    Description
    -----------
    Эта команда получает информацию о командлетах, функциях, фильтрах, скриптах и псевдонимах Windows PowerShell в текущей консоли.

    Она также получает информацию обо всех файлах, которые присутствуют в путях, указанных в переменной среды Path ($env:path). Для каждого файла возвращается объект ApplicationInfo (System.Management.Automation.ApplicationI
    nfo), а не объект FileInfo (System.IO.FileInfo)
    -------------------------- ПРИМЕР 8 --------------------------
    C:\PS>get-command | where-object {$_.definition -like "*first*"}
    CommandType     Name                        Definition
    -----------     ----                        ---------
    Cmdlet          Select-Object               Select-Object [[-Property]
    Description
    -----------
    Эта команда находит командлет или функцию на основании имени одного из параметров. Эту команду можно использовать для определения командлета или функции, если удается вспомнить только имя одного из параметров.

    В данном примере известно, что у одного командлета или функции есть параметр First, который позволяет получить первые "n" объектов в списке, но неизвестно имя командлета.

    В команде используется командлет Get-Command, позволяющий получить объект CmdletInfo, который представляет все командлеты и функции в сеансе. У объекта CmdletInfo есть свойство Definition, в котором содержится синтаксис
    командлета или функции с указанием всех параметров.

    Оператор конвейера (|) используется для передачи объекта CmdletInfo командлету Where-Object, который анализирует определение (синтаксис) каждого объекта ($_) и выполняет поиск значения "first".

    Результат выполнения команды показывает, что параметр First принадлежит командлету Select-Object.
    -------------------------- ПРИМЕР 9 --------------------------
    C:\PS>get-command dir | format-list

    Name              : dir
    CommandType       : Alias
    Definition        : Get-ChildItem
    ReferencedCommand : Get-ChildItem
    ResolvedCommand   : Get-ChildItem
    Description
    -----------
    В этом примере показано, как использовать командлет Get-Command для псевдонима. Хотя командлет Get-Command обычно используется для командлетов, он также отображает информацию о коде в скриптах, функциях, псевдонимах и ис
    полняемых файлах.

    Эта команда удаляет отображает псевдоним "dir" в текущей консоли. Результат передается по конвейеру командлетам Format-List.
    -------------------------- ПРИМЕР 10 --------------------------
    C:\PS>get-command notepad

    CommandType     Name           Definition
    -----------     ----           ----------
    Application     notepad.exe    C:\WINDOWS\system32\notepad.exe
    Application     NOTEPAD.EXE    C:\WINDOWS\NOTEPAD.EXE


    Description
    -----------
    В этом примере показано, как использовать командлет Get-Command для определения команды, выполняемой Windows PowerShell в случае, если доступны несколько команд с одинаковым именем. При использовании параметра Name без п
    одстановочных знаков командлет Get-Command перечисляет команды с указанным именем в порядке выполнения.

    Это команда показывает, какая программа Notepad будет запущена Windows PowerShell при вводе "Notepad" без полного пути. В команде используется параметр Name без подстановочных знаков.

    Пример выходных данных показывает команды с именем "Notepad" в текущей консоли. Из приведенных данных можно сделать вывод, что Windows PowerShell запустит экземпляр Notepad.exe из каталога C:\Windows\System32.
    -------------------------- ПРИМЕР 11 --------------------------
    C:\PS>(get-command get-date).pssnapin

    C:\PS> (get-command remove-gpo).module
    Description
    -----------
    Эти команды показывают, как найти оснастку или модуль, к которому принадлежит определенный командлет.

    В первой команде для определения оснастки, добавившей командлет Get-Date, используется свойство PSSnapin объекта CmdletInfo.

    Во второй команде для определения модуля, добавившего командлет Remove-GPO, используется свойство Module объекта CmdletInfo.



PS C:\Windows\system32> get-help about_wildcards
РАЗДЕЛ
    about_Wildcards

КРАТКОЕ ОПИСАНИЕ
    Описывает использование подстановочных знаков в Windows PowerShell.


ПОЛНОЕ ОПИСАНИЕ
    Во многих случаях требуется запустить командлет для обработки не
    отдельных элементов, а их группы. Например, может потребоваться
    найти все файлы с расширением PPT в каталоге C:\Techdocs. Если
    запустить следующую команду, будут возвращены все элементы каталога:

        Get-ChildItem c:\techdocs


    Проблема с этой командой заключается в том, что придется
    просмотреть все документы, перечисленные в каталоге, чтобы
    выяснить, какие файлы имеют расширение PPT. Однако набор возвращаемых
    элементов можно ограничить с помощью подстановочных знаков в параметрах
    командлета. Подстановочный знак - это тип заполнителя, который
    позволяет искать среди неизвестных значений и возвращать конкретные
    результаты. Процесс использования подстановочных знаков иногда именуется
    "глобализацией" (globbing). Например, предыдущий пример можно
    изменить так, чтобы получить только PPT-файлы.

        Get-ChildItem c:\techdocs\*.ppt


    В этом случае звездочка (*) используется в качестве
    подстановочного знака, чтобы указать, что перед расширением PPT могут
    располагаться любые знаки. Поскольку указано расширение файла, все файлы,
    возвращаемые командой, должны иметь это расширение, но при этом имена
    файлов могут быть любыми. В результате возвращаются только нужные файлы.


    Оболочка Windows PowerShell поддерживает несколько подстановочных
    знаков наряду с подстановочным знаком звездочки.


        Описание подстановочного знака        Пример   Совпадает         Не совпадает
        -------- ------------------           -------- ----------------- --------
        *        Совпадает с нулем или        a*       A, ag, Apple      banana
                 большим числом знаков

        ?        Совпадает точно с одним      ?n       an, in, on        ran
                 знаком в указанной позиции

        [ ]      Совпадает с диапазоном       [a-l]ook book, cook, look  took
                 знаков

        [ ]      Совпадает с указанными       [bc]ook  book, cook        hook
                 знаками


    Большинство командлетов позволяют использовать подстановочные знаки в
    некоторых параметрах. В разделе справки для каждого командлета
    описано, в каких параметрах допускаются подстановочные знаки, если
    они вообще разрешены. В параметрах, в которых допускаются
    подстановочные знаки, они используются без учета регистра. Например,
    ?n возвращает An, an, In, in, On и on.


    Можно сочетать подстановочные знаки в одном параметре. Например, чтобы
    показать все TXT-файлы в каталоге C:\Techdocs, которые начинаются с
    букв от "a" до "l", можно использовать следующую команду:

        Get-ChildItem c:\techdocs\[a-l]*.txt


    Используемый в команде подстановочный знак диапазона ([a-l])
    указывает, что имя файла должно начинаться с букв от "a" до "l".
    Затем в команде используется подстановочный знак звездочки в качестве
    заполнителя для любых знаков между первой буквой и расширением файла.

СМ. ТАКЖЕ
    about_Language_Keywords



PS C:\Windows\system32>  get-help Join-Path -examples

ИМЯ
    Join-Path
ОПИСАНИЕ
    Соединяет корневой и вложенный пути в один. Поставщик задает разделители пути.
    -------------------------- ПРИМЕР 1 --------------------------
    C:\PS>join-path -path c:\win* -childpath System*
    Описание
    -----------
    В данной команде для соединения путей "c:\Win*" и "System*" используется командлет Join-Path. При работе с поставщиком файловой системы Windows PowerShell командлет FileSystem производит соединение путей и добавляет разд елитель "\".
    -------------------------- ПРИМЕР 2 --------------------------
    C:\PS>join-path c:\win* System* -resolve
    Описание
    -----------
    Эта команда выводит список файлов и папок, находящихся в местоположении, задаваемом с помощью пути, полученного объединением "c:\Win*" и "System*". Список отображаемых элементов совпадает со списком, возвращаемым командл
    етом Get-ChildItem, но отличается от него тем, что элементы задаются полными путями. В данной команде имена необязательных параметров Path и ChildPath опущены.
    -------------------------- ПРИМЕР 3 --------------------------
    C:\PS>PS HKLM:\> join-path System *ControlSet* -resolve
    Описание
    -----------
    Эта команда отображает список разделов реестра в разделе HKLM\System, включающих в себя параметр "ControlSet". В данном примере показано, как использовать командлет Join-Path с поставщиком реестра Windows PowerShell.
    -------------------------- ПРИМЕР 4 --------------------------
    C:\PS>join-path -path C:, D:, E:, F: -childpath New
    Описание
    -----------
    Эта команда с помощью командлета Join-Path объединяет несколько корневых путей с дочерним путем.
    -------------------------- ПРИМЕР 5 --------------------------
    C:\PS>get-psdrive -psprovider filesystem | foreach {$_.root} | join-path -childpath Subdir
    Описание
    -----------
    Эта команда объединяет корневые пути каждого диска файловой системы Windows PowerShell в консоли с дочерним путем Subdir.

    С помощью командлета Get-PSDrive команда получает диски Windows PowerShell, поддерживаемые поставщиком FileSystem. Инструкция ForEach позволяет выбрать только свойство Root объектов PSDriveInfo и объединить его с указанн
    ым дочерним путем.

    Выходные данные показывают, что диски Windows PowerShell на компьютере включают диск, подключенный к каталогу "C:\Program Files".
PS C:\Windows\system32>

Справка по Windows PowerShell

Знакомство с Windows PowerShell
Руководство пользователя Windows PowerShell
Общие разделы справки Windows PowerShell
Разделы справки по командлетам Windows PowerShell
Разделы справки по поставщикам Windows PowerShell
Справка по интегрированной среде скриптов Windows PowerShell (ISE)
Справка консоли PowerShell.exe
-------------------------------------------------------------------------------

Знакомство с Windows PowerShell
Windows PowerShell — это новая командная оболочка Windows, разработанная в первую очередь для системных администраторов. Оболочка Windows PowerShell включает интерактивную командную строку и среду исполнения скриптов, которые можно использовать вместе или по отдельности. 

В отличие от большинства оболочек, которые принимают и возвращают текст, оболочка Windows PowerShell, разработанная на основе среды CRL и платформы .NET Framework, принимает и возвращает объекты .NET Framework. Это фундаментальное изменение делает возможными совершенно новые средства и методы администрирования и конфигурирования систем Windows.

В Windows PowerShell реализована новая концепция командлетов — простых узкоспециализированных средств командной строки, встроенных в оболочку. Командлеты можно использовать и по отдельности, однако по-настоящему их достоинства проявляются тогда, когда эти простые средства используются в комбинации друг с другом для решения сложных задач. Windows PowerShell включает более ста основных командлетов, к тому же вы можете создавать собственные командлеты и обмениваться ими с другими пользователями.

Как и многие другие оболочки, Windows PowerShell обеспечивает доступ к файловой системе на компьютере. Кроме того, в состав оболочки Windows PowerShell входят поставщики, позволяющие столь же легко работать с другими хранилищами данных, такими как реестр и хранилища сертификатов цифровых подписей.

Данный документ представляет собой ознакомительное руководство по оболочке Windows PowerShell, где рассказывается о языке, командлетах, поставщиках и использовании объектов.
--------------------------------------------------------------------------------

Знакомство с Windows PowerShell
Большинство оболочек, в том числе Cmd.exe и Unix-оболочки SH, KSH, CSH и BASH, выполняют команду или служебную программу в новом процессе и представляют результаты пользователю в виде текста. За время существования этих оболочек были разработаны многие программы обработки текста, поддерживающие этот механизм взаимодействия, такие как sed, AWK и PERL.

Некоторые команды встроены в эти оболочки и выполняются в процессе самой оболочки. Примерами могут служить команды typeset и dir в оболочках KSH и Cmd.exe соответственно. В большинстве оболочек встроенных команд немного, поэтому для них создано большое число служебных программ.

Windows PowerShell сильно отличается от других оболочек. 
Windows PowerShell обрабатывает не текст, а объекты платформы .NET. 
Windows PowerShell включает множество встроенных команд, имеющих унифицированный интерфейс.

Все команды оболочки обрабатываются одним синтаксическим анализатором, в том время как во многих других оболочках каждому средству соответствует отдельный анализатор. Это значительно облегчает изучение команд.

И самая хорошая новость: в оболочке Windows PowerShell можно использовать традиционные средства Windows, такие как Net, SC и Reg.exe. 

Раздел содержит следующие темы.
Командлеты Windows PowerShell
Новый язык скриптов
Команды и служебные программы Windows
Обработка объектов
Конвейеры объектов

Командлеты Windows PowerShell
Командлет — это команда Windows PowerShell, предназначенная для работы с объектами и выполняющая единственную функцию. Командлеты можно идентифицировать по формату имени — глаголу и существительному, разделенным дефисом (-), например Get-Help, Get-Process и Start-Service.

В традиционных оболочках команды представляют собой исполняемые программы, которые могут быть как совсем простыми (например, attrib.exe), так и очень сложными (netsh.exe). 

Большинство командлетов Windows PowerShell очень просты, и предполагается, что они будут использоваться вместе с другими командлетами. Например, командлеты категории "get" только возвращают данные, командлеты "set" только задают или изменяют значения элементов данных, командлеты "format" только форматируют данные, а командлеты "out" только направляют вывод в указанное место назначения.

С каждым командлетом ассоциирован файл справки, который можно просмотреть, введя следующую команду:

get-help <имя_командлета> -detailed

Подробное представление файла справки по командлету включает описание командлета, его параметров и синтаксиса команды и пример использования командлета.
--------------------------------------------------------------------------------

Новый язык скриптов
В оболочке Windows PowerShell используется собственный язык, а не какой-либо существующий, по следующим причинам.
Язык Windows PowerShell должен был поддерживать управление объектами Microsoft .NET Framework. 
Язык Windows PowerShell должен был обеспечивать согласованную среду использования командлетов.
Язык Windows PowerShell должен был поддерживать решение сложных задач, не делая простые задачи более сложными. 
Язык Windows PowerShell должен был обладать совместимостью с высокоуровневыми языками программирования для .NET Framework, такими как C#.
--------------------------------------------------------------------------------


Команды и служебные программы Windows
Оболочка Windows PowerShell позволяет выполнять имеющиеся в Windows программы командной строки и запускать программы Windows с графическим пользовательским интерфейсом, такие как Блокнот и Калькулятор. Создаваемый этими программами текст можно перехватывать и использовать в оболочке Windows PowerShell.

Например, в следующих командах используются команды Windows, IPConfig, Net и Shutdown.

C:\PS> net localgroup administrators /add domain01\user01
The command completed successfully.

C:\PS> ipconfig
Windows IP Configuration
Ethernet adapter Local Area Connection:
       Connection-specific DNS Suffix  . : domain.corp.fabricam.com
       IP Address. . . . . . . . . . . . : 142.20.152.115
       Subnet Mask . . . . . . . . . . . : 255.255.252.0
       Default Gateway . . . . . . . . . : 172.30.180.1

C:\PS> shutdown -r

Командлеты Windows PowerShell, например Select-String, даже можно использовать для манипуляции текстом, который возвращается программами Windows.


Например, следующая команда использует оператор конвейера для отправки результатов команды IPConfig в командлет Select-String Windows PowerShell, ищущий текст в строках. В этом случае командлет Select-String используется для поиска по шаблону "255" в выводе IpConfig.

C:\PS> ipconfig | select-string -pattern 255
Subnet Mask . . . . . . . . . . . : 255.255.252.0

Если команда или средство Windows имеет параметры (например, параметр -r (перезагрузка) команды Shutdown), Windows PowerShell передает их без интерпретации.


Однако если средство использует зарезервированное слово Windows PowerShell или формат команды, не знакомый Windows PowerShell, например, параметр в Nant "-D:debug=false" (Windows PowerShell интерпретирует его как два параметра, "-D" и "debug=false"), параметры нужно заключить в кавычки, чтобы оболочка Windows PowerShell пересылала их без интерпретации.
--------------------------------------------------------------------------------

Обработка объектов
Хотя на первый взгляд это не очевидно, при работе с оболочкой Windows PowerShell на самом деле идет работа с объектами .NET Framework. По мере накопления опыта достоинства обработки объектов станут для вас более очевидными, и вы начнете даже думать "объектами". 

С технической точки зрения объект .NET Framework представляет собой экземпляр класса .NET Framework, состоящий из данных и связанных с ними операций. Объект можно рассматривать как сущность, имеющую свойства (характеристики сущности) и методы (действия, которые можно выполнять над сущностью).

Например, при возврате службы в Windows PowerShell на самом деле возвращается объект, представляющий соответствующую службу. При просмотре сведений о службе отображаются свойства объекта-службы. При запуске службы, то есть при изменении ее свойства Status на started, выполняется метод объекта-службы.

Все объекты одного типа имеют одни и те же свойства и методы, однако значения свойств каждого экземпляра объекта могут быть разными. Например, каждый объект-служба имеет свойства Name и Status. Однако имя и статус одной службы могут отличаться от имени и статуса любой другой службы.

Получить сведения об объектах несложно. Чтобы узнать тип объекта, получаемого командлетом, передайте результат выполнения команды get команде Get-Member с помощью оператора конвейерной обработки (|). Например, следующая команда передает объекты, возвращенные командой Get-Service, команде Get-Member.

get-service | get-member 
Команда Get-Member отображает сведения об объекте службы, в том числе имя типа объекта и список его свойств и методов. 

   TypeName: System.ServiceProcess.ServiceController

Name                      MemberType    Definition
----                      ----------    ----------
Name                      AliasProperty Name = ServiceName
add_Disposed              Method        System.Void add_Disposed(EventHandler value)
Close                     Method        System.Void Close()
Continue                  Method        System.Void Continue()
...
Чтобы получить сведения о классе объекта, скопируйте и вставьте имя типа (например, System.ServiceProcess.ServiceController) в MSDN. Обнаружив нужный класс, можно просмотреть подразделы MSDN со сведениями о свойствах и методах объектов, основанных на этом классе и аналогичных объектам оболочки Windows PowerShell.

Чтобы узнать значения всех свойств конкретного объекта, нужно передать результат выполнения команды get команде Format-List или Format-Table с помощью оператора конвейерной обработки (|). Вводя при этом командлеты форматирования, укажите параметр Property со значением "все" (*). Например, чтобы просмотреть значения всех свойств службы Schedule, введите следующую команду:

get-service schedule | format-list -property *
В результате будут возвращены подобные данные:

Name                : Schedule
CanPauseAndContinue : True
CanShutdown         : True
CanStop             : True
DisplayName         : Task Scheduler
DependentServices   : {}
MachineName         : .
ServiceName         : Schedule
ServicesDependedOn  : {RpcSs}
ServiceHandle       : SafeServiceHandle
Status              : Running
ServiceType         : Win32ShareProcess
Site                :
Container           :
При знакомстве с Windows PowerShell не требуется понимать все нюансы работы с объектами — достаточно не терять из виду общую концепцию. Скоро вы сможете использовать объекты по-настоящему эффективно.
--------------------------------------------------------------------------------

Конвейеры объектов
Одним из главных преимуществ использования объектов является простота конвейерного выполнения команд, то есть передачу вывода одной команды другой команде в качестве ввода. В традиционных средах с интерфейсом командной строки требуется изменить текст, чтобы преобразовать вывод в другой формат и удалить названия и заголовки столбцов. 

В оболочке Windows PowerShell реализована новая архитектура на основе объектов, а не текста. Командлет, который принимает объект, может обращаться к его свойствам и методам без каких-либо преобразований или других операций. Пользователи могут обращаться к свойствам и методам объекта по их именам вместо того, чтобы определять расположение нужных данных в выводе.

В следующем примере результат выполнения команды IpConfig передается команде Findstr. Оператор конвейерной обработки (|) отправляет результат выполнения левой команды правой команде. При работе с Windows PowerShell™ не требуется манипулировать со строками и вычислять смещения данных. 

PS> ipconfig | findstr "Address"
        IP Address. . . . . . . . . . . . : 172.28.21.5
        IP Address. . . . . . . . . . . . : 172.30.160.225
--------------------------------------------------------------------------------
Взаимодействие и скриптыРаздел содержит следующие темы. 

Интерактивная среда
Поддержка скриптов
--------------------------------------------------------------------------------
Интерактивная среда 
Как и другие оболочки, Windows PowerShell включает полную интерактивную среду. Когда пользователь вводит в командной строке команду, она обрабатывается и вывод отображается в окне оболочки. Их можно отправить в файл или на принтер. Кроме того, с помощью оператора конвейерной обработки (|) его можно отправить другой команде.
--------------------------------------------------------------------------------
Поддержка скриптов 
Если вы часто используете конкретные команды или их последовательности или разрабатываете алгоритм решения сложной задачи, команды можно сохранить в файле. Тогда вместо ввода команд в командной строке можно будет запустить этот файл. Файл команд называется скриптом.

Кроме интерактивного интерфейса в оболочке Windows PowerShell реализована полная поддержка скриптов. Файлы скриптов Windows PowerShell имеют расширение PS1. Чтобы запустить скрипт, введите его имя в командной строке. Расширение имени файла можно не указывать.

Пример.

c:\test\testscript.ps1
-или-

c:\test\testscript
При запуске скрипта нужно указывать полный путь к его файлу, даже если он хранится в текущем каталоге. Чтобы указать текущий каталог, нужно ввести его имя или точку (.), Пример.

.\testscript.ps1 
Скрипты очень полезны, а иногда даже необходимы для решения той или иной задачи, однако злоумышленники могут использовать их для распространения вредоносного кода. Чтобы определить, возможно ли выполнение скриптов и должны ли они включать цифровую подпись, в оболочке Windows PowerShell используется политика обеспечения безопасности, называемая политикой выполнения. Ради устранения явного риска ни одна политика выполнения, доступная в оболочке Windows PowerShell, не позволяет выполнить скрипт, дважды щелкнув его значок. Чтобы получить дополнительные сведения, введите следующую команду:

get-help about_execution_policies
Кроме того, оболочка Windows PowerShell включает развитый язык скриптов, позволяющий создавать самые разные скрипты: от совсем простых до очень сложных. Он поддерживает циклы, условные операторы, управление потоком выполнения кода и присваивание значений переменным.

См. также
about_Scripts
about_Execution_Policies
--------------------------------------------------------------------------------
                                                                                   Запуск
Запуск Windows PowerShellОболочку Windows PowerShell можно запустить из меню Пуск, из панели задач, из поля "Поиск" или "Выполнить", из окна командной строки и даже из другого окна Windows PowerShell.

На одном компьютере можно запустить несколько экземпляров Windows PowerShell (или среды Windows PowerShell ISE).

Запуск Windows PowerShell
Для запуска Windows PowerShell в Windows Vista, Windows Server 2008 и более поздних версиях Windows в меню Пуск выберите Пуск, Все программы, Стандартные, выберите папку Windows PowerShell и щелкните пункт Windows PowerShell. 

В Windows XP и Windows Server 2003 для запуска Windows PowerShell в меню Пуск выберите Пуск, Все программы, Стандартные, выберите папку Windows PowerShell и щелкните пункт Windows PowerShell.

Запуск среды Windows PowerShell ISE
Интегрированная среда сценариев (ISE) Windows PowerShell — новое ведущее приложение, которое позволяет выполнять команды и создавать, тестировать и отлаживать скрипты с использованием удобного графического интерфейса с цветовым кодированием.

Для запуска среды Windows PowerShell ISE в Windows Vista, Windows Server 2008 и более поздних версиях Windows в меню Пуск выберите Пуск, Все программы, Стандартные, выберите папку Windows PowerShell и щелкните пункт Windows PowerShell ISE. 

В Windows XP и Windows Server 2003 для запуска Windows PowerShell в меню Пуск выберите Пуск, Все программы, Стандартные, выберите папку Windows PowerShell и щелкните пункт Windows PowerShell ISE.

Запуск Windows PowerShell со всеми модулями
В Windows 7 и Windows Server 2008 R2 можно использовать задачу для запуска окна Windows PowerShell, содержащего все команды, доступные через дополнительные модули и оснастки, включая не добавляемые по умолчанию. Это окно также имеет права учетной записи администратора.

Дополнительные сведения о модулях и оснастках Windows PowerShell см. в разделах Использование модулей и оснасток, Импорт модуля и about_Modules.

Для запуска Windows PowerShell со всеми модулями выполните любую из следующих процедур.

Щелкните правой кнопкой мыши значок Windows PowerShell на панели задач и выберите команду Импортировать все модули.


В меню Пуск выберите пункт Администрирование и щелкните пункт Модули Windows PowerShell.

 Примечание.  
 В Windows Server 2008 R2 значок Windows PowerShell по умолчанию закреплен на панели задач. Однако чтобы появилась задача Импортировать все модули, необходимо один раз запустить Windows PowerShell. 
 

Все доступные модули можно импортировать в сеанс Windows PowerShell во всех поддерживаемых версиях Windows. Запустите Windows PowerShell и введите в командной строке Windows PowerShell следующее:

get-module -listAvailable | import-module

Запуск Windows PowerShell с привилегиями администратора
В Windows 7 и Windows Server 2008 R2 можно использовать задачу для запуска окна Windows PowerShell со всеми привилегиями учетной записи администратора. Обычно это не требуется, однако некоторые команды все же требуют таких привилегий.

Щелкните правой кнопкой мыши значок Windows PowerShell на панели задач и выберите команду Запустить Windows PowerShell от имени администратора.

Для запуска Windows PowerShell (или среды Windows PowerShell ISE) с привилегиями администратора во всех поддерживаемых версиях Windows выполните следующие действия. 

В меню Пуск выберите пункт Все программы, Стандартные и щелкните папку Windows PowerShell.
Щелкните правой кнопкой мыши элемент Windows PowerShell (или Windows PowerShell ISE) и выберите пункт Запуск от имени администратора.



Запуск Windows PowerShell с другими параметрами
Windows PowerShell поддерживает многочисленные параметры, позволяющие создавать специальные сеансы Windows PowerShell, в том числе параметры, использующие указанный файл консоли, запускающие определенную политику выполнения, исключающие профили Windows PowerShell, запускающие определенную команду или скрипт, использующие однопоточный контейнер и т. д.

Для просмотра этих параметров введите в командной строке (Cmd.exe) или в существующем окне Windows PowerShell следующую команду:

powershell -?
Для запуска Windows PowerShell с определенным параметром используйте соответствующий параметр команды. Например, для запуска Windows PowerShell с политикой выполнения RemoteSigned введите следующую команду:

powershell -executionPolicy RemoteSigned
--------------------------------------------------------------------------------

                                                              Работа с Windows PowerShell 
В этом разделе объясняются основы работы с оболочкой Windows PowerShell. Он начинается с описания командлета Get-Help, который позволяет получить сведения о командлетах и принципах работы Windows PowerShell. Затем описываются некоторые базовые командлеты, объясняется использование параметров командлетов и демонстрируется способ форматирования вывода командлетов в наглядной форме. В конце раздела приводятся сведения о том, как использовать псевдонимы для упрощения работы с оболочкой Windows PowerShell, как запускать в Windows PowerShell традиционные программы Windows и как обрабатывать ошибки. 

Раздел содержит следующие темы.
Получение справки: Get-Help
Использование командлетов
Получение сведений об объектах: Get-Member
Форматирование вывода команд
Использование псевдонимов
Использование программ Windows
Управление ошибками
--------------------------------------------------------------------------------

Получение справки: Get-Help
Командлет Get-Help — полезное средство изучения Windows PowerShell. Читая описания командлетов, изучая концепции оболочки Windows PowerShell и возможности ее языка, можно научиться работать с ней.

Скорее всего, пользователя, ранее не работавшего с Windows PowerShell, в первую очередь заинтересует справочная система. Чтобы получить сведения о справочной системе оболочки Windows PowerShell, введите следующую команду:

get-help
После этого можно изучить несколько базовых командлетов, таких как Get-Help, Get-Command, Get-Process, Get-Service и Get-Eventlog. 

Чтобы получить простейшую справку о командлете, введите get-help и имя командлета. Например, для получения справки по командлету Get-Command введите следующую команду:

get-help get-command
Если справочные сведения о командлете отформатированы некорректно, т. е. начинаются с тегов XMLNS, это может быть связано с тем, что действующая политика выполнения Windows PowerShell не позволила системе загрузить конфигурационный файл, нужный для форматирования справочных сведений о командлете. Чтобы получить сведения о политиках выполнения, введите следующую команду:

get-help about_execution_policies
Чтобы получить подробную справку о командлете, включающую описания параметров и примеры, запустите командлет Get-Help с параметром Detailed. Например, чтобы получить подробную справку о командлете Get-Command, введите следующую команду:

get-help get-command -detailed
Чтобы отобразить все доступные справочные сведения о командлете, в том числе техническую информацию о самом командлете и его параметрах, нужно использовать параметр Full. Например, чтобы получить полную справку о командлете Get-Command, введите следующую команду:

get-help get-command -full
Кроме того, можно отобразить отдельные фрагменты файла справки. Чтобы просмотреть только примеры, нужно использовать параметр Examples. Например, чтобы отобразить примеры использования командлета Get-Command, введите следующую команду:

get-help get-command -examples
Чтобы просмотреть только подробные описания параметров, воспользуйтесь командлетом Get-Help с параметром Parameter. При этом можно указать имя интересующего параметра или ввести подстановочный знак (*) для получения сведений обо всех параметрах. Например, чтобы отобразить описание параметра TotalCount командлета Get-Command, введите следующую команду:

get-help get-command -parameter totalcount
Чтобы просмотреть сведения обо всех параметрах командлета Get-Command, введите следующую команду:

get-help get-command -parameter *
Справку по Windows PowerShell также можно найти в Интернете в библиотеке Microsoft TechNet в разделе Windows PowerShell. Сетевую версию справки намного удобнее читать, и она обновляется чаще, чем справка, которая выводится в командной строке. 

В Windows PowerShell 2 для отображения сетевой версии справки по командлету нужно использовать параметр Online командлета Get-Help. По умолчанию параметр Online дает ссылку на справочные разделы в библиотеке TechNet. 

Например, чтобы открыть сетевую версию раздела справки для командлета Get-Process, введите: 

get-help get-process -online
Кроме того, для получения справочных сведений можно использовать функции Windows PowerShell, вызывающие командлет Get-Help. Функция Help отображает справочные сведения постранично. Функция Man отображает справочные сведения в стиле страниц Man системы Unix. Для отображения справки о командлете Get-Command с помощью функции Help или Man введите одну из следующих команд:

man get-command
или

help get-command
При запросе определенного раздела справки командлет Get-Help выводит содержимое этого раздела, а при использовании подстановочных символов для запроса нескольких разделов справки командлет Get-Help выводит список разделов. Например, чтобы просмотреть список разделов справки по командлетам Get, введите следующую команду:

get-help get-*
Разделы справки, объясняющие основные концепции Windows PowerShell, начинаются с префикса about_. Для получения справки о концепции Windows PowerShell введите команду get-help и имя концепции. (Имя концепции введите на английском языке, даже если используется локализованная версия Windows PowerShell.)

Например, чтобы получить справку о подстановочных знаках, введите следующую команду:

get-help about_wildcards
Чтобы отобразить список всех разделов справки, посвященных концепциям Windows PowerShell, введите следующую команду:

get-help about_*
Читая разделы справки и изучая примеры, можно научиться работать с оболочкой Windows PowerShell.

См. также
Get-Help
Get-Command
--------------------------------------------------------------------------------

PS C:\Windows\system32> help *сообщения*

Name                              Category  Synopsis
----                              --------  --------
Disable-PSRemoting                Cmdlet    Предотвращает получение компьютером удаленных команд Windows PowerShell.
Unregister-PSSessionConfiguration Cmdlet    Удаляет зарегистрированные конфигурации сеанса с компьютера.
ForEach-Object                    Cmdlet    Выполняет операцию для каждого из последовательности объектов ввода.
Remove-Module                     Cmdlet    Удаляет модули из текущего сеанса.
ConvertFrom-StringData            Cmdlet    Преобразует строку, содержащую одну или несколько пар типа ключ-значение в хэш-таблицу.
Export-PSSession                  Cmdlet    Импортирует команды из другого сеанса и сохраняет их в модуле Windows PowerShell.
Import-PSSession                  Cmdlet    Импортирует в текущий сеанс команды из другого сеанса.
Import-LocalizedData              Cmdlet    Импортирует относящиеся к конкретному языку данные в скрипты и функции на основе выбранной в операционной системе культуры пользовательского интерфейса.
Write-Debug                       Cmdlet    Выводит сообщение отладки на консоль.
Write-Verbose                     Cmdlet    Записывает текст в поток подробных сообщений.
Write-Error                       Cmdlet    Записывает объект в поток ошибок.
Send-MailMessage                  Cmdlet    Отправляет сообщение электронной почты.
Get-TraceSource                   Cmdlet    Возвращает компоненты Windows PowerShell, подготовленные к трассировке.
Set-TraceSource                   Cmdlet    Настраивает, запускает и останавливает трассировку компонентов Windows PowerShell.
Trace-Command                     Cmdlet    Настраивает и запускает трассировку указанного выражения или команды.
Get-EventLog                      Cmdlet    Получает события, зарегистрированные в журнале событий, или список журналов событий, находящихся на локальном или удаленном компьютере.
Restart-Service                   Cmdlet    Останавливает, а затем запускает заново одну или несколько служб.
Get-Credential                    Cmdlet    Получает объект хранения учетных данных на основе имени пользователя и пароля.
about_CommonParameters            HelpFile  Описание параметров, которые могут использоваться с любым командлетом.
about_execution_policies          HelpFile  Описывает политики выполнения Windows PowerShell и способы
about_functions_advanced_methods  HelpFile  Описывает, каким образом функции, имеющие атрибут CmdletBinding, могут
about_hash_tables                 HelpFile  Описывает, как создавать, использовать и сортировать хэш-таблицы
about_If                          HelpFile  Описывает команду языка, которую можно использовать для
about_preference_variables        HelpFile  Переменные, которые настраивают поведение Windows PowerShell
about_script_internationalization HelpFile  Описание возможностей интернационализации скриптов Windows
about_Signing                     HelpFile  Описание процедуры подписания скриптов для их соответствия политикам
about_Throw                       HelpFile  Описание ключевого слова Throw, генерирующего ошибку с
about_trap                        HelpFile  Описывает ключевое слово, обрабатывающее прерывающие ошибки.
about_Windows_PowerShell_2.0      HelpFile  Описание новых возможностей Windows PowerShell версии 2.0.
about_WMI_Cmdlets                 HelpFile  Содержит общие сведения об инструментарии управления Windows (WMI)



PS C:\Windows\system32>

Использование командлетовКомандлет — это простое узкоспециализированное средство командной строки, встроенное в оболочку. Командлеты используются так же, как традиционные команды и служебные программы. Для начала введите в командной строке Windows PowerShell имя командлета. Команды Windows PowerShell обрабатываются без учета регистра.

Например, чтобы испытать в деле командлет Get-Date, введите следующую команду:

C:\PS> get-date
Thursday, November 10, 2005 4:43:50 PM
Чтобы просмотреть список командлетов, доступных в текущем сеансе, используйте командлет Get-Command без параметров.

PS> get-command

CommandType     Name                            Definition
-----------     ----                            ----------
Cmdlet          Add-Content                     Add-Content [-Path] <String[...
Cmdlet          Add-History                     Add-History [[-InputObject] ...
Cmdlet          Add-Member                      Add-Member [-MemberType] <PS...
...
…
По умолчанию командлет Get-Command выводит сведения в трех столбцах: CommandType, Name и Definition. При выводе списка командлетов в столбце Definition отображается их синтаксис. Многоточие (…) в столбце синтаксиса показывает, что данные обрезаны. 

Командлет Get-Command также возвращает команды и элементы команд, отличные от командлетов, в том числе псевдонимы команд, функции и исполняемые файлы, доступные в оболочке Windows PowerShell. 

Следующая команда выводит список доступных в Windows PowerShell исполняемых файлов с помощью командлета Get-Command с параметром Name.

PS> get-command -name *.exe

CommandType Name                   Definition
----------- ----                   ----------
Application 000StTHK.exe           C:\WINDOWS\system32\000StTHK.exe
Application 00THotkey.exe          C:\WINDOWS\system32\00THotkey.exe
Application accwiz.exe             C:\WINDOWS\system32\accwiz.exe
...
При выводе списка исполняемых файлов в столбце Definition отображаются пути к исполняемым файлам.

Также можно попробовать в работе другие командлеты, например, такие как Get-Process, Get-Service, Get-EventLog и Get-Alias. 

После знакомства с простыми командлетами типа Get- испытайте командлет Get-WmiObject. Этот командлет позволяет просматривать и изменять компоненты на удаленных компьютерах. Например, следующая команда возвращает сведения о системе BIOS на удаленном компьютере Server01:

get-wmiobject win32_bios -computername server01
Чтобы получить справочные сведения о каком-либо командлете, введите следующую команду:

get-help <cmdlet-name> -detailed
Пример:

get-help get-alias -detailed
--------------------------------------------------------------------------------
Использование функцийПомимо командлетов, в Windows PowerShell можно запускать функции. Windows PowerShell поставляется с набором встроенных функций, помимо которых можно добавлять функции, полученные от других пользователей, и создавать собственные функции.

О функциях
Функции — это тип команд в Windows PowerShell. Для запуска функции введите ее имя, точно так же, как и для командлета. Как и командлеты, функции могут иметь параметры. Как и командлеты, функции могут использовать объекты .NET в качестве источника ввода и выводить объекты .NET. Фактически функции обладают теми же возможностями, что и командлеты.

Лучше всего в функциях то, что их очень легко создавать. В отличие от командлетов, которые пишутся на языке C#, функции представляют собой просто именованные наборы команд и выражений Windows PowerShell. Создавать функции так же просто, как и вводить команды в Windows PowerShell.

Поиск функций
Функции являются командами, и поэтому для поиска функций используйте командлет Get-Command.

Например, чтобы найти все функции текущего сеанса, введите команду:

get-command -CommandType function
Кроме того, в Windows PowerShell имеется диск Function:, содержащий все функции текущего сеанса. Для просмотра диска Function: используйте те же методы, что и для просмотра дисков файловой системы.

Чтобы открыть диск функций, введите: 

cd function:
Чтобы вывести функции с диска функций, введите:

dir function:

Запуск функций
Для запуска функции нужно просто ввести ее имя. Например, для запуска функции Clear-Host введите следующую команду:

clear-host
В консоли Windows PowerShell функция Clear-Host служит для удаления всего текста из окна консоли. В других приложениях эта функция может иметь другое действие или не иметь никакого действия.

Чтобы использовать параметры функции, введите имя параметра с дефисом перед ним и значением после него, точно так же, как и при вводе параметров командлета.

Например, функция Help, выводящая разделы справки постранично, имеет те же параметры, что и командлет Get-Help. Чтобы использовать функцию Help для вывода только примеров из раздела справки для командлета Get-Service, введите следующую команду:

help -name get-service -examples

Получение справки о функциях
Для функций могут существовать разделы справки. Чтобы найти раздел справки для функции, используйте командлет Get-Help. Это тот же командлет, что используется для получения справки по командлетам.

Например, для получения справки по функции Disable-PSRemoting, введите следующую команду:

get-help Disable-PSRemoting
Для получения справки по функциям можно использовать любые параметры командлета Get-Help. Например, чтобы получить примеры из раздела справки для функции Disable-PSRemoting, введите следующую команду:

get-help Disable-PSRemoting -example

Создание функций
Функция представляет собой именованную группу команд или выражений. Чтобы написать простую функцию, используйте следующий формат.

function <name> { <commands> }
Введите ключевое слово function и имя функции и заключите команды в фигурные скобки ({ }).

Например, если какая-то команда, например, get-help get-member -examples, используется часто, для экономии времени можно написать функцию, исполняющую эту команду. Следующая функция с именем GMEX исполняет эту команду.

function GMEX {get-help get-member -examples}
После ввода в командной строке Windows PowerShell (или после копирования и вставки из этого раздела) и нажатия клавиши ENTER эту функцию можно будет использовать в текущем сеансе. Для исполнения функции введите команду GMEX.

Эта функция простая, но добавив еще несколько строк, можно включить в нее обязательные или необязательные параметры, добавить пользовательские сообщения или создать для нее раздел справки. После ознакомления с возможностями Windows PowerShell можно научиться писать сложные функции со всеми характеристиками командлетов.

Дополнительные сведения о написании функций см. в разделах about_Functions, about_Comment_Based_Help и about_Functions_Advanced.

Сохранение функций
При запуске Windows PowerShell открывается ее сеанс. Сеанс длится, пока не закрывается окно Windows PowerShell (или пока сеанс не завершается с помощью команды Exit). Элементы, созданные во время сеанса, удаляются при его закрытии, если они не сохранены в файле на диске или в реестре.

Для использования функций в будущих сеансах Windows PowerShell нужно создать профиль Windows PowerShell и сохранить эти функции в нем.

Дополнительную информацию см. в разделе about_Profiles.

См. также
Using Cmdlet Parameters
about_Functions
about_Functions_Advanced
about_Command_Syntax
about_Comment_Based_Help
about_Profiles
Использование командлетов


--------------------------------------------------------------------------------

Использование модулей и оснастокWindows PowerShell — полностью расширяемая среда. Команды для Windows PowerShell может писать любой. В Windows PowerShell можно использовать команды других пользователей и передавать другим пользователям собственные команды.

Для распространения команд используются модули и оснастки. Модули и оснастки Windows PowerShell представляют собой пакеты, содержащие команды Windows PowerShell и другие элементы. Все командлеты и поставщики в Windows PowerShell поставляются в составе оснасток или модулей. Модули также могут содержать функции, псевдонимы, переменные и диски.

Некоторые оснастки и модули автоматически добавляются в каждый сеанс Windows PowerShell. При получении оснастку или модуль можно установить и добавить команды в сеансы Windows PowerShell. Для передачи созданных команд другим пользователям можно создать собственный модуль или оснастку Windows PowerShell. 

О модулях
Модуль представляет собой пакет команд и других элементов, которые можно использовать в Windows PowerShell. После запуска программы установки или сохранения модуля на диск модуль можно импортировать в сеанс Windows PowerShell и использовать его команды и элементы. Модули также можно использовать для организации созданных командлетов, поставщиков, функций, псевдонимов и других команд и их передачи другим пользователям. 

Информацию об установке и использовании модулей см. в разделе about_Modules. Сведения о процедуре создания модулей см. в разделе "Создание модуля Windows PowerShell" в библиотеке MSDN.

Об оснастках
Оснастка Windows PowerShell (PSSnapin) представляет собой библиотеку DLL, реализующую командлеты и поставщики. При получении оснастку нужно установить и добавить тем самым соответствующие командлеты и поставщики в текущий сеанс Windows PowerShell.

Информацию об установке и использовании оснасток см. в разделе about_PSSnapins. Сведения о процедуре создания оснасток см. в разделе "Создание оснастки Windows PowerShell" в библиотеке MSDN.


--------------------------------------------------------------------------------
Импорт модуля 
Модули представляют собой пакеты команд Windows PowerShell, таких как командлеты и функции, и элементов Windows PowerShell, таких как поставщики, переменные, псевдонимы и диски. При загрузке, установке или получении модуля выполните описанную в настоящем разделе процедуру, чтобы импортировать или добавить его в сеанс Windows PowerShell.

Установка модуля перед импортом
Если модуль предоставлен в виде папки с файлами, необходимо установить его на компьютер, чтобы можно было импортировать его в Windows PowerShell. Обычно установка заключается просто в копировании модуля в определенное место на диске, доступное компьютеру.

Обычно модули устанавливаются автоматически. В Windows PowerShell имеется несколько предустановленных модулей. В Windows Server 2008 R2 можно воспользоваться Add Features Wizard в Server Manager, чтобы автоматически установить выбранные модули. Многие модули поставляются с установщиком, выполняющим установку модуля.

Дополнительные сведения об установке модулей см. в разделе about_Modules.

Импорт модуля
Чтобы использовать команды в модуле, импортируйте его в сеанс Windows PowerShell. Для импорта модули в текущий сеанс из их расположения по умолчанию используйте следующий формат команды.

import-module <module-name>
Например, следующая команда импортирует модуль BitsTransfer в текущий сеанс.

import-module BitsTransfer
Для импорта модуля вне местоположения по умолчанию укажите в команде полный путь к папке этого модуля. Например, чтобы добавить в текущий сеанс модуль TestCmdlets из папки C:\ps-test, введите следующую команду:

import-module c:\ps-test\TestCmdlets
Дополнительную информацию о добавлении модулей в сеанс см. в разделе Import-Module.

См. также
about_Modules
Import-Module


--------------------------------------------------------------------------------
Получение сведений об объектах: Get-Member
Командлет Get-Member является одним из самых полезных: он отображает сведения об объекте .NET Framework, возвращаемом командой. Эти сведения включают тип, свойства и методы объекта.

Для использования командлета Get-Member используйте конвейерный оператор (|) для отправки результатов команды командлету Get-Member. Пример.

get-service | get-member
Эта команда показывает, что командлет Get-Service на самом деле возвращает набор объектов System.ServiceProcess.ServiceController по одному на каждую службу компьютера.

   TypeName: System.ServiceProcess.ServiceController

Name                      MemberType    Definition
----                      ----------    ----------
Name                      AliasProperty Name = ServiceName
add_Disposed              Method        System.Void add_Disposed(EventHandler value)
Close                     Method        System.Void Close()
Continue                  Method        System.Void Continue()
CreateObjRef              Method        System.Runtime.Remoting.ObjRef CreateObjRef(Type requestedType)
Dispose                   Method        System.Void Dispose()
Equals                    Method        System.Boolean Equals(Object obj)
ExecuteCommand            Method        System.Void ExecuteCommand(Int32 command)
get_CanPauseAndContinue   Method        System.Boolean get_CanPauseAndContinue()
get_CanShutdown           Method        System.Boolean get_CanShutdown()
get_CanStop               Method        System.Boolean get_CanStop()
get_Container             Method        System.ComponentModel.IContainer get_Container()
get_DependentServices     Method        System.ServiceProcess.ServiceController[] get_DependentServices()
get_DisplayName           Method        System.String get_DisplayName()
get_MachineName           Method        System.String get_MachineName()
get_ServiceHandle         Method        System.Runtime.InteropServices.SafeHandle get_ServiceHandle()
get_ServiceName           Method        System.String get_ServiceName()
get_ServicesDependedOn    Method        System.ServiceProcess.ServiceController[] get_ServicesDependedOn()
get_ServiceType           Method        System.ServiceProcess.ServiceType get_ServiceType()
get_Site                  Method        System.ComponentModel.ISite get_Site()
get_Status                Method        System.ServiceProcess.ServiceControllerStatus get_Status()
GetHashCode               Method        System.Int32 GetHashCode()
GetLifetimeService        Method        System.Object GetLifetimeService()
GetType                   Method        System.Type GetType()
InitializeLifetimeService Method        System.Object InitializeLifetimeService()
Pause                     Method        System.Void Pause()
Refresh                   Method        System.Void Refresh()
remove_Disposed           Method        System.Void remove_Disposed(EventHandler value)
set_DisplayName           Method        System.Void set_DisplayName(String value)
set_MachineName           Method        System.Void set_MachineName(String value)
set_ServiceName           Method        System.Void set_ServiceName(String value)
set_Site                  Method        System.Void set_Site(ISite value)
Start                     Method        System.Void Start(), System.Void Start(String[] args)
Stop                      Method        System.Void Stop()
ToString                  Method        System.String ToString()
WaitForStatus             Method        System.Void WaitForStatus(ServiceControllerStatus desiredStatus), System.Voi...
CanPauseAndContinue       Property      System.Boolean CanPauseAndContinue {get;}
CanShutdown               Property      System.Boolean CanShutdown {get;}
CanStop                   Property      System.Boolean CanStop {get;}
Container                 Property      System.ComponentModel.IContainer Container {get;}
DependentServices         Property      System.ServiceProcess.ServiceController[] DependentServices {get;}
DisplayName               Property      System.String DisplayName {get;set;}
MachineName               Property      System.String MachineName {get;set;}
ServiceHandle             Property      System.Runtime.InteropServices.SafeHandle ServiceHandle {get;}
ServiceName               Property      System.String ServiceName {get;set;}
ServicesDependedOn        Property      System.ServiceProcess.ServiceController[] ServicesDependedOn {get;}
ServiceType               Property      System.ServiceProcess.ServiceType ServiceType {get;}
Site                      Property      System.ComponentModel.ISite Site {get;set;}
Status                    Property      System.ServiceProcess.ServiceControllerStatus Status {get;}
Несмотря на обилие технических подробностей эти сведения очень практичны. 

Значение typename (например, System.ServiceProcess.ServiceController) позволяет узнать тип объекта .NET, возвращаемого командлетом. Чтобы получить сведения об объектах этого класса .NET, вставьте имя типа в текстовое поле Поиск в MSDN. Соответствующий раздел MSDN включает сведения о свойствах и методах объектов этого класса, в том числе объектов, возвращаемых командлетом Get-Service.


Типы Property представляют свойства объектов. В нашем случае значение каждого свойства характеризует объект-службу. Например, объекты ServiceController имеют свойство CanPauseAndContinue. Как сказано в MSDN, оно показывает, можно ли приостановить и возобновить выполнение службы. 

Чтобы узнать значение свойства конкретной службы, введите следующую команду:
(get-service <service-name>).<property-name>
Пример:
(get-service alerter).canpauseandcontinue
Чтобы отобразить список с именем и значением свойства CanPauseAndContinue службы Alerter, введите следующую команду:

get-service alerter | format-list -property name, CanPauseAndContinue
Чтобы отобразить список значений всех свойств службы Alerter, введите следующую команду:

get-service alerter | format-list -property *
Чтобы отобразить таблицу с именем и значениями свойства CanPauseAndContinue всех служб, введите следующую команду:

get-service | format-table -property name, CanPauseAndContinue
Типы Method представляют методы объекта, то есть действия, которые можно выполнять над объектом. Например, объекты ServiceController включают метод Stop, позволяющий остановить выполнение службы. 

Чтобы вызвать метод объекта-службы, введите команду следующего формата (не забудьте ввести скобки):


(get-service <service-name>).<method-name>()
For example,
(get-service schedule).stop()

Чтобы получить дополнительные сведения о команде Get-Member, введите:

get-help get-member -detailed
--------------------------------------------------------------------------------
Форматирование вывода командВ традиционных оболочках команды и средства сами форматируют выводимые данные. Некоторые средства позволяют настроить формат вывода с помощью специальных параметров.

В оболочке Windows PowerShell вывод форматируют только командлеты форматирования:
Format-List
Format-Custom
Format-Table
Format-Wide
Все остальные командлеты вывод не форматируют. Благодаря этому изучать средства и параметры форматирования для многих средств не нужно. Достаточно запомнить командлеты Format и их параметры.

При выполнении команды Windows PowerShell вызывает модуль форматирования по умолчанию, который определяется по типу отображаемых данных. Этот модуль определяет, какие свойства вывода отображаются и в каком формате: списка или таблицы.

Например, при использовании командлета Get-Service данные по умолчанию выводятся как таблица с тремя столбцами, например:

C:\PS> get-service
Status   Name               DisplayName
------   ----               -----------
Running  AdtAgent           Event Forwarder
Stopped  Alerter            Alerter
Running  ALG                Application Layer Gateway Service
Чтобы изменить формат данных, выводимых любым командлетом, направьте их с помощью оператора конвейерной обработки (|) командлету Format. 

Например, следующая команда отправляет результат команды Get-Service в командлет Format-List. В результате данные о каждой службе форматируются как список.

C:\PS> get-service | format-list
Name                : AdtAgent
DisplayName         : Event Forwarder
Status              : Running
DependentServices   : {}
ServicesDependedOn  : {eventlog, dnscache}
CanPauseAndContinue : False
CanShutdown         : True
CanStop             : True
ServiceType         : Win32OwnProcess

Name                : Alerter
DisplayName         : Alerter
Status              : Stopped
DependentServices   : {}
ServicesDependedOn  : {LanmanWorkstation}
CanPauseAndContinue : False
CanShutdown         : False
CanStop             : False
ServiceType         : Win32ShareProcess

Name                : ALG
DisplayName         : Application Layer Gateway Service
Status              : Running
DependentServices   : {}
При использовании формата списка выводится больше сведений о каждой службе, чем в формате таблицы. Вместо трех столбцов данных о каждой службе в формате списка выводятся девять строк данных. Командлет Format-List не извлек дополнительную информацию о службах. Эти данные содержались в объектах, возвращенных командлетом Get-Service, однако командлет Format-Table, используемый по умолчанию, отбросил их, потому что не смог вывести на экран более трех столбцов.

При отображении данных можно указать не только формат их вывода (список или таблица), но и свойства объекта, которые должны быть отображены. Например, командлет Get-Service по умолчанию отображает только свойства Status, Name и DisplayName объекта-службы.

Чтобы просмотреть все свойства объекта, нужно направить вывод команды командлету Get-Member с помощью оператора конвейерной обработки (|). Например, чтобы просмотреть все свойства объекта-службы, введите следующую команду:

get-service | get-member -membertype *property

   TypeName: System.ServiceProcess.ServiceController

Name                MemberType    Definition
----                ----------    ----------
Name                AliasProperty Name = ServiceName
CanPauseAndContinue Property      System.Boolean CanPauseAndContinue {get;}
CanShutdown         Property      System.Boolean CanShutdown {get;}
CanStop             Property      System.Boolean CanStop {get;}
Container           Property      System.ComponentModel.IContainer Container {get;}
DependentServices   Property      System.ServiceProcess.ServiceController[] DependentServices {get;}
DisplayName         Property      System.String DisplayName {get;set;}
MachineName         Property      System.String MachineName {get;set;}
ServiceHandle       Property      System.Runtime.InteropServices.SafeHandle ServiceHandle {get;}
ServiceName         Property      System.String ServiceName {get;set;}
ServicesDependedOn  Property      System.ServiceProcess.ServiceController[] ServicesDependedOn {get;}
ServiceType         Property      System.ServiceProcess.ServiceType ServiceType {get;}
Site                Property      System.ComponentModel.ISite Site {get;set;}
Status              Property      System.ServiceProcess.ServiceControllerStatus Status {get;}
Все эти свойства входят в состав объекта, возвращаемого командлетом Get-Service для каждой службы, и можно отобразить любые из них или все. Для выбора отображаемых свойств и порядка отображения используйте параметр Property командлетов Format. В следующем примере команда Format-Table отображает только свойства Name, ServiceType и CanShutDown службы.

get-service | format-table name, Servicetype, Canshutdown
Это далеко не все, что можно делать с данными, выводимыми оболочкой Windows PowerShell. Чтобы получить дополнительные сведения о командлетах Format, используйте следующие команды:

get-help format-list
get-help format-table
get-help format-wide
get-help format-custom


--------------------------------------------------------------------------------

PS C:\Windows\system32> help
РАЗДЕЛ
    Get-Help

КРАТКОЕ ОПИСАНИЕ
    Отображает справочные сведения о командлетах и концепциях Windows
    PowerShell.

ПОЛНОЕ ОПИСАНИЕ

СИНТАКСИС
    get-helphelp {<имя_командлета> | <название_раздела>}
    help {<имя_командлета> | <название_раздела>}
    <имя_командлета> -?

    Команды "Get-help" and "-?" отображают справку на одной странице.
    Команда "Help" - на нескольких.

    Примеры
      get-help get-process   :отображает справку о командлете
                              Get-Process.
      get-help about_signing :отображает справку о
                              подписании скриптов.
      help where-object      :отображает справку о командлете
                              Where-Object.
      help about_foreach     :отображает справку о циклах foreach
                              в PowerShell.
      set-service -?         :отображает справку о командлете
                              Set-Service.

    В командах справки можно использовать подстановочные знаки
    (исключая команду "-?"). Если поисковому запросу соответствует
    несколько разделов справки, оболочка PowerShell отображает список
    этих разделов. Если запросу соответствует только один раздел,
    оболочка PowerShell отобразит его сразу.

    Примеры
      get-help *      :отображает все разделы справки.
      get-help get-*  :отображает разделы, начинающиеся с get-.
      help *object*   :отображает разделы, имя которых содержит слово
                       "object".
      get-help about* :отображает все концептуальные разделы.

    Чтобы получить сведения о подстановочных знаках, введите:
      get-help about_wildcard

ПРИМЕЧАНИЕ
    Дополнительные сведения о Windows PowerShell см. в следующих
    разделах справки:
      get-command  :получает сведения о командлетах из
                    кода командлета.
      get-member   :получает свойства и методы объекта.
      where-object :фильтрует свойства объекта.
      about_object :возвращает сведения об использовании объектов в
                    Windows PowerShell.
      about_remote :возвращает сведения о выполнении команд на
                    удаленных компьютерах.

    Концептуальные разделы справки (с именем "about_<раздел>"),
    например:
      about_regular_expression.

    Названия файлов концептуальных разделов нужно вводить на
    английском языке, даже если используется локализованная версия
    Windows PowerShell.

    С помощью команд справки можно также узнать псевдонимы
    командлетов. Это альтернативные имена, которые обычно проще
    вводить. Например, командлет Invoke-Command имеет
    псевдоним remote.

    Чтобы узнать псевдонимы, введите команду:
      get-alias
---------------------------
PS C:\Windows\system32> help *version*

Name                              Category  Synopsis
----                              --------  --------
Test-WSMan                        Cmdlet    Проверяет, запущена ли служба WinRM на локальном или удаленном компьютере.
Get-WSManInstance                 Cmdlet    Отображает сведения об управлении для экземпляра ресурса, заданного URI ресурса.
Get-PSSessionConfiguration        Cmdlet    Получает зарегистрированные конфигурации сеансов на компьютере.
Set-PSSessionConfiguration        Cmdlet    Изменяет свойства зарегистрированной конфигурации сеанса.
Invoke-Command                    Cmdlet    Выполняет команды на локальном и удаленных компьютерах.
Set-StrictMode                    Cmdlet    Задает и применяет правила кодирования в выражениях, скриптах и блоках скрипта.
New-Module                        Cmdlet    Создает новый динамический модуль, который существует только в памяти.
Import-Module                     Cmdlet    Добавляет модули в текущий сеанс.
Get-Module                        Cmdlet    Получает модули, которые были импортированы или могут быть импортированы в текущий сеанс.
New-ModuleManifest                Cmdlet    Создает новый манифест модуля.
Test-ModuleManifest               Cmdlet    Проверяет, что файл манифеста модуля точно описывает содержимое модуля.
Export-Console                    Cmdlet    Экспортирует имена оснасток в текущем сеансе в файл консоли.
Get-FormatData                    Cmdlet    Получает данные форматирования для текущего сеанса.
Export-CSV                        Cmdlet    Преобразует объекты Microsoft .NET Framework в набор строк переменной длины, содержащих разделенные запятыми значения (CSV), и сохраняет эти строки в CSV-файл.
ConvertTo-CSV                     Cmdlet    Преобразует объекты Microsoft .NET Framework в набор строк переменной длины, содержащих разделенные запятыми значения (CSV).
Get-Host                          Cmdlet    Получает объект, представляющий текущую основную программу. Отображает также версию Windows PowerShell и региональные сведения по умолчанию.
Import-PSSession                  Cmdlet    Импортирует в текущий сеанс команды из другого сеанса.
New-Object                        Cmdlet    Создает экземпляр объекта Microsoft .NET Framework или COM object.
Select-Object                     Cmdlet    Выбирает указанные свойства объекта или набора объектов. Также он может выбирать уникальные объекты из массива объектов или выбирать указанное число объектов с начала или с конц...
Select-XML                        Cmdlet    Находит текст в XML-строке или документе.
Get-ItemProperty                  Cmdlet    Получает свойства заданного элемента.
Get-WmiObject                     Cmdlet    Получает экземпляры классов WMI или сведения о доступных классах.
Move-ItemProperty                 Cmdlet    Перемещает свойство из одного местоположения в другое.
Get-Process                       Cmdlet    Получает процессы, выполняющиеся на локальном или удаленном компьютере.
Set-WmiInstance                   Cmdlet    Создает или обновляет экземпляр существующего класса инструментария управления Windows (WMI).
about_Automatic_Variables         HelpFile  Описание переменных, в которых хранятся сведения о состоянии оболочки
about_debuggers                   HelpFile  Описывает отладчик Windows PowerShell.
about_format.ps1xml               HelpFile  Файлы Format.ps1xml в Windows PowerShell определяют формат по
about_profiles                    HelpFile  Содержит описание, как создавать и использовать профиль Windows
about_properties                  HelpFile  Содержит описание использования свойств объектов в Windows
about_Quoting_Rules               HelpFile  Описывает правила использования одиночных и двойных кавычек в Windows
about_remote_FAQ                  HelpFile  Содержит вопросы о выполнении удаленных команд в Windows
about_remote_requirements         HelpFile  Описывает требования к системе и конфигурации для выполнения удаленных
about_remote_troubleshooting      HelpFile  Описывает, как устранять неполадки удаленных операций в
about_requires                    HelpFile  Запрещает выполнение скриптов при отсутствии указанных оснасток
about_types.ps1xml                HelpFile  Описывает, как с помощью файлов Types.ps1xml расширить типы
about_Windows_PowerShell_2.0      HelpFile  Описание новых возможностей Windows PowerShell версии 2.0.
некоторые командлеты
get-.................получать
set-..................установить

PS C:\Windows\system32> help about_profiles
РАЗДЕЛ
    about_Profiles

КРАТКОЕ ОПИСАНИЕ
    Содержит описание, как создавать и использовать профиль Windows
    PowerShell.

ПОЛНОЕ ОПИСАНИЕ
    Создав профиль Windows PowerShell, вы получаете возможность
    настраивать окружение и добавлять специфичные для сеанса элементы
    в каждый создаваемый сеанс.

    Профиль Windows PowerShell - скрипт, который выполняется в момент
    запуска Windows PowerShell. Можно использовать профиль в качестве
    скрипта, выполняемого при входе в систему, для настройки окружения.
    Можно добавлять команды, псевдонимы, функции, значения, оснастки,
    модули и диски Windows PowerShell. Также можно добавлять в профиль
    другие специфичные для сеанса элементы, тогда они будут доступны
    в каждом сеансе и не будет необходимости их импортировать или
    создавать заново.

    Windows PowerShell поддерживает несколько профилей для
    пользователей и ведущих программ. Однако PowerShell не создает профили.
    В этом разделе описаны профили; также рассказано, как создавать
    и обслуживать профили на компьютере.

    Здесь объясняется, как использовать параметр NoProfile консоли
    Windows PowerShell (PowerShell.exe) для запуска Windows
    PowerShell без профиля. Кроме того, описан результат действия
    политики выполнения Windows PowerShell применительно к профилям.


 ФАЙЛЫ ПРОФИЛЕЙ

    Windows PowerShell поддерживает несколько файлов профилей. Кроме
    того, ведущие приложения Windows PowerShell могут поддерживать
    собственные профили, специфичные для приложения.

    Например, консоль Windows PowerShell поддерживает следующие файлы
    основного профиля. Ниже они указаны в порядке приоритета. Первый
    профиль имеет наивысший приоритет.


        Описание                   Путь
        -----------                ----
        Текущий пользователь,      $Home\[My ]Documents\WindowsPowerShell\Profile.ps1
        текущее ведущее приложение
        Текущий пользователь,      $Home\[My ]Documents\Profile.ps1
        все ведущие приложения
        Все пользователи,          $PsHome\Microsoft.PowerShell_profile.ps1
        текущее ведущее приложение
        Все пользователи, все      $PsHome\Profile.ps1
        ведущие приложения

    Пути к профилям могут включать следующие переменные:

        - Переменная $PsHome, в которой хранится путь к каталогу
          установки Windows PowerShell.

        - Переменная $Home, в которой хранится путь к домашнему
          каталогу текущего пользователя.


    Кроме того, другие ведущие приложения Windows PowerShell могут
    поддерживать собственные профили. Например, интегрированная среда
    скриптов (ISE) Windows PowerShell поддерживает следующие
    специфичные для ведущего приложения профили.


        Описание                   Путь
        -----------                -----
        Текущий пользователь,      $Home\[My ]Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1
        текущее ведущее приложение
        Все пользователи,          $PsHome\Microsoft.PowerShellISE_profile.ps1
        текущее ведущее приложение


    В справке Windows PowerShell профиль "Текущий пользователь,
    текущее ведущее приложение" наиболее часто называется "вашим
    профилем Windows PowerShell".

 ПЕРЕМЕННАЯ $PROFILE

    Автоматическая переменная $Profile хранит путь к профилям Windows
    PowerShell, доступным в рамках текущего сеанса.

    Для просмотра пути к профилю следует отобразить значение
    переменной $Profile. Можно также использовать переменную $Profile
    в команде в качестве пути.

    В переменной $Profile хранится путь к профилю "Текущий
    пользователь, текущее ведущее приложение". Остальные профили
    хранятся в свойствах-примечаниях переменной $profile.

    Например, переменная $Profile в консоли Windows PowerShell имеет
    следующие значения.


        Name                               Описание
        -----------                        -----------
        $Profile                           Текущий пользователь,
                                           текущее ведущее приложение
        $Profile.CurrentUserCurrentHost    Текущий пользователь,
                                           текущее ведущее приложение
        $Profile.CurrentUserAllHosts       Текущий пользователь, все
                                           ведущие приложения
        $Profile.AllUsersCurrentHost       Все пользователи, текущее
                                           ведущее приложение
        $Profile.AllUsersAllHosts          Все пользователи, все
                                           ведущие приложения

    Поскольку значения переменной $Profile отличаются для разных
    пользователей и для различных ведущих приложений, убедитесь, что
    вы отображаете значения переменных профиля для каждого ведущего
    приложения Windows PowerShell, которое используется.

    Чтобы просмотреть текущие значения переменной $Profile, введите
    следующее:
        $profile | get-member -type noteproperty

    Переменную $Profile можно использовать во множестве команд.
    Например, следующая команда открывает профиль "Текущий
    пользователь, текущее ведущее приложение" в приложении Блокнот:
        notepad $profile

    Следующая команда определяет, был ли на локальном компьютере
    создан профиль "Все пользователи, все ведущие приложения":
        test-path $profile.AllUsersAllHosts

 СОЗДАНИЕ ПРОФИЛЯ
    Для создания профиля Windows PowerShell используется следующий
    формат команды:
        if (!(test-path <имя_профиля>))
           {new-item -type file -path <имя_профиля> -force}


    Например, для создания профиля текущего пользователя в текущем
    ведущем приложении Windows PowerShell используется следующая команда:

        if (!(test-path $profile))
           {new-item -type file -path $profile -force}


    В этой команде инструкция If предотвращает перезапись
    существующего профиля. Замените значение заполнителя
    <путь_к_профилю> путем к файлу профиля, который требуется создать.

    Примечание. Для создания профилей "Все пользователи" в Windows
                Vista и более поздних версиях Windows необходимо запускать
                Windows PowerShell командой "Запуск от имени администратора".


 РЕДАКТИРОВАНИЕ ПРОФИЛЯ

    Любой профиль Windows PowerShell можно открыть в текстовом
    редакторе, например в программе Блокнот.
    Чтобы открыть профиль текущего пользователя в текущем ведущем
    приложении Windows PowerShell в программе Блокнот, необходимо
    ввести команду:
        notepad $profile

    Чтобы открыть другие профили, необходимо указать имя профиля.
    Например, чтобы открыть профиль для всех пользователей и всех
    ведущих приложений, необходимо ввести команду:
        notepad $profile.AllUsersAllHosts


    Чтобы применить изменения, нужно сохранить файл профиля, а затем
    перезапустить Windows PowerShell.

 ВЫБОР ПРОФИЛЯ
    При использовании нескольких ведущих приложений поместите
    элементы, используемые во всех ведущих приложениях, в профиль
    $Profile.CurrentUserAllHosts (текущий пользователь, все ведущие
    приложения). Поместите элементы, специфичные для ведущего приложения,
    например команды, задающие фоновый цвет ведущего приложения, в профиль
    для данного ведущего приложения.

    Администратору, настраивающему Windows PowerShell для многих
    пользователей, нужно соблюдать следующие правила.

        -- Хранить общие элементы в профиле $profile.AllUsersAllHosts
           (все пользователи, все ведущие приложения).

        -- Хранить элементы, специфичные для ведущего приложения в
           профилях $profile.AllUsersCurrentHost (все пользователи,
           текущее ведущее приложение).

        -- Хранить элементы для определенных пользователей в
           профилях, специфичных для пользователя.
    Необходимо проверить документацию ведущего приложения, на случай
    если в приложении работа с профилями Windows PowerShell реализована
    специальным образом.

 ИСПОЛЬЗОВАНИЕ ПРОФИЛЕЙ
    Многие элементы, которые создаются в Windows PowerShell, и
    большинство выполняемых пользователем команд действуют только в
    пределах текущего сеанса. Когда сеанс завершается, элементы
    уничтожаются.

    Команды и элементы, специфичные для сеанса, включают в себя
    переменные, привилегированные переменные, псевдонимы, функции,
    команды (за исключением Set-ExecutionPolicy) и оснастки Windows
    PowerShell, добавляемые к сеансу.

    Для сохранения этих элементов и обеспечения их доступности в
    будущих сеансах их нужно добавить в профиль Windows PowerShell.

    Другое распространенное использование профилей - сохранение часто
    используемых функций, псевдонимов и переменных. После сохранения
    элементов в профиле их можно использовать во время любого сеанса,
    к которому применен этот профиль, не создавая их заново.

 С ЧЕГО НАЧАТЬ СОЗДАНИЕ ПРОФИЛЯ?
    Когда вы впервые открываете файл профиля, он пуст. Однако его
    можно заполнить переменными, псевдонимами и командами, которыми
    вы часто пользуетесь.

    Ниже приведено несколько советов, с чего начать.

    -- Добавьте команду, облегчающую открытие профиля. Это особенно
       полезно, если вы используете профиль, отличный от профиля
       "Текущий пользователь, текущее ведущее приложение". Например,
       добавьте следующую команду:
           function pro {notepad $profile.CurrentUserAllHosts}

    -- Добавьте функцию, открывающую справку Windows PowerShell в
       виде скомпилированного файла справки HTML (.chm).

           function Get-CHM
            {
               (invoke-item $env:windir\help\mui\0409\WindowsPowerShellHelp.chm)
            }


       Эта функция открывает английскую версию файла .chm. Однако вы
       можете заменить код языка (0409) и открыть другую версию файла
       .chm.


    -- Добавьте функцию, перечисляющую псевдонимы какого-либо командлета.

           function Get-CmdletAlias ($cmdletname)
           {
              get-alias | Where {$_.definition -like "*$cmdletname*"} | ft Definition, Name -auto
           }


    -- Добавьте команду Add-PsSnapin для добавления оснасток Windows PowerShell,
       которыми вы пользуетесь.

    -- Настройте консоль.

           function Color-Console
           {
                $host.ui.rawui.backgroundcolor = "white"
                $host.ui.rawui.foregroundcolor = "black"
                $hosttime = (dir $pshome\powershell.exe).creationtime
                $Host.UI.RawUI.WindowTitle = "Windows PowerShell $hostversion ($hosttime)"
                clear-host
           }
           Color-console


    -- Добавьте настроенное приглашение командной строки Windows
       PowerShell, включающее имя компьютера и текущий путь.

           function prompt
           {
              $env:computername + "\" + (get-location) + "> "
           }


       Дополнительные сведения о приглашении командной строки Windows
       PowerShell см в разделе about_Prompts.


 ПАРАМЕТР NOPROFILE

    Для запуска Windows PowerShell без профиля используйте параметр
    NoProfile программы PowerShell.exe, запускающей Windows PowerShell.

    Для начала откройте программу, которая может запустить Windows
    PowerShell, например Cmd.exe или саму программу Windows
    PowerShell. Также можно использовать диалоговое окно Run в Windows.

    Введите следующую команду:

        powershell -noprofile

    Чтобы вывести полный список параметров программы PowerShell.exe,
    введите следующую команду:

        powershell -?


 ПРОФИЛИ И ПОЛИТИКА ВЫПОЛНЕНИЯ

    Политика выполнения Windows PowerShell отчасти определяет, можно
    ли выполнять скрипты и загружать файлы конфигурации, в том числе
    профили. Политика выполнения по умолчанию - Restricted. Она
    запрещает выполнение скриптов, в том числе профилей. При
    использовании политики Restricted профиль не запускается и его
    содержимое не применяется.

    Команда Set-ExecutionPolicy задает и изменяет политику выполнения.
    Это одна из немногих команд, которая распространяется на все сеансы
    Windows PowerShell, так как значение сохраняется в реестре. Нет
    необходимости задавать значение при открытии консоли и не нужно
    сохранять команду Set-ExecutionPolicy в вашем профиле.


 ПРОФИЛИ И УДАЛЕННЫЕ СЕАНСЫ

    Профили Windows PowerShell не запускаются автоматически в
    удаленных сеансах, поэтому команды, добавленные профилями,
    отсутствуют в удаленном сеансе. Кроме того, автоматическая
    переменная $profile не заполняется в удаленных сеансах.

    Чтобы запустить профиль в сеансе, используйте командлет
    Invoke-Command.

    Например, следующая команда запускает профиль CurrentUserCurrentHo
    st с локального компьютера в сеансе в $s.

        invoke-command -session $s -filepath $profile

    Следующая команда запускает профиль CurrentUserCurrentHost с
    удаленного компьютера в сеансе в $s. Так как переменная $profile
    не заполнена, команда использует явный путь к профилю.

        invoke-command -session $s {invoke-expression
        "$home\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1"}

    После выполнения этой команды все команды, добавляемые профилем в
    сеанс, доступны в $s.


СМ. ТАКЖЕ
    about_Automatic_Variables
    about_Functions
    about_Prompts
    about_Execution_Policies
    about_Signing
    about_Remote
    Set-ExecutionPolicy
--------------------------------------
                                                          Новый профиль //2.0-5.0
создать
$PROFILE
ls $PROFILE
ise $PROFILE
New-Item -ItemType file -Path $PROFILE -Force
$PROFILE
---------------
$PROFILE(C:\Users\...\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1

write-host 'User:' $env:USERNAME                              
write-host 'Domain:' $env:USERDNSDOMAIN
write-host 'Computer:' $env:COMPUTERNAME
function prompt                                                                         //изменили приглашениестроки
{
"PS $env:USERNAME>"
}
New-Alias -Name abc -Value New-Item                         //добавили алиасы на создание элемента
New-Alias -Name bc -Value Remove-Item               //на удаление файла
-----------------------------------------------------------------
удалить профиль можно просто удалив файл, либо создав пустой файл
--------------------------------------------------------------------------------


Windows PowerShell
(C) Корпорация Майкрософт, 2009. Все права защищены.

PS C:\Windows\system32> cd c:\
PS C:\> dir


    Каталог: C:\


Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----        01.03.2016     21:18            ATI
d----        27.05.2014      4:18            C-Media
d----        24.03.2015     22:18            drivers
d----        29.01.2016     20:06            FFOutput
d----        21.06.2015     20:20            inetpub
d----        02.11.2014     17:14            Intel
d----        27.05.2014      5:42            Multitran
d----        27.05.2014      8:23            NVIDIA
d----        27.05.2014      5:13            PCIAUD1
d----        24.01.2016     23:46            PerfLogs
d----        21.03.2016     17:18            Program Files
d----        18.02.2016     16:27            Users
d----        25.03.2016      9:09            Windows
d----        22.03.2015      0:01            work
-a---        11.06.2009      0:42         24 autoexec.bat
-a---        11.06.2009      0:42         10 config.sys
-a---        18.03.2016      6:34     118784 lvhack.exe
-a---        18.03.2016      6:34     200704 lvlogo.dll
-a---        27.09.2014     20:23         11 trace.ini


PS C:\> get-childitem

    Каталог: C:\


Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----        01.03.2016     21:18            ATI
d----        27.05.2014      4:18            C-Media
d----        24.03.2015     22:18            drivers
d----        29.01.2016     20:06            FFOutput
d----        21.06.2015     20:20            inetpub
d----        02.11.2014     17:14            Intel
d----        27.05.2014      5:42            Multitran
d----        27.05.2014      8:23            NVIDIA
d----        27.05.2014      5:13            PCIAUD1
d----        24.01.2016     23:46            PerfLogs
d----        21.03.2016     17:18            Program Files
d----        18.02.2016     16:27            Users
d----        25.03.2016      9:09            Windows
d----        22.03.2015      0:01            work
-a---        11.06.2009      0:42         24 autoexec.bat
-a---        11.06.2009      0:42         10 config.sys
-a---        18.03.2016      6:34     118784 lvhack.exe
-a---        18.03.2016      6:34     200704 lvlogo.dll
-a---        27.09.2014     20:23         11 trace.ini


PS C:\> ls


    Каталог: C:\


Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----        01.03.2016     21:18            ATI
d----        27.05.2014      4:18            C-Media
d----        24.03.2015     22:18            drivers
d----        29.01.2016     20:06            FFOutput
d----        21.06.2015     20:20            inetpub
d----        02.11.2014     17:14            Intel
d----        27.05.2014      5:42            Multitran
d----        27.05.2014      8:23            NVIDIA
d----        27.05.2014      5:13            PCIAUD1
d----        24.01.2016     23:46            PerfLogs
d----        21.03.2016     17:18            Program Files
d----        18.02.2016     16:27            Users
d----        25.03.2016      9:09            Windows
d----        22.03.2015      0:01            work
-a---        11.06.2009      0:42         24 autoexec.bat
-a---        11.06.2009      0:42         10 config.sys
-a---        18.03.2016      6:34     118784 lvhack.exe
-a---        18.03.2016      6:34     200704 lvlogo.dll
-a---        27.09.2014     20:23         11 trace.ini


PS C:\>
                                                                                       получение справки
PS C:\>gcm
--------------

PS C:\>get-command
--------------
PS C:\Windows\system32>  get-help *
----------------------------
PS C:\> get-help get*

Name                              Category  Synopsis
----                              --------  --------
Get-Verb                          Function  Get-Verb [[-verb] <String[]>] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-WarningVariable <String>] [-OutVariable <String>] [-OutBuffer <Int32>]
Get-LogProperties                 Function  Get-LogProperties [-Name] <Object> [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [-ErrorVariable <String>] [-WarningVariable <String>] [-OutVariable <String>] [-OutBuffer <Int32>]
Get-WinEvent                      Cmdlet    Получает события из журналов событий и файлов журналов отслеживания событий, находящихся на локальном компьютере и на удаленных компьютерах.
Get-Counter                       Cmdlet    Получает данные счетчиков производительности на локальном компьютере и удаленных компьютерах.
Get-WSManCredSSP                  Cmdlet    Получает связанную с поставщиком услуг безопасности конфигурацию для клиента.
Get-WSManInstance                 Cmdlet    Отображает сведения об управлении для экземпляра ресурса, заданного URI ресурса.
Get-Command                       Cmdlet    Возвращает базовые сведения о командлетах и о других элементах команд Windows PowerShell.
Get-Help                          Cmdlet    Отображает сведения о командах и концепциях Windows PowerShell.
Get-History                       Cmdlet    Возвращает список команд, введенных за время текущего сеанса.
Get-PSSessionConfiguration        Cmdlet    Получает зарегистрированные конфигурации сеансов на компьютере.
Get-PSSession                     Cmdlet    Получает сеансы Windows PowerShell (объекты PSSession) в текущем сеансе.
Get-Job                           Cmdlet    Получает фоновые задания Windows PowerShell, активные в текущем сеансе.
Get-Module                        Cmdlet    Получает модули, которые были импортированы или могут быть импортированы в текущий сеанс.
Get-PSSnapin                      Cmdlet    Возвращает оснастки Windows PowerShell на данном компьютере.
Get-FormatData                    Cmdlet    Получает данные форматирования для текущего сеанса.
Get-Event                         Cmdlet    Получает события из очереди событий.
Get-EventSubscriber               Cmdlet    Получает подписчики на события в текущем сеансе.
Get-Alias                         Cmdlet    Возвращает псевдонимы, действительные в ходе текущего сеанса.
Get-Culture                       Cmdlet    Получает текущее значение культуры, установленное в операционной системе.
Get-Date                          Cmdlet    Получает текущие значение даты и времени.
Get-Host                          Cmdlet    Получает объект, представляющий текущую основную программу. Отображает также версию Windows PowerShell и региональные сведения по умолчанию.
Get-Member                        Cmdlet    Получает свойства и методы объектов.
Get-Random                        Cmdlet    Получает случайное число или случайным образом выбирает объекты из коллекции.
Get-UICulture                     Cmdlet    Получает текущие параметры культуры пользовательского интерфейса операционной системы.
Get-Unique                        Cmdlet    Возвращает уникальные элементы из отсортированного списка.
Get-Variable                      Cmdlet    Получает переменные, определенные для текущей консоли.
Get-PSBreakpoint                  Cmdlet    Получает настроенные в текущем сеансе точки останова.
Get-PSCallStack                   Cmdlet    Отображает текущий стек вызова.
Get-TraceSource                   Cmdlet    Возвращает компоненты Windows PowerShell, подготовленные к трассировке.
Get-EventLog                      Cmdlet    Получает события, зарегистрированные в журнале событий, или список журналов событий, находящихся на локальном или удаленном компьютере.
Get-ChildItem                     Cmdlet    Извлекает элементы и их потомки из заданных местоположений.
Get-Content                       Cmdlet    Извлекает содержимое элемента, находящегося в заданном местоположении.
Get-ItemProperty                  Cmdlet    Получает свойства заданного элемента.
Get-WmiObject                     Cmdlet    Получает экземпляры классов WMI или сведения о доступных классах.
Get-Location                      Cmdlet    Получает сведения о текущем рабочем местоположении.
Get-PSDrive                       Cmdlet    Получает диски Windows PowerShell, используемые в текущем сеансе.
Get-Item                          Cmdlet    Получает элемент, находящийся в заданном местоположении.
Get-PSProvider                    Cmdlet    Получает сведения об указанном поставщике Windows PowerShell.
Get-Process                       Cmdlet    Получает процессы, выполняющиеся на локальном или удаленном компьютере.
Get-Service                       Cmdlet    Получает службы на локальном или удаленном компьютере.
Get-Transaction                   Cmdlet    Получает текущую (активную) транзакцию.
Get-HotFix                        Cmdlet    Получает исправления, примененные на локальном компьютере или на удаленных компьютерах.
Get-ComputerRestorePoint          Cmdlet    Получает точки восстановления системы на локальном компьютере.
Get-Acl                           Cmdlet    Получает дескриптор безопасности для ресурса, такого как файл или раздел реестра.
Get-PfxCertificate                Cmdlet    Получает данные о PFX-файлах сертификата в компьютере.
Get-Credential                    Cmdlet    Получает объект хранения учетных данных на основе имени пользователя и пароля.
Get-ExecutionPolicy               Cmdlet    Получает политики выполнения для текущего сеанса.
Get-AuthenticodeSignature         Cmdlet    Получает сведения о подписи Authenticode в файле.
Get-AppLockerFileInformation      Cmdlet    Получает информацию AppLocker о файлах из списка файлов или журнала событий.
Get-AppLockerPolicy               Cmdlet    Получает локальную, действующую или доменную политику AppLocker.
Get-BitsTransfer                  Cmdlet    Извлекает связанный объект BitsJob существующего задания передачи фоновой интеллектуальной службы передачи (BITS).
Get-TroubleshootingPack           Cmdlet    Этот командлет получает информацию о диагностическом пакете. Его также можно использовать для создания файла ответов.


PS C:\>

PS C:\> get-host


Name             : ConsoleHost
Version          : 2.0
InstanceId       : 17cdbdd4-e0a9-4d21-8290-67be38409622
UI               : System.Management.Automation.Internal.Host.InternalHostUserInterface
CurrentCulture   : ru-RU
CurrentUICulture : ru-RU
PrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy
IsRunspacePushed : False
Runspace         : System.Management.Automation.Runspaces.LocalRunspace



PS C:\> get-date

25 марта 2016 г. 17:17:53


PS C:\>

PS C:\> get-help get-date*

ИМЯ
    Get-Date

ОПИСАНИЕ
    Получает текущие значение даты и времени.

СИНТАКСИС
    Get-Date [-Format <string>] [[-Date] <DateTime>] [-Day <int>] [-DisplayHint {Date | Time | DateTime}] [-Hour <int>] [-Minute <int>] [-Month <int>] [-Second <int>] [-Year <int>] [<CommonParameters>]

    Get-Date [-UFormat <string>] [[-Date] <DateTime>] [-Day <int>] [-DisplayHint {Date | Time | DateTime}] [-Hour <int>] [-Minute <int>] [-Month <int>] [-Second <int>] [-Year <int>] [<CommonParameters>]

ОПИСАНИЕ
    Командлет Get-Date получает объект DateTime, содержащий текущую или заданную дату. Он позволяет выводить дату и время в различных форматах Windows и UNIX. С помощью командлета Get-Date можно создать текстовую строку с да
    той или временем, а затем передать ее другим командлетам или программам.


ССЫЛКИ ПО ТЕМЕ
    Online version: http://go.microsoft.com/fwlink/?LinkID=113313
    Set-Date
    New-TimeSpan

ЗАМЕЧАНИЯ
    Для просмотра примеров введите: "get-help Get-Date -examples".
    Для получения дополнительных сведений введите: "get-help Get-Date -detailed".
    Для получения технических сведений введите: "get-help Get-Date -full".



PS C:\>

PS C:\> get-help get-date*

ИМЯ
    Get-Date

ОПИСАНИЕ
    Получает текущие значение даты и времени.


СИНТАКСИС
    Get-Date [-Format <string>] [[-Date] <DateTime>] [-Day <int>] [-DisplayHint {Date | Time | DateTime}] [-Hour <int>] [-Minute <int>] [-Month <int>] [-Second <int>] [-Year <int>] [<CommonParameters>]

    Get-Date [-UFormat <string>] [[-Date] <DateTime>] [-Day <int>] [-DisplayHint {Date | Time | DateTime}] [-Hour <int>] [-Minute <int>] [-Month <int>] [-Second <int>] [-Year <int>] [<CommonParameters>]


ОПИСАНИЕ
    Командлет Get-Date получает объект DateTime, содержащий текущую или заданную дату. Он позволяет выводить дату и время в различных форматах Windows и UNIX. С помощью командлета Get-Date можно создать текстовую строку с да
    той или временем, а затем передать ее другим командлетам или программам.


ССЫЛКИ ПО ТЕМЕ
    Online version: http://go.microsoft.com/fwlink/?LinkID=113313
    Set-Date
    New-TimeSpan

ЗАМЕЧАНИЯ
    Для просмотра примеров введите: "get-help Get-Date -examples".
    Для получения дополнительных сведений введите: "get-help Get-Date -detailed".
    Для получения технических сведений введите: "get-help Get-Date -full".



PS C:\> get-help Get-Date -examples

ИМЯ
    Get-Date

ОПИСАНИЕ
    Получает текущие значение даты и времени.

    -------------------------- ПРИМЕР 1 --------------------------

    C:\PS>get-date -DisplayHint date

    Tuesday, June 13, 2006


    Описание
    -----------
    Эта команда возвращает объект DateTime, но отображает только дату. Параметр DisplayHint указывает, что должна отображаться только дата.




    -------------------------- ПРИМЕР 2 --------------------------

    C:\PS>get-date -format g
    6/13/2006 12:43 PM
    Описание
    -----------
    Эта команда возвращает текущие дату и время, форматируя их в кратком формате даты и времени. Для указания формата в ней используется принятый в .NET Framework описатель формата "g" (General [краткий формат даты и краткий
     формат времени]).
    -------------------------- ПРИМЕР 3 --------------------------
    C:\PS>get-date -uformat "%Y / %m / %d / %A / %Z"
    2006 / 06 / 13 / Tuesday / -07
    Описание
    -----------
    Эта команда возвращает текущие дату и время, форматируя их так, как указано в команде. В данном случае выводится номер года в полном формате (%Y), номер месяца в двузначном формате (%m), номер дня в двузначном формате (%
    d), название дня недели в полном формате (%A) и смещение от времени UTC ("Zulu").
    -------------------------- ПРИМЕР 4 --------------------------
    C:\PS>(get-date -year 2016 -month 12 -day 31).dayofyear
    366
    Описание
    -----------
    Эта команда отображает номер текущего дня года. Например, 31 декабря — это 365 день 2006 года, но 366 день 2016 года.
    -------------------------- ПРИМЕР 5 --------------------------
    C:\PS>$a = get-date
    C:\PS> $a.IsDaylightSavingTime()
    True
    Описание
    -----------
    Эта команда сообщает, корректируются ли текущие дата и время с учетом перехода на летнее и зимнее время в используемой локали.
    Первая команда создает переменную с именем $a, после чего присваивает ей объект, возвращенный командлетом Get-Date. После этого для объекта в переменной $a вызывается метод IsDaylightSavingTime.
    Чтобы узнать свойства и методы объекта DateTime, введите:
     "get-date | get-member".
    -------------------------- ПРИМЕР 6 --------------------------
    C:\PS>$a = get-date
    C:\PS> $a.ToUniversalTime()
    Tuesday, June 13, 2006 8:09:19 PM
    Описание
    -----------
    Эти команды преобразуют текущие дату и время в формат времени UTC.

    Первая команда создает переменную с именем $a, после чего присваивает ей объект, возвращенный командлетом Get-Date. После этого для объекта в переменной $a вызывается метод ToUniversalTime.




    -------------------------- ПРИМЕР 7 --------------------------

    C:\PS>$a = get-wmiobject win32_bios -computer server01

    $a | format-list -property Name, @{Label="BIOS Age"; `
    Expression={(get-date) - $_.ConvertToDateTime($_.ReleaseDate)}}

    Name     : Default System BIOS
    BIOS Age : 1345.17:31:07.1091047


    Описание
    -----------
    В инструментарии управления Windows (WMI) используется объект даты-времени, отличный от аналогичного объекта .NET Framework, возвращаемого командлетом Get-Date. Чтобы использовать такие объекты WMI в одной команде с данными о дате и времени, возвращенными командлетом Get-Date, нужно вызвать метод ConvertToDateTime для преобразования WMI-объектов CIM_DATETIME в объекты DateTime платформы .NET Framework.

    Команды в данном примере отображают название BIOS на удаленном компьютере Server01 и время, прошедшее с момента выпуска BIOS.

    Первая команда с помощью командлета Get-WmiObject получает экземпляр класса Win32_BIOS на компьютере Server01, после чего сохраняет его в переменной $a.

    Во второй команде WMI-объект, сохраненный в переменной $a, с помощью оператора конвейера (|) передается командлету Format-List. Параметр Property командлета Format-List указывает два свойства, которые будут отображаться     в списке: "Name" и "BIOS Age". Свойство "BIOS Age" определено в хэш-таблице. Эта таблица содержит ключи Label и Expression, которые определяют, соответственно, имя свойства и выражение, на основе которого вычисляется время, прошедшее с момента выпуска BIOS. Для преобразования каждого экземпляра класса ReleaseDate в объект DateTime платформы .NET Framework в выражении используется метод ConvertToDateTime. Затем полученное значение вычитается из значения, возвращенного командлетом Get-Date, который при отсутствии параметров возвращает текущую дату.

    Открывающая кавычка (`) в Windows PowerShell является знаком продолжения строки.




    -------------------------- ПРИМЕР 8 --------------------------

    C:\PS>get-date

    Tuesday, June 13, 2006 12:43:42 PM


    Описание
    -----------
    Эта команда получает объект DateTime и выводит текущие дату и время в формате длинной даты и длинного времени для локали системы, как если бы была введена команда "get-date -format F".




    -------------------------- ПРИМЕР 9 --------------------------

    C:\PS>get-date

    C:\PS> Tuesday, September 26, 2006 11:25:31 AM

    c:\PS>(get-date).ToString()
    9/26/2006 11:25:31 AM

    C:\PS>get-date | add-content test.txt
    # Adds 9/26/2006 11:25:31 AM

    C:\PS>get-date -format F | add-content test.txt
    # Adds Tuesday, September 26, 2006 11:25:31 AM


    Описание
    -----------
    В этих командах показано, как использовать командлет Get-Date с командлетом Add-Content и другими командлетами, которые преобразуют объект DateTime, возвращаемый командлетом Get-Date, в строку.

    Первая команда показывает, что по умолчанию командлет get-date выводит результат в полном формате даты и времени.

    Вторая команда показывает, что по умолчанию метод ToString() объекта DateTime возвращает дату и время в коротком формате.

    Третья команда с помощью оператора конвейера передает объект DateTime командлету Add-Content, который добавляет содержимое в файл Test.txt. Поскольку командлет Add-Content использует метод ToString() объекта DateTime, до
    бавляемая дата имеет короткий формат даты и времени.

    Четвертая команда использует параметр Format командлета Get-Date, чтобы задать формат. При использовании параметров Format и UFormat командлет Get-Date создает строку, а не объект DateTime. Затем, когда строка передается
     командлету Add-Content, эта строка добавляется в файл Test.txt без изменений.

PS C:\>
дополнение команд по начальным данным-F8
команды, которые мы ввели F7, в этом окне жмем  F9-и номер команды-для редактирования


PS C:\WINDOWS\system32\WindowsPowerShell\v1.0> cd \

____________________________________________________________________________
PS C:\> get-help restart-computer -examples

ИМЯ
    Restart-Computer
    
ОПИСАНИЕ
    Перезапускает ("перезагружает") операционную систему локального и удаленных
     компьютеров.
    
    -------------------------- ПРИМЕР 1 --------------------------
    
    C:\PS>restart-computer
    
    
    Описание
    -----------
    Эта команда перезагружает локальный компьютер.
    
    
    
    
    -------------------------- ПРИМЕР 2 --------------------------
    
    C:\PS>restart-computer -computername Server01, Server02, localhost
    
    
    Описание
    -----------
    Эта команда перезагружает два удаленных компьютера: Server01 и Server02, а 
    также локальный компьютер, указанный как "localhost".
    
    
    
    
    -------------------------- ПРИМЕР 3 --------------------------
    
    C:\PS>$j = restart-computer -computername Server01, Server02 -asjob 
    
    C:\PS> $results = $j | receive-job
    
    C:\PS> $results
    
    
    Описание
    -----------
    В приведенных командах команда Restart-Computer выполняется в качестве фоно
    вого задания на двух удаленных компьютерах, после чего выводятся результаты
    .
    
    В первой команде используется параметр AsJob для выполнения команды в качес
    тве фонового задания. Полученный объект задания сохраняется в переменной $j
    .
    
    Во второй команде объект задания, сохраненный в переменной $j, с помощью оп
    ератора конвейера передается командлету Receive-Job, который получает резул
    ьтаты выполнения задания. Результаты сохраняются в переменной $results. 
    
    Третья команда отображает результаты, сохраненные в переменной $results.
    
    Поскольку при использовании параметра AsJob задание создается на локальном 
    компьютере и результаты автоматически возвращаются на локальный компьютер, 
    команду Receive-Job можно выполнять как локальную команду.
    
    
    
    
    -------------------------- ПРИМЕР 4 --------------------------
    
    C:\PS>restart-computer -comp Server01 -impersonation anonymous -authenticat
    ion PacketIntegrity
    
    
    Описание
    -----------
    Эта команда перезагружает удаленный компьютер Server01. В команде использую
    тся настроенные параметры олицетворения и проверки подлинности.
    
    
    
    
    -------------------------- ПРИМЕР 5 --------------------------
    
    C:\PS>$s = get-content domain01.txt
    
    C:\PS> $c = get-credential domain01\admin01
    
    C:\PS> restart-computer -computername $s -force -throttlelimit 10 -credenti
    al $c
    
    
    Описание
    -----------
    Эти команды принудительно инициируют немедленную перезагрузку всех компьюте
    ров в домене Domain01. 
    
    Первая команда получает список компьютеров в домене и сохраняет его в перем
    енной $s.
    
    Вторая команда получает учетные данные администратора домена и сохраняет их
     в переменной $c.
    
    Третья команда перезагружает компьютеры. Параметр ComputerName используется
     для передачи списка компьютеров в переменной $s, параметр Force — для прин
    удительной немедленной перезагрузки, а параметр Credential — для передачи у
    четных данных, сохраненных в переменной $c. Кроме того, с помощью параметра
     ThrottleLimit количество устанавливаемых командой одновременных соединений
     ограничивается десятью.


                                                                                          сценарии
для просмотра установленной политики
Windows PowerShell
(C) Корпорация Майкрософт, 2009. Все права защищены.

PS C:\Windows\system32> get-executionpolicy

RemoteSigned-разрешить локальные, удаленные с подписью.
поменять, заходим (запуск с правами администратора)
cd \
PS C:\>set-executionpolicy RemoteSigned
.....y
---------------------------------
                            временно добавить путь исполняемых скриптов

   $env:path +=";P:\скрипты_проект\power_scripts"
                                             постоянно добавить путь исполняемых скриптов

компьютер-свойства правой кнопкой-дополнительные свойства-переменные среды системные среды-
path......;P:\скрипты_проект\power_scripts

при запрещающей политике(по умолчанию)можно временно вкл скрипты, вводим в ком_строке
powershell -executionpolicy unrestricted -file P:\скрипты_проект\power_scripts


___________________________________________________________________________
                                                             математические операции
работает принцип правой руки
1+"11"
12
но "1"+11
111
-----------------------------------
+сложить
-вычесть
*умножить
/разделить
                                                                    для ввода текста набираем
!!!вводим все  по одной строке!!!!
write-host.....текст(язык ввода англ-рус неважен)
write-host (50+51)
-----------------переменные
$a=34
 write-host $a  
 write-host -------------- 
------------       
 $a="текст"
 write-host $a  
 write-host -------------- 
------------------------использование командлетов в переменных
 $a="get-service"
&$a
--------------------проверка вкл служб(сортировка по статусу)
clear
$a="get-date"
$b="get-service"
$c="---------------"
write-host Script
&$b | sort-object status
------------------
$a={get-service w*|sort-object status}
&$a
---------------------
мониторим процессы сортируем по нагрузке на процессор
clear
$a={get-process power*|sort-object CPU}
$b="get-service"
$c="---------------"
write-host Script
$c
&$a
&$b
&$a
------------------
PS C:\Windows\system32> cd \
PS C:\> get-process
------------------------
PS C:\> get-process|sort-object CPU
___________________________________сортируем по имени и айдишнику
PS C:\> get-process|sort-object -property processname, id
------------------------------------------------сортируем в обратном режиме
PS C:\> get-process|sort-object CPU -descending
---------сортируем уникальные значение(не имена)(повторяются только 1раз, даже если их несколько)
PS C:\> get-process|sort-object  -unique
--------------------группируем процессы со свойствами по имени
get-process|group-object -property processname
-------------------------------

PS C:\> get-service|group-object -property status -noelement

Count Name
----- ----
   79 Running
   96 Stopped

PS C:\>

                                                                хочу скрипт для просмотра процессов
clear
$ps={get-process powershell_ise}
&$ps
get-service
&$ps
                      пожалуйста,не забудь название привести в соответствие с деятельностью этого скрипта, например script_process

                            хочу скрипт для отображения процессов отсортированных по CPU ввиде листа(списка)                             сгруппированных по CPU

get-process |format-list -groupby CPU
PS C:\>get-process|sort-object CPU |format-list -groupby CPU
 пожалуйста, в начале без потребления процессора, в конце с потреблением

хочу скрипт для отображения служб начинающихся на w*, отформатированных ввиде списка(доп инфа, можно ли остановить, поставить на паузу, вкл)
get-service w*|format-list
пожалуйста,

хочу скрипт для отображения служб, отсортированных по status ,отформатированных ввиде списка
get-service w*|sort-object status|format-list -groupby status
пожалуйста,

полная информация в таблице о службах(если при обыкновенном табличном выводе не полная)
get-service|format-table -wrap
информация в таблице о службах (только имена)5 колонок
get-service|format-wide -column 5

вывод инфы по шаблону 
get-service|format-custom
                                                                                                      обзор встроенных оснасток 

оснастка-это программа, которая использует .NET  и скомпилированные библиотеки (DLL)
список оснасток get-pssnapin

PS C:\Windows\system32> get-pssnapin


Name        : Microsoft.PowerShell.Diagnostics
PSVersion   : 2.0
Description : Данная оснастка Windows PowerShell содержит командлеты обработки событий Windows и счетчика производительности.

Name        : Microsoft.WSMan.Management
PSVersion   : 2.0
Description : Эта оснастка Windows PowerShell содержит командлеты (такие как Get-WSManInstance и Set-WSManInstance), которые используются узлом Windows PowerShell для управления операциями WsMan(новый протокол -удаленная работа.

Name        : Microsoft.PowerShell.Core
PSVersion   : (1.0)2.0
Description : Данная оснастка Windows PowerShell содержит командлеты, используемые для управления компонентами Windows PowerShell.

Name        : Microsoft.PowerShell.Utility
PSVersion   :(1.0) 2.0
Description : Данная оснастка Windows PowerShell содержит программу командлетов, используемую для управления данными.

Name        : Microsoft.PowerShell.Host
PSVersion   :(1.0) 2.0
Description : Эта оснастка Windows PowerShell содержит командлеты (такие как Start-Transcript и Stop-Transcript), которые предоставляются для работы с узлом консоли Windows PowerShell.

Name        : Microsoft.PowerShell.Management
PSVersion   : 2.0
Description : Данная оснастка Windows PowerShell содержит управляющие командлеты, используемые для управления компонентами Windows.

Name        : Microsoft.PowerShell.Security
PSVersion   : (1.0)2.0
Description : Данная оснастка Windows PowerShell содержит классы командлеты, используемые для управления безопасностью Windows PowerShell.

                                                           список командлетов оснастки Microsoft.PowerShell.Core
get-command -module Microsoft.PowerShell.Core

PS C:\Windows\system32> get-command -module Microsoft.PowerShell.Core

CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Cmdlet          Add-History                                                                                              Add-History [[-InputObject] <PSObject[]>] [-Passthru] [-Verbose] [-Debug] [-ErrorAction <ActionPrefe...
Cmdlet          Add-PSSnapin                                                                                             Add-PSSnapin [-Name] <String[]> [-PassThru] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-...
Cmdlet          Clear-History                                                                                            Clear-History [[-Id] <Int32[]>] [[-Count] <Int32>] [-Newest] [-Verbose] [-Debug] [-ErrorAction <Acti...
Cmdlet          Disable-PSSessionConfiguration                                                                           Disable-PSSessionConfiguration [[-Name] <String[]>] [-Force] [-Verbose] [-Debug] [-ErrorAction <Acti...
Cmdlet          Enable-PSRemoting                                                                                        Enable-PSRemoting [-Force] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <Ac...
Cmdlet          Enable-PSSessionConfiguration                                                                            Enable-PSSessionConfiguration [[-Name] <String[]>] [-Force] [-SecurityDescriptorSddl <String>] [-Ver...
Cmdlet          Enter-PSSession                                                                                          Enter-PSSession [-ComputerName] <String> [-Credential <PSCredential>] [-Port <Int32>] [-UseSSL] [-Co...
Cmdlet          Exit-PSSession                                                                                           Exit-PSSession [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreferen...
Cmdlet          Export-Console                                                                                           Export-Console [[-Path] <String>] [-Force] [-NoClobber] [-Verbose] [-Debug] [-ErrorAction <ActionPre...
Cmdlet          Export-ModuleMember                                                                                      Export-ModuleMember [[-Function] <String[]>] [-Cmdlet <String[]>] [-Variable <String[]>] [-Alias <St...
Cmdlet          ForEach-Object                                                                                           ForEach-Object [-Process] <ScriptBlock[]> [-InputObject <PSObject>] [-Begin <ScriptBlock>] [-End <Sc...
Cmdlet          Get-Command                                                                                              Get-Command [[-ArgumentList] <Object[]>] [-Verb <String[]>] [-Noun <String[]>] [-Module <String[]>] ...
Cmdlet          Get-Help                                                                                                 Get-Help [[-Name] <String>] [-Path <String>] [-Category <String[]>] [-Component <String[]>] [-Functi...
Cmdlet          Get-History                                                                                              Get-History [[-Id] <Int64[]>] [[-Count] <Int32>] [-Verbose] [-Debug] [-ErrorAction <ActionPreference...
Cmdlet          Get-Job                                                                                                  Get-Job [[-Id] <Int32[]>] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <Act...
Cmdlet          Get-Module                                                                                               Get-Module [[-Name] <String[]>] [-All] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-Warni...
Cmdlet          Get-PSSession                                                                                            Get-PSSession [[-ComputerName] <String[]>] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-W...
Cmdlet          Get-PSSessionConfiguration                                                                               Get-PSSessionConfiguration [[-Name] <String[]>] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>...
Cmdlet          Get-PSSnapin                                                                                             Get-PSSnapin [[-Name] <String[]>] [-Registered] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>...
Cmdlet          Import-Module                                                                                            Import-Module [-Name] <String[]> [-Global] [-Prefix <String>] [-Function <String[]>] [-Cmdlet <Strin...
Cmdlet          Invoke-Command                                                                                           Invoke-Command [-ScriptBlock] <ScriptBlock> [-InputObject <PSObject>] [-ArgumentList <Object[]>] [-V...
Cmdlet          Invoke-History                                                                                           Invoke-History [[-Id] <String>] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningActio...
Cmdlet          New-Module                                                                                               New-Module [-ScriptBlock] <ScriptBlock> [-Function <String[]>] [-Cmdlet <String[]>] [-ReturnResult] ...
Cmdlet          New-ModuleManifest                                                                                       New-ModuleManifest [-Path] <String> -NestedModules <String[]> [-Guid <Guid>] -Author <String> -Compa...
Cmdlet          New-PSSession                                                                                            New-PSSession [[-ComputerName] <String[]>] [-Credential <PSCredential>] [-Name <String[]>] [-Port <I...
Cmdlet          New-PSSessionOption                                                                                      New-PSSessionOption [-MaximumRedirection <Int32>] [-NoCompression] [-NoMachineProfile] [-Culture <Cu...
Cmdlet          Receive-Job                                                                                              Receive-Job [-Job] <Job[]> [[-Location] <String[]>] [-Keep] [-NoRecurse] [-Verbose] [-Debug] [-Error...
Cmdlet          Register-PSSessionConfiguration                                                                          Register-PSSessionConfiguration [-Name] <String> [-ProcessorArchitecture <String>] [-ApplicationBase...
Cmdlet          Remove-Job                                                                                               Remove-Job [-Id] <Int32[]> [-Force] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningA...
Cmdlet          Remove-Module                                                                                            Remove-Module [-Name] <String[]> [-Force] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-Wa...
Cmdlet          Remove-PSSession                                                                                         Remove-PSSession [-Id] <Int32[]> [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningActi...
Cmdlet          Remove-PSSnapin                                                                                          Remove-PSSnapin [-Name] <String[]> [-PassThru] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>]...
Cmdlet          Set-PSDebug                                                                                              Set-PSDebug [-Trace <Int32>] [-Step] [-Strict] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>]...
Cmdlet          Set-PSSessionConfiguration                                                                               Set-PSSessionConfiguration [-Name] <String> [-ApplicationBase <String>] [-ThreadApartmentState <Apar...
Cmdlet          Set-StrictMode                                                                                           Set-StrictMode -Version <Version> [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAct...
Cmdlet          Start-Job                                                                                                Start-Job [-ScriptBlock] <ScriptBlock> [[-InitializationScript] <ScriptBlock>] [-Name <String>] [-Cr...
Cmdlet          Stop-Job                                                                                                 Stop-Job [-Id] <Int32[]> [-PassThru] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-Warning...
Cmdlet          Test-ModuleManifest                                                                                      Test-ModuleManifest [-Path] <String> [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-Warning...
Cmdlet          Unregister-PSSessionConfiguration                                                                        Unregister-PSSessionConfiguration [-Name] <String> [-Force] [-NoServiceRestart] [-Verbose] [-Debug] ...
Cmdlet          Wait-Job                                                                                                 Wait-Job [-Id] <Int32[]> [-Any] [-Timeout <Int32>] [-Verbose] [-Debug] [-ErrorAction <ActionPreferen...
Cmdlet          Where-Object                                                                                             Where-Object [-FilterScript] <ScriptBlock> [-InputObject <PSObject>] [-Verbose] [-Debug] [-ErrorActi...

PS C:\Windows\system32> 


PS C:\Windows\system32> get-command -module Microsoft.PowerShell.Diagnostics

CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Cmdlet          Export-Counter                                                                                           Export-Counter [-Path] <String> [-FileFormat <String>] [-MaxSize <UInt32>] -InputObject <Performance...
Cmdlet          Get-Counter                                                                                              Get-Counter [[-Counter] <String[]>] [-SampleInterval <Int32>] [-MaxSamples <Int64>] [-Continuous] [-...
Cmdlet          Get-WinEvent                                                                                             Get-WinEvent [[-LogName] <String[]>] [-MaxEvents <Int64>] [-ComputerName <String>] [-Credential <PSC...
Cmdlet          Import-Counter                                                                                           Import-Counter [-Path] <String[]> [-StartTime <DateTime>] [-EndTime <DateTime>] [-Counter <String[]>...


PS C:\Windows\system32> get-command -module Microsoft.PowerShell.Host

CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Cmdlet          Start-Transcript                                                                                         Start-Transcript [[-Path] <String>] [-Append] [-Force] [-NoClobber] [-Verbose] [-Debug] [-ErrorActio...
Cmdlet          Stop-Transcript                                                                                          Stop-Transcript [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPrefere...

PS C:\Windows\system32>

                                                                        Обзор встроенных поставщиков
Поставщик-это  .NET  -программа,предоставляющая доступ к специализированным хранилищам данных(дискам)из строки Windows PowerShell

ВСТРОЕННЫЕ ПОСТАВЩИКИ
WINDOWS POWERSHELL 2.0
Alias - Псевдонимы PowerShell.
Certificate - Сертификаты (X509)
Environment - Переменные Windows
FileSystem - Диски, файлы и каталоги
Function - Функции PowerShell
Registry- Реестр Windows
Variable - Переменные PowerShell
WSMan - Управление WSMan( version PowerShell 2.0)

PS C:\Windows\system32> get-psprovider

Name                 Capabilities                                                                                          Drives
----                 ------------                                                                                          ------
WSMan                Credentials                                                                                           {WSMan}
Alias                ShouldProcess                                                                                         {Alias}
Environment          ShouldProcess                                                                                         {Env}
FileSystem           Filter, ShouldProcess                                                                                 {C, D, F, P...}
Function             ShouldProcess                                                                                         {Function}
Registry             ShouldProcess, Transactions                                                                           {HKLM, HKCU}
Variable             ShouldProcess                                                                                         {Variable}
Certificate          ShouldProcess                                                                                         {cert}

PS C:\Windows\system32>
                                                                   найти путь текущего каталога(папки в которой мы находимся)
get-location

PS C:\Windows\system32> get-location
Path
----
C:\Windows\system32
PS C:\Windows\system32>
PS C:\>
PS C:\> get-help set-location -examples

ИМЯ
    Set-Location

ОПИСАНИЕ
    Присваивает текущему местоположению заданное значение.
    -------------------------- ПРИМЕР 1 --------------------------
    C:\PS>set-location HKLM:
    Описание
    -----------
    Эта команда присваивает текущему местоположению заданное значение. В данном случае им является поставщик HKLM.
    -------------------------- ПРИМЕР 2 --------------------------
    C:\PS>set-location env: -passthru
    Path
    ----
    Env:\
    Описание
    -----------
    Эта команда присваивает текущему местоположению заданное значение. В данном случае им является поставщик переменных среды.
    -------------------------- ПРИМЕР 3 --------------------------
    C:\PS>set-location C:
    Описание
    -----------
    Эта команда присваивает текущему местоположению заданное значение. В данном случае им является диск C: поставщика файловой системы.







PS C:\>
                                                                       переместиться в какую либо директорию- 
рабочий стол
PS C:\> set-location C:\Users\\....\\Desktop (полный путь если русифицированная версия и названия папок не англ)
PS C:\Users\\....\\Desktop>

и обратно
cd \
PS C:\>
или
set-location \
PS C:\>
------------------------------------

PS C:\> set-location .\Windows
PS C:\Windows> get-childitem


    Каталог: C:\Windows
т.е папка Windows с ее содержимым(можно сравнить)

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----        14.07.2009      7:52            addins
d----        18.12.2014     19:14            AppCompat
d----        08.12.2014     23:15            AppPatch
d-r-s        27.02.2016     19:25            assembly
d----        14.07.2009      7:52            Boot
d----        14.07.2009      7:52            Branding
d----        26.05.2014     21:55            CSC
d----        14.07.2009      7:52            Cursors
d----        14.09.2015      4:46            debug
d----        14.07.2009      7:52            diagnostics
...
PS C:\Windows>
                                                                                                                          идем на диск alias
set-location alias:

PS C:\Windows> set-location alias:               или get-command -CommandType Alias
PS Alias:\> get-childitem

сокращенные названия длинных командлетов-алиасы

CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Alias           %                                                                                                        ForEach-Object
Alias           ?                                                                                                        Where-Object
Alias           ac                                                                                                       Add-Content
Alias           asnp                                                                                                     Add-PSSnapIn
Alias           cat                                                                                                      Get-Content
Alias           cd                                                                                                       Set-Location
Alias           chdir                                                                                                    Set-Location
Alias           clc                                                                                                      Clear-Content
Alias           clear                                                                                                    Clear-Host
Alias           clhy                                                                                                     Clear-History
Alias           cli                                                                                                      Clear-Item
Alias           clp                                                                                                      Clear-ItemProperty
Alias           cls                                                                                                      Clear-Host
Alias           clv                                                                                                      Clear-Variable
Alias           compare                                                                                                  Compare-Object
Alias           copy                                                                                                     Copy-Item
Alias           cp                                                                                                       Copy-Item
Alias           cpi                                                                                                      Copy-Item
Alias           cpp                                                                                                      Copy-ItemProperty
Alias           cvpa                                                                                                     Convert-Path
Alias           dbp                                                                                                      Disable-PSBreakpoint
Alias           del                                                                                                      Remove-Item
Alias           diff                                                                                                     Compare-Object
Alias           dir                                                                                                      Get-ChildItem
Alias           ebp                                                                                                      Enable-PSBreakpoint
Alias           echo                                                                                                     Write-Output
Alias           epal                                                                                                     Export-Alias
Alias           epcsv                                                                                                    Export-Csv
Alias           epsn                                                                                                     Export-PSSession
Alias           erase                                                                                                    Remove-Item
Alias           etsn                                                                                                     Enter-PSSession
Alias           exsn                                                                                                     Exit-PSSession
Alias           fc                                                                                                       Format-Custom
Alias           fl                                                                                                       Format-List
Alias           foreach                                                                                                  ForEach-Object
Alias           ft                                                                                                       Format-Table
Alias           fw                                                                                                       Format-Wide
Alias           gal                                                                                                      Get-Alias
Alias           gbp                                                                                                      Get-PSBreakpoint
Alias           gc                                                                                                       Get-Content
Alias           gci                                                                                                      Get-ChildItem
Alias           gcm                                                                                                      Get-Command
Alias           gcs                                                                                                      Get-PSCallStack
Alias           gdr                                                                                                      Get-PSDrive
Alias           ghy                                                                                                      Get-History
Alias           gi                                                                                                       Get-Item
Alias           gjb                                                                                                      Get-Job
Alias           gl                                                                                                       Get-Location
Alias           gm                                                                                                       Get-Member
Alias           gmo                                                                                                      Get-Module
Alias           gp                                                                                                       Get-ItemProperty
Alias           gps                                                                                                      Get-Process
Alias           group                                                                                                    Group-Object
Alias           gsn                                                                                                      Get-PSSession
Alias           gsnp                                                                                                     Get-PSSnapIn
Alias           gsv                                                                                                      Get-Service
Alias           gu                                                                                                       Get-Unique
Alias           gv                                                                                                       Get-Variable
Alias           gwmi                                                                                                     Get-WmiObject
Alias           h                                                                                                        Get-History
Alias           history                                                                                                  Get-History
Alias           icm                                                                                                      Invoke-Command
Alias           iex                                                                                                      Invoke-Expression
Alias           ihy                                                                                                      Invoke-History
Alias           ii                                                                                                       Invoke-Item
Alias           ipal                                                                                                     Import-Alias
Alias           ipcsv                                                                                                    Import-Csv
Alias           ipmo                                                                                                     Import-Module
Alias           ipsn                                                                                                     Import-PSSession
Alias           ise                                                                                                      powershell_ise.exe
Alias           iwmi                                                                                                     Invoke-WMIMethod
Alias           kill                                                                                                     Stop-Process
Alias           lp                                                                                                       Out-Printer
Alias           ls                                                                                                       Get-ChildItem
Alias           man                                                                                                      help
Alias           md                                                                                                       mkdir
Alias           measure                                                                                                  Measure-Object
Alias           mi                                                                                                       Move-Item
Alias           mount                                                                                                    New-PSDrive
Alias           move                                                                                                     Move-Item
Alias           mp                                                                                                       Move-ItemProperty
Alias           mv                                                                                                       Move-Item
Alias           nal                                                                                                      New-Alias
Alias           ndr                                                                                                      New-PSDrive
Alias           ni                                                                                                       New-Item
Alias           nmo                                                                                                      New-Module
Alias           nsn                                                                                                      New-PSSession
Alias           nv                                                                                                       New-Variable
Alias           ogv                                                                                                      Out-GridView
Alias           oh                                                                                                       Out-Host
Alias           popd                                                                                                     Pop-Location
Alias           ps                                                                                                       Get-Process
Alias           pushd                                                                                                    Push-Location
Alias           pwd                                                                                                      Get-Location
Alias           r                                                                                                        Invoke-History
Alias           rbp                                                                                                      Remove-PSBreakpoint
Alias           rcjb                                                                                                     Receive-Job
Alias           rd                                                                                                       Remove-Item
Alias           rdr                                                                                                      Remove-PSDrive
Alias           ren                                                                                                      Rename-Item
Alias           ri                                                                                                       Remove-Item
Alias           rjb                                                                                                      Remove-Job
Alias           rm                                                                                                       Remove-Item
Alias           rmdir                                                                                                    Remove-Item
Alias           rmo                                                                                                      Remove-Module
Alias           rni                                                                                                      Rename-Item
Alias           rnp                                                                                                      Rename-ItemProperty
Alias           rp                                                                                                       Remove-ItemProperty
Alias           rsn                                                                                                      Remove-PSSession
Alias           rsnp                                                                                                     Remove-PSSnapin
Alias           rv                                                                                                       Remove-Variable
Alias           rvpa                                                                                                     Resolve-Path
Alias           rwmi                                                                                                     Remove-WMIObject
Alias           sajb                                                                                                     Start-Job
Alias           sal                                                                                                      Set-Alias
Alias           saps                                                                                                     Start-Process
Alias           sasv                                                                                                     Start-Service
Alias           sbp                                                                                                      Set-PSBreakpoint
Alias           sc                                                                                                       Set-Content
Alias           select                                                                                                   Select-Object
Alias           set                                                                                                      Set-Variable
Alias           si                                                                                                       Set-Item
Alias           sl                                                                                                       Set-Location
Alias           sleep                                                                                                    Start-Sleep
Alias           sort                                                                                                     Sort-Object
Alias           sp                                                                                                       Set-ItemProperty
Alias           spjb                                                                                                     Stop-Job
Alias           spps                                                                                                     Stop-Process
Alias           spsv                                                                                                     Stop-Service
Alias           start                                                                                                    Start-Process
Alias           sv                                                                                                       Set-Variable
Alias           swmi                                                                                                     Set-WMIInstance
Alias           tee                                                                                                      Tee-Object
Alias           type                                                                                                     Get-Content
Alias           where                                                                                                    Where-Object
Alias           wjb                                                                                                      Wait-Job
Alias           write                                                                                                    Write-Output


PS Alias:\>

                                                     перешли на диск cert сертификации(доверенные корневые сертификаты)
PS Alias:\> set-location cert:
PS cert:\> get-childitem

Location   : CurrentUser
StoreNames : {SmartCardRoot, UserDS, AuthRoot, CA...}
Location   : LocalMachine
StoreNames : {SmartCardRoot, AuthRoot, CA, Trust...}

                                                                                       (все,что в реестре)
PS cert:\> set-location .\LocalMachine
PS cert:\LocalMachine> get-childitem

Name : SmartCardRoot
Name : AuthRoot
Name : CA
Name : Trust
Name : Disallowed
Name : My
Name : Root
Name : TrustedPeople
Name : TrustedDevices
Name : Remote Desktop
Name : TrustedPublisher
Name : Homegroup Machine Certificates



PS cert:\LocalMachine> set-location .\Root
PS cert:\LocalMachine\Root> get-childitem


    Каталог: Microsoft.PowerShell.Security\Certificate::LocalMachine\Root


Thumbprint                                Subject
----------                                -------
....                                                   ....

PS cert:\LocalMachine\Root>
==========================================
Подписание сценариев

Командлеты:
•	Get-AuthenticodeSignature
•	Set- AuthenticodeSignature
•	Шаблон сертификата:
Code Signing
--------------
mmc
 в меню файл добавить оснастку -сертификаты
моей учетной записи пользователя(первый пункт)
личные-правой кнопкой мыши-все задачи-запросить новый сертификат
добавлено администратором
политика регистрации Active Directory(если нет,то настоить)
выбрать шаблон ...Code Signing
                                                
                                                                                 подпись сертификата
подписывать сертификат(уже имеющийся на диске)
Get-ChildItem cert:\CurrentUser\my.....-CodeSigningCert
$a=Get-ChildItem cert:\CurrentUser\my.....-CodeSigningCert
ls
my.ps1
Set-AuthenticodeSignature .\my.ps1-Certificate $a
====================================================================




                                                                                   переходим на диск env
set-location env:
PS Env:\> get-childitem

(т.е все,что в path)
Name                           Value
----                           -----
.....
                                                                         переходим на диск  function


PS Env:\> set-location function:                                                или get-command -CommandType Function
PS Function:\> get-childitem

CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Function        A:                                                                                                       Set-Location A:
Function        B:                                                                                                       Set-Location B:
Function        C:                                                                                                       Set-Location C:
Function        cd..                                                                                                     Set-Location ..
Function        cd\                                                                                                      Set-Location \
Function        Clear-Host                                                                                               $space = New-Object System.Management.Automation.Host.BufferCell...
Function        D:                                                                                                       Set-Location D:
Function        Disable-PSRemoting                                                                                       ...
Function        Disable-PSTrace                                                                                          ...
Function        Disable-PSWSManCombinedTrace                                                                             ...
Function        Disable-WSManTrace                                                                                       ...
Function        E:                                                                                                       Set-Location E:
Function        Enable-PSTrace                                                                                           ...
Function        Enable-PSWSManCombinedTrace                                                                              ...
Function        Enable-WSManTrace                                                                                        ...
Function        F:                                                                                                       Set-Location F:
Function        G:                                                                                                       Set-Location G:
Function        Get-LogProperties                                                                                        ...
Function        Get-Verb                                                                                                 ...
Function        H:                                                                                                       Set-Location H:
Function        help                                                                                                     ...
Function        I:                                                                                                       Set-Location I:
Function        ImportSystemModules                                                                                      ...
Function        J:                                                                                                       Set-Location J:
Function        K:                                                                                                       Set-Location K:
Function        L:                                                                                                       Set-Location L:
Function        M:                                                                                                       Set-Location M:
Function        mkdir                                                                                                    ...
Function        more                                                                                                     param([string[]]$paths)...
Function        N:                                                                                                       Set-Location N:
Function        O:                                                                                                       Set-Location O:
Function        P:                                                                                                       Set-Location P:
Function        prompt                                                                                                   $(if (test-path variable:/PSDebugContext) { '[DBG]: ' } else { '' }) + 'PS ' + $(Get-Location) + $(i...
Function        Q:                                                                                                       Set-Location Q:
Function        R:                                                                                                       Set-Location R:
Function        S:                                                                                                       Set-Location S:
Function        Set-LogProperties                                                                                        ...
Function        Start-Trace                                                                                              ...
Function        Stop-Trace                                                                                               ...
Function        T:                                                                                                       Set-Location T:
Function        TabExpansion                                                                                             ...
Function        U:                                                                                                       Set-Location U:
Function        V:                                                                                                       Set-Location V:
Function        W:                                                                                                       Set-Location W:
Function        X:                                                                                                       Set-Location X:
Function        Y:                                                                                                       Set-Location Y:
Function        Z:                                                                                                       Set-Location Z:
PS Function:\>

                                                                        переходим к реестру- к диску HKEY_CURRENT_USER



PS C:\Windows\system32> set-location HKCU:
PS HKCU:\> get-childitem


    Hive: HKEY_CURRENT_USER


SKC  VC Name                           Property
---  -- ----                           --------
  0   1 ${REG_ROOT}                    {Installer Language}
  0   0 131097                         {}
  2   0 AppEvents                      {}
  4  38 Console                        {ColorTable00, ColorTable01, ColorTable02, ColorTable03...}
 15   0 Control Panel                  {}
  0   4 Environment                    {MOZ_PLUGIN_PATH, Path, TEMP, TMP}
  4   0 EUDC                           {}
  1   6 Identities                     {Identity Ordinal, Migrated7, Last Username, Last User ID...}
  1   0 IEOOP.Registry                 {}
  3   0 Keyboard Layout                {}
  0   0 Network                        {}
  4   0 Printers                       {}
  1   1 RemoteAccess                   {InternetProfile}
115   0 Software                       {}
  1   0 System                         {}
  0   0 WXP                            {}
  1   8 Volatile Environment           {LOGONSERVER, USERDOMAIN, USERNAME, USERPROFILE...}


PS HKCU:\> set-location .\AppEvents
PS HKCU:\AppEvents> get-childitem

    Hive: HKEY_CURRENT_USER\AppEvents

SKC  VC Name                           Property
---  -- ----                           --------
 51   0 EventLabels                    {}
  2   1 Schemes                        {(default)}

PS HKCU:\AppEvents>

                                                                               переходим к диску переменные
PS HKCU:\AppEvents> set-location variable:                                get-variable
PS Variable:\> get-childitem

Name                           Value
----                           -----
$                              variable:
?                              True
^                              set-location
_
args                           {}
ConfirmPreference              High
ConsoleFileName
DebugPreference                SilentlyContinue
Error                          {Имя "сды" не распознано как имя командлета, функции, файла скрипта или выполняемой программы. Проверьте правильность написания имени, а также наличие и правильность пути, после чего повтори...
ErrorActionPreference          Continue
ErrorView                      NormalView
ExecutionContext               System.Management.Automation.EngineIntrinsics
false                          False
FormatEnumerationLimit         4
HOME                           C:\Users\\....\
Host                           System.Management.Automation.Internal.Host.InternalHost
input                          System.Collections.ArrayList+ArrayListEnumeratorSimple
MaximumAliasCount              4096
MaximumDriveCount              4096
MaximumErrorCount              256
MaximumFunctionCount           4096
MaximumHistoryCount            64
MaximumVariableCount           4096
MyInvocation                   System.Management.Automation.InvocationInfo
NestedPromptLevel              0
null
OutputEncoding                 System.Text.ASCIIEncoding
PID                            3348
PROFILE                        C:\Users\\....\\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
ProgressPreference             Continue
PSBoundParameters              {}
PSCulture                      ru-RU
PSEmailServer
PSHOME                         C:\Windows\System32\WindowsPowerShell\v1.0
PSSessionApplicationName       wsman
PSSessionConfigurationName     http://schemas.microsoft.com/powershell/Microsoft.PowerShell
PSSessionOption                System.Management.Automation.Remoting.PSSessionOption
PSUICulture                    ru-RU
PSVersionTable                 {CLRVersion, BuildVersion, PSVersion, WSManStackVersion...}
PWD                            Variable:\
ReportErrorShowExceptionClass  0
ReportErrorShowInnerException  0
ReportErrorShowSource          1
ReportErrorShowStackTrace      0
ShellId                        Microsoft.PowerShell
StackTrace                        в System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandOrigin commandOrigin)...
true                           True
VerbosePreference              SilentlyContinue
WarningPreference              Continue
WhatIfPreference               False
PS Variable:\>

                                                                      переходим к диску  WSMan
(и видим только локалхост)
PS Variable:\> set-location wsman:
PS WSMan:\> get-childitem


   WSManConfig:

ComputerName                                  Type
------------                                  ----
localhost                                     Container
PS WSMan:\>

или                                                      информация о всех дисках поставщиков

PS WSMan:\> get-psdrive

Name           Used (GB)     Free (GB) Provider      Root                                                                                                                                                        CurrentLocation
----           ---------     --------- --------      ----                                                                                                                                                        ---------------
A                                      FileSystem    A:\
Alias                                  Alias
C                  24,88          3,12 FileSystem    C:\                                                                                                                                                        Windows\system32
cert                                   Certificate   \
D                  42,35           ,62 FileSystem    D:\
Env                                    Environment
F                  34,81           ,53 FileSystem    F:\
Function                               Function
H                                      FileSystem    H:\
HKCU                                   Registry      HKEY_CURRENT_USER                                                                                                                                                 AppEvents
HKLM                                   Registry      HKEY_LOCAL_MACHINE
I                    ,66               FileSystem    I:\
J                    ,64               FileSystem    J:\
K                                      FileSystem    K:\
L                                      FileSystem    L:\
M                                      FileSystem    M:\
N                  14,62           ,01 FileSystem    N:\
P                   2,79           ,26 FileSystem    P:\
Variable                               Variable
W                    ,00           ,00 FileSystem    W:\
WSMan                                  WSMan

PS WSMan:\>
                                                           создать новый диск поставщиков
ls "HKCU:\Control Panel\Powercfg"
New-PSDrive Power -PSProvider Registry -Root "HKCU:\Control Panel\Powercfg"

                                                                                                                                   Модуль 
Модуль - это автономная единица исполнения, которая
содержит: оснастки, сценарии, пользовательские
представления и типы данных.

PS C:\Windows\system32> get-command *-module
CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Cmdlet          Get-Module                                                                                               Get-Module [[-Name] <String[]>] [-All] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-Warni...
Cmdlet          Import-Module                                                                                            Import-Module [-Name] <String[]> [-Global] [-Prefix <String>] [-Function <String[]>] [-Cmdlet <Strin...
Cmdlet          New-Module                                                                                               New-Module [-ScriptBlock] <ScriptBlock> [-Function <String[]>] [-Cmdlet <String[]>] [-ReturnResult] ...
Cmdlet          Remove-Module                                                                                            Remove-Module [-Name] <String[]> [-Force] [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-Wa...


PS C:\Windows\system32> get-module -listavailable
ModuleType Name                      ExportedCommands
---------- ----                      ----------------
Manifest   AppLocker                 {}
Manifest   BitsTransfer              {}
Manifest   PSDiagnostics             {Enable-PSTrace, Enable-WSManTrace, Start-Trace, Disable-PSWSManCombined...
Manifest   TroubleshootingPack       {}
PS C:\Windows\system32>

по умолчанию модули не подключены, для вкл-импорта модуля
import-module PSDiagnostics
get-module 
get-command -module PSDiagnostics

PS C:\Windows\system32> import-module PSDiagnostics
PS C:\Windows\system32> get-module

ModuleType Name                      ExportedCommands
---------- ----                      ----------------
Manifest   AppLocker                 {Get-AppLockerPolicy, Get-AppLockerFileInformation, Test-AppLockerPolicy...
Manifest   BitsTransfer              {Start-BitsTransfer, Remove-BitsTransfer, Resume-BitsTransfer, Get-BitsT...
Manifest   PSDiagnostics             {Enable-PSTrace, Enable-WSManTrace, Start-Trace, Disable-PSWSManCombined...
Manifest   TroubleshootingPack       {Get-TroubleshootingPack, Invoke-TroubleshootingPack}


PS C:\Windows\system32> get-command -module PSDiagnostics

CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Function        Disable-PSTrace                                                                                          ...
Function        Disable-PSWSManCombinedTrace                                                                             ...
Function        Disable-WSManTrace                                                                                       ...
Function        Enable-PSTrace                                                                                           ...
Function        Enable-PSWSManCombinedTrace                                                                              ...
Function        Enable-WSManTrace                                                                                        ...
Function        Get-LogProperties                                                                                        ...
Function        Set-LogProperties                                                                                        ...
Function        Start-Trace                                                                                              ...
Function        Stop-Trace                                                                                               ...


PS C:\Windows\system32> remove-Module PSDiagnostics
PS C:\Windows\system32>
remove-Module PSDiagnostics                                                 -отсоединили модуль


                                                                                                        настройка удаленной работы
Служба удаленного управления Windows (WinRM) применяет протокол WS-Management для удаленного
управления. WS-Management - стандартный протокол веб-служб для удаленного управления программным
обеспечением и оборудованием. Служба WinRM прослушивает сеть на наличие запросов WS-Management и
обрабатывает их.
WinRM - Windows Remote Management, входит в состав Windows
Management Framework и по умолчанию включен в Windows 7 и Windows
Server 2008 R2.

                                                                         Удаленное выполнение команд
сначала настраиваем сервер

Windows PowerShell
Copyright <C> 2009 Microsoft Corporation, all rights reserved.
PS C:\Users\login> get-service winrm
Status   Name	DisplayName
-------    -------             ----------------
Running   winrm	Windows Remote Management <WS-Manag...


Windows PowerShell
Copyright <C> 2009 Microsoft Corporation. All rights reserved.
PS C:\Windows\system32> Enable-PSRemoting
WinRM Quick Configuration
Running command "Set-WSManQuickConfig” to enable this machine for remote management throughWinRM service.
This includes:
1.	Starting or restarting <if already started> the WinRM service
2.	Setting the WinRM service type to auto start
3.	Creating a listener to accept requests on any IP address
4.	Enabling firewall exception for WS-Management traffic <for http only>.
Do you want to continue?
 [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is "Y">: у
WinRM has been updated to receive requests.
WinRM service type changed successfully.	
WinRM has been updated for remote management.
Created a WinRM listener on HTTP://* to accept WS-Man requests to any IP on this machine.
WinRM firewall exception enabled.
Confirm
Are you sure you want to perform this action?
Performing operation '’Registering session configuration" on Target "Session configuration "Microsoft.PowerShell32” is
not found. Running command "Register-PSSessionConfiguration Microsoft.PowerShell32 -processorarchitecture x86 -force”
to create "Microsoft.PowerShell32" session configuration. This will restart WinRM service.".
[Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is "Y">: у

PS C:\Windows\system32> winrm quickconfig
WinRM already is set up to receive requests on this machine
WinRM already is set up for remote management on this machine
PS C:\Windows\system32> 
PS C:\Users\login>
PS C:\Users\login> Invoke-Command -conputername pssru02 -Credential powershell\administrator -ScriptBlock {get-execution
policy}
PSComputerName	Runspaceld	PSShowComputerName Ualue
pssru02	    xScaf6f9-2c7d-4f9a-8672-dc...	True Restricted

                                                                                                    Удаленные сеансы
PS C:\Users\login>
PS C:\Users\login> Enter-PSSession pssrv02
[pssrv02]: PS C:\Users\login\Documents> 
.....все, что угодно....
exit
--------------------------------------Создание экземпляра прослушивателя HTTPS для всех IP-адресов

Пример. Создание экземпляра прослушивателя HTTPS для всех IP-адресов:
  winrm create winrm/config/Listener?Address=*+Transport=HTTPS @{Hostname="HOST";CertificateThumbprint="XXXXXXXXXX"}
Примечание. XXXXXXXXXX - 40-значная шестнадцатеричная строка, см. help config.
-------------------------
рабочих станций 2 и более , подключение через сервер к др рабстанции(внутри одного домена)
PS C:\Windows\system32> get-service winrm

Status   Name               DisplayName
------   ----               -----------
Stopped  winrm              Служба удаленного управления Window...

компьютер-левая кнопка мыши-управление-службы-WinRM-запуск-левая кнопка мыши-свойства-автоматически

Служба удаленного управления Windows (WinRM) применяет протокол WS-Management для удаленного управления. WS-Management - стандартный протокол веб-служб для удаленного управления программным обеспечением и оборудованием. Служба WinRM прослушивает сеть на наличие запросов WS-Management и обрабатывает их. Для принятия сетевых запросов необходимо настроить службу WinRM с помощью средства командной строки "winrm.cmd" или через групповую политику. Служба WinRM предоставляет доступ к данным WMI и включает поддержку сбора событий. Работа службы необходима для сбора событий и подписки на события. Для передачи сообщений WinRM используются протоколы HTTP и HTTPS. Служба WinRM не зависит от служб IIS, однако по умолчанию использует тот же порт, что и IIS.  Служба WinRM резервирует префикс URL-адреса /wsman. Для предотвращения конфликтов со службами IIS размещенные на IIS веб-сайты не должны использовать префикс URL-адреса /wsman.


PS C:\Windows\system32> get-service winrm

Status   Name               DisplayName
------   ----               -----------
Running  winrm              Служба удаленного управления Window...
PS C:\Windows\system32>
cls
Enable-PSRemoting
Windows PowerShell
(C) Корпорация Майкрософт, 2009. Все права защищены.

PS C:\Windows\system32> Enable-PSRemoting

Быстрая настройка WinRM
Запуск команды "Set-WSManQuickConfig" для включения на данном компьютере удаленного управления с помощью службы WinRM.
 Необходимые действия.
    1. Запуск или перезапуск (если уже запущена) службы WinRM.
    2. Изменение типа службы WinRM на "автозапуск".
    3. Создание прослушивателя для приема запросов на любом IP-адресе.
    4. Настройка исключений брандмауэра для трафика службы WS-Management (только для протокола http).

Продолжить?
[Y] Да - Y  [A] Да для всех - A  [N] Нет - N  [L] Нет для всех - L  [S] Приостановить - S  [?] Справка (значением по умолчанию является "Y"): y
Служба WinRM уже настроена на прием запросов на компьютере.
Set-WSManQuickConfig : Отказано в доступе.
строка:50 знак:33
+             Set-WSManQuickConfig <<<<  -force
    + CategoryInfo          : InvalidOperation: (:) [Set-WSManQuickConfig], InvalidOperationException
    + FullyQualifiedErrorId : WsManError,Microsoft.WSMan.Management.SetWSManQuickConfigCommand

PS C:\Windows\system32>

PS C:\Windows\system32> get-psdrive

Name           Used (GB)     Free (GB) Provider      Root                                                                                                                                                        CurrentLocation
----           ---------     --------- --------      ----                                                                                                                                                        ---------------
A                                      FileSystem    A:\
Alias                                  Alias
C                  25,09          2,91 FileSystem    C:\                                                                                                                                                        Windows\system32
cert                                   Certificate   \
D                  42,35           ,62 FileSystem    D:\
Env                                    Environment
F                  35,28           ,06 FileSystem    F:\
Function                               Function
H                                      FileSystem    H:\
HKCU                                   Registry      HKEY_CURRENT_USER
HKLM                                   Registry      HKEY_LOCAL_MACHINE
I                    ,66               FileSystem    I:\
J                    ,64               FileSystem    J:\
K                                      FileSystem    K:\
L                                      FileSystem    L:\
M                                      FileSystem    M:\
N                  14,52           ,11 FileSystem    N:\
P                   2,79           ,26 FileSystem    P:\
Variable                               Variable
W                    ,00           ,00 FileSystem    W:\
WSMan                                  WSMan


PS C:\Windows\system32> get-help WSMan

ИМЯ ПОСТАВЩИКА
    WSMan

ДИСКИ
    WSMan

ОПИСАНИЕ
    Обеспечивает доступ к конфигурационной информации веб-служб WS-Management.

ОПИСАНИЕ
    Поставщик WS-Management для Windows PowerShell позволяет добавлять, изменять, очищать и удалять конфигурационные данные WS-Management на локальном или удаленных компьютерах.

    Поставщик WS-Management открывает доступ к диску Windows PowerShell со структурой каталогов, соответствующей логическим группам параметров конфигурации WS-Management. Эти группы называются контейнерами.

    -- Client
    Позволяет настроить различные аспекты клиента WS-Management. Конфигурационная информация сохраняется в реестре.

    -- Service
    Позволяет настроить различные аспекты службы WS-Management. Конфигурационная информация сохраняется в реестре.
    Примечание. Конфигурация службы иногда называется конфигурацией сервера.

    -- Shell
    Позволяет настроить различные аспекты оболочки WS-Management, например, разрешить удаленный доступ к оболочке (параметр AllowRemoteShellAccess) и задать максимально допустимое количество одновременных пользователей (пара
    метр MaxConcurrentUsers).

    -- Listener
    Позволяет создать и настроить прослушиватель. Прослушиватель — это служба управления, реализующая протокол WS-Management для отправки и получения сообщений.

    -- Plugin
    Подключаемые модули загружаются и используются службой WS-Management для обеспечения различных функций. По умолчанию в Windows PowerShell предусмотрено три подключаемых модуля: подключаемый модуль Event Forwarding, подключаемый модуль Microsoft.PowerShell и подключаемый модуль поставщика инструментария управления Windows (WMI). Эти три подключаемых модуля поддерживают перенаправление событий, настройку и доступ к WMI.

    -- ClientCertificate
    Позволяет создать и настроить сертификат клиента. Сертификат клиента используется, когда клиент WS-Management настроен на проверку подлинности с помощью сертификата.

    Иерархия каталогов поставщика WS-Management
    ---------------
    Иерархия каталогов поставщика WS-Management для локального компьютера выглядит следующим образом.

    WSMan:\localhost
    --- Client
    --- Service
    --- Shell
    --- Listener
    ------ <конкретный_слушатель>
    --- Plugin
    ------ Event Forwarding Plugin
    --------- InitializationParameters
    --------- Resources
    ------------ Security
    ------ Microsoft.Powershell
    --------- InitializationParameters
    --------- Resources
    ------------ Security
    ------ WMI Provider
    --------- InitializationParameters
    --------- Resources
    ------------ Security
    --- ClientCertificate

    Иерархия каталогов поставщика WS-Management для удаленного компьютера аналогична иерархии каталогов для локального компьютера. Однако для доступа к параметрам конфигурации удаленного компьютера необходимо установить подк
    лючение к удаленному компьютеру с помощью командлета Connect-WSMan. После установления подключения к удаленному компьютеру имя удаленного компьютера появляется в поставщике.

    WSMan:\<имя_удаленного_компьютера>
    --- Client
    --- Service
    --- Shell
    --- Listener
    ------ <конкретный_слушатель>
    --- Plugin
    ------ Event Forwarding Plugin
    --------- InitializationParameters
    --------- Resources
    ------------ Security
    ------ Microsoft.Powershell
    --------- InitializationParameters
    --------- Resources
    ------------ Security
    ------ WMI Provider
    --------- InitializationParameters
    --------- Resources
    ------------ Security
    --- ClientCertificate


    Справка по поставщикам
    --------------------
    Для каталогов поставщика Listener, Plugin (IntitializationParameters, Resources, Security) и ClientCertificate предусмотрены специальные справочные сведения по командлету New-Item.  Находясь в том или ином каталоге, введ
    ите "get-help New-Item", чтобы получить справку по созданию новых элементов в этом каталоге.

ВОЗМОЖНОСТИ


ЗАДАЧИ
    ЗАДАЧА: Перемещение по диску WSMan:

        -------------------------- ПРИМЕР 1 --------------------------

        Эта команда с помощью командлета Set-Location меняет текущее местоположение на диск WSMan:.
        Set-Location WSMan:

        -------------------------- ПРИМЕР 2 --------------------------

        Эта команда с помощью командлета Set-Location меняет текущее местоположение на корневой каталог в хранилище Localhost.  Чтобы указать уровень иерархии на диске WSMan:, используйте обратную косую черту (\) или косую ч
        ерту (/).

        Set-Location -Path Localhost


        Если текущим местоположением является другой диск (не WSMan:), начинайте путь с имени диска.
        -------------------------- ПРИМЕР 3 --------------------------

        Эта команда с помощью командлета Set-Location меняет текущее местоположение на корневой каталог в хранилище удаленного компьютера.  Чтобы указать уровень иерархии на диске WSMan:, используйте обратную косую черту (\)
         или косую черту (/).

        Set-Location -Path  WSMan:\SERVER01
        Если текущим местоположением является другой диск (не WSMan:), начинайте путь с имени диска.
        Приведенная выше команда предполагает наличие подключения к удаленному компьютеру.  Если подключение к удаленному компьютеру еще не установлено, можно установить его непосредственно перед переходом к корневому каталогу в хранилище на удаленном компьютере. Пример:

          WSMan-Connect SERVER01
          Set-Location -Path  WSMan:\SERVER01
        -------------------------- ПРИМЕР 4 --------------------------

        Эта команда с помощью командлета Set-Location меняет текущее местоположение на каталог Client в хранилище Localhost.  Чтобы указать уровень иерархии на диске WSMan:, используйте обратную косую черту (\) или косую 
черту (/).

        Set-Location -Path Localhost\Client
        Если текущим местоположением является другой диск (не WSMan:), начинайте путь с имени диска.
    ЗАДАЧА: Отображение содержимого диска WSMan:
        -------------------------- ПРИМЕР 1 --------------------------
        Эта команда с помощью командлета Get-Childitem отображает хранилища WS-Management в хранилище Localhost.
        get-childitem -path WSMan:\Localhost
        Если текущим местоположением является диск WSMan:, имя диска можно не указывать.
        -------------------------- ПРИМЕР 2 --------------------------
        Эта команда с помощью командлета Get-Childitem отображает хранилища WS-Management в хранилище удаленного компьютера (SERVER01).

        get-childitem -path WSMan:\SERVER01
        Если текущим местоположением является диск WSMan:, имя диска можно не указывать.

        Приведенная выше команда предполагает наличие подключения к удаленному компьютеру.  Если подключение к удаленному компьютеру еще не установлено, можно установить его непосредственно перед отображением свойств и контейнеров в хранилище на удаленном компьютере. Пример:

          WSMan-Connect SERVER01
          get-childitem -path WSMan:\SERVER01
        -------------------------- ПРИМЕР 3 --------------------------
        Эта команда с помощью командлета Get-Childitem отображает текущие подключения WS-Management.

        get-childitem -path WSMan:\
        Если текущим местоположением является диск WSMan:, имя диска можно не указывать.
        -------------------------- ПРИМЕР 4 --------------------------
        Эта команда с помощью командлета Get-Item получает свойства и контейнеры в текущем хранилище.

        Get-Childitem


        Приведенная выше команда возвращает список свойств и контейнеров.  Пример:
        PS WSMan:\localhost> get-childitem

           WSManConfig: Microsoft.WSMan.Management\WSMan::localhost
        Name                   Value          Type
        ----                             -----          ----
        MaxEnvelopeSizekb      150            System.String
        MaxTimeoutms           60000          System.String
        MaxBatchItems          32000          System.String
        MaxProviderRequests    4294967295     System.String
        Client                                Container
        Service                               Container
        Shell                                 Container
        Listener                              Container
        Plugin                                Container
        ClientCertificate                     Container

ДИНАМИЧЕСКИЕ ПАРАМЕТРЫ
    -Address <String>
        Задает адрес, для которого создан данный прослушиватель. Ниже перечислены возможные значения.
        -- Символьная строка "*". (Подстановочный знак (*) дает команде указание привязать все IP-адреса на всех сетевых картах.)
        -- Символьная строка "IP:" и допустимый IP-адрес в формате IPv4 (десятичная запись) или в формате IPv6 (шестнадцатеричная запись).
        -- Символьная строка "MAC:" и MAC-адрес сетевой карты. Пример: MAC:32-a3-58-90-be-cc.
        Примечание. Значение параметра Address задается при создании прослушивателя.

        Поддерживаемые командлеты: Get-Item
    -AllowRemoteShellAccess <Boolean>
        Разрешает доступ к удаленным оболочкам. Если присвоить этому параметру значение False, новые удаленные подключения к оболочкам будут отклоняться сервером. Значение по умолчанию — True.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -AllowUnEncrypted <Boolean>
        Позволяет клиентскому компьютеру запрашивать передачу данных в незашифрованном виде. По умолчанию клиентский компьютер требует зашифрованного сетевого трафика.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Arguments <String>
        Задает строку аргументов и аргументы командной строки, которые нужно передать пользовательской оболочке. Это необязательный параметр.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Basic <Boolean>
        Позволяет клиентскому компьютеру использовать проверку подлинности по схеме Basic (обычную проверку подлинности). При использовании обычной проверки подлинности имя пользователя и пароль передаются серверу или прокси
        -серверу открытым текстом. Эта схема является наименее безопасным методом проверки подлинности.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Capability <Enumeration>
        Задает операцию, поддерживаемую для данного универсального идентификатора ресурса (URI). Необходимо создать по одной записи для каждого типа операции, поддерживаемого URI. Допустимые значения:
        -- Create: для URI поддерживаются операции создания. Атрибут SupportFragment используется, если операция Create поддерживает данную концепцию. Атрибут SupportFiltering является недопустимым, и для него следует задать
         значение False. Эта операция не допустима для URI, если поддерживаются операции Shell.
        -- Delete: для URI поддерживаются операции удаления. Атрибут SupportFragment используется, если операция Delete поддерживает данную концепцию. Атрибут SupportFiltering является недопустимым, и для него следует задать
         значение False. Эта операция не допустима для URI, если поддерживаются операции Shell.
        -- Enumerate: для URI поддерживаются операции перечисления. Атрибут SupportFragment не поддерживается операциями Enumerate, и для него следует задать значение False. Атрибут SupportFiltering является допустимым, и ес
        ли подключаемый модуль поддерживает фильтрацию, для этого атрибута следует задать значение True. Эта операция не допустима для URI, если поддерживаются операции Shell.

        -- Get: для URI поддерживаются операции получения. Атрибут SupportFragment используется, если операция Get поддерживает данную концепцию. Атрибут SupportFiltering является недопустимым, и для него следует задать знач
        ение False. Эта операция не допустима для URI, если поддерживаются операции Shell.

        -- Invoke: для URI поддерживаются операции вызова. Атрибут SupportFragment не поддерживается операциями Invoke, и для него следует задать значение False. Атрибут SupportFiltering является недопустимым, и для него сле
        дует задать значение False. Эта операция не допустима для URI, если поддерживаются операции Shell.

        -- Put: для URI поддерживаются операции добавления. Атрибут SupportFragment используется, если операция Put поддерживает данную концепцию. Атрибут SupportFiltering является недопустимым, и для него следует задать зна
        чение False. Эта операция не допустима для URI, если поддерживаются операции Shell.

        -- Subscribe: для URI поддерживаются операции подписки. Атрибут SupportFragment не поддерживается операциями Subscribe, и для него следует задать значение False. Атрибут SupportFiltering является недопустимым, и для
        него следует задать значение False. Эта операция не допустима для URI, если поддерживаются операции Shell.

        -- Shell: для URI поддерживаются операции оболочки. Атрибут SupportFragment не поддерживается операциями Shell, и для него следует задать значение False. Атрибут SupportFiltering является недопустимым, и для него сле
        дует задать значение False. Эта операция не допустима для URI, если поддерживается любая другая операция. Если для URI настроена операция Shell, операции Get, Put, Create, Delete, Invoke и Enumerate обрабатываются в
        рамках службы WS-Management (WinRM) для управления оболочками. В результате подключаемый модуль не может обрабатывать операции.

        Поддерживаемые командлеты: Get-Item, New-Item, Remove-Item, Set-Item
    -CbtHardeningLevel <String>
        Задает политику относительно необходимости токенов привязки канала в запросах проверки подлинности. Допустимые значения:
        -- Strict: все запросы, в которых отсутствует токен привязки канала, отклоняются. Это значение обеспечивает защиту всех подключений путем использования токенов привязки канала.

        -- Relaxed: если в запросе присутствует токен привязки канала, подключение будет защищено.  Если токен привязки канала отсутствует, подключение все равно будет принято, однако будет уязвимо к атакам, которые предотвращаются использованием токенов привязки канала.
        -- None: все предоставляемые токены привязки канала игнорируются.
        Значение этого параметра имеет силу только для подключений по протоколу HTTPS.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -CertificateThumbprint <String>
        Задает отпечаток сертификата службы.
        Это значение представляет собой состоящую из двузначных шестнадцатеричных значений строку в поле "Отпечаток" сертификата. Оно задает цифровой сертификат с открытым ключом (X509) учетной записи пользователя, который располагает разрешением для выполнения этого действия. Сертификаты используются при проверке подлинности на основе сертификата клиента. Они могут быть сопоставлены только с учетными записями локальных пользователей; с  учетными записями доменов они не работают. Чтобы получить отпечаток сертификата, воспользуйтесь командлетом Get-Item или Get-ChildItem в Windows PowerShell на диске Cert:.

        Поддерживаемые командлеты: Clear-Item, Get-Item, Set-Item
    -Certificate <Boolean>
        Позволяет использовать клиент для проверки подлинности с помощью сертификата. Клиент WS-Management пытается найти сертификат в хранилище компьютера. Если найти сертификат в хранилище компьютера не удается, клиент пытается найти его в хранилище текущего пользователя. Если подходящий сертификат не найден, пользователь получает сообщение об ошибке.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -CredSSP <Boolean>
        Позволяет клиенту использовать проверку подлинности поставщика услуг безопасности CredSSP.
        При проверке подлинности CredSSP пользователю разрешается делегировать учетные данные. Этот вариант предназначен для команд, которые запускаются на одном удаленном компьютере, но собирают данные с других удаленных компьютеров или выполняют на них дополнительные команды.

        Внимание! При проверке подлинности CredSSP учетные данные пользователя делегируются с локального компьютера на удаленный компьютер. Такой подход повышает угрозы безопасности удаленных операций. Если безопасность удаленного компьютера нарушена, при передаче на него учетных данных эти данные могут быть использованы для управления сетевым сеансом.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -HTTP <Unsigned Short Integer>
        Задает порт, используемый клиентом для подключений по протоколу HTTP. По умолчанию для HTTP-подключений используется порт 80. Можно указать любое значение от 1 до 65535.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -HTTPS <Unsigned Short Integer>
        Задает порт, используемый клиентом для подключений по протоколу HTTPS. По умолчанию для HTTPS-подключений используется порт 443. Можно указать любое значение от 1 до 65535.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Digest <Boolean>
        Позволяет клиентскому компьютеру использовать проверку подлинности по схеме Digest (дайджест-проверку подлинности). Дайджест-проверка подлинности проводится по принципу "запрос-ответ". В качестве запроса поступает строка данных, указанная сервером.  Инициировать запрос дайджест-проверки подлинности может только клиентский компьютер. Клиентский компьютер отправляет серверу запрос на проверку подлинности и получает от сервера строку токена. Затем клиентский компьютер отправляет запрос на ресурс, включающий имя пользователя и криптографический хэш пароля в сочетании со строкой токена. Дайджест-проверка подлинности по схеме Digest поддерживается для HTTP и для HTTPS. Клиентские скрипты оболочки WinRM и приложения могут запрашивать дайджест-проверку подлинности, однако служба WS-Management не принимает дайджест-проверку подлинности.
        Примечание. Дайджест-проверка подлинности по протоколу HTTP не считается безопасной.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Enabled <Boolean>
        Указывает, включен или отключен прослушиватель. Значение по умолчанию — True.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -ExactMatch <Boolean>
        Задает правила использования параметров безопасности, заданных параметром Sddl. Если параметр ExactMatch имеет значение True, параметры безопасности в параметре Sddl используются только для авторизации попыток 
доступа к URI, в точности соответствующему заданному параметром URI. Если параметр If ExactMatch имеет значение False, параметры безопасности в параметре Sddl используются для авторизации доступа к URI, которые начинаются
со строки, заданной параметром URI.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -FileName <String>
        Задает входной файл для обновления ресурса управления, заданного параметрами ResourceURI и SelectorSet.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -FileName (Plugin) <String>
        Задает имя файла подключаемого модуля операций. Любые переменные среды, добавленные в эту запись, при получении запроса будут расширены на контекст пользователя. Поскольку у разных пользователей могут быть разные версии одной и той же переменной среды, у разных пользователей могут быть разные подключаемые модули. Эта запись не может быть пустой и должна указывать на допустимый подключаемый модуль.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -HostName <String>
        Задает имя компьютера, на котором запущена служба WS-Management (WinRM).
        Значение должно быть полным доменным именем, символьной строкой IPv4 или IPv6 или подстановочным знаком.
        Поддерживаемые командлеты: Clear-Item, Get-Item, Set-Item
    -IdleTimeOut <Unsigned Long Integer>
        Задает максимальное время в миллисекундах, в течение которого удаленная оболочка будет оставаться открытой при отсутствии в ней пользовательской активности. По истечении заданного времени удаленная оболочка 
автоматически удаляется. Можно указать любое значение от 0 до 2147483647. 0 означает бесконечное время ожидания. Значение по умолчанию — 900000 (15 минут).
        
Поддерживаемые командлеты: Get-Item, Set-Item
    -IPv4Filter <String>
        Задает IPv4-адреса, которые могут использоваться прослушивателями. Допустимые значения:
        -- Если оставить параметр пустым, нельзя будет использовать никакие IPv4-адреса.
       -- Если ввести подстановочный знак (*), можно будет использовать любой IPv4-адрес.
        -- Если ввести список IP-адресов, можно будет использовать любой IP-адрес в заданных диапазонах. Разделяйте диапазоны запятой (,) и указывайте каждый диапазон в виде пары IPv4-адресов в десятичном формате,
разделенных дефисом (-). На первом месте в паре должно стоять меньшее число. Диапазоны рассматриваются как включительные.
        Примечание. Символьная строка IPv4 состоит из четырех разделенных точками десятичных чисел, каждое из которых лежит в диапазоне от 0 до 255. Пример: 192.168.0.0.

        Поддерживаемые командлеты: Clear-Item, Get-Item, Set-Item
    -IPv6Filter <String>
        Задает IPv6-адреса, которые могут использоваться прослушивателями. Допустимые значения:
        -- Если оставить параметр пустым, нельзя будет использовать никакие IPv6-адреса.
        -- Если ввести подстановочный знак (*), можно будет использовать любой IPv6-адрес.
        -- Если ввести список IP-адресов, можно будет использовать любой IP-адрес в заданных диапазонах. Разделяйте диапазоны запятой (,) и указывайте каждый диапазон в виде пары IPv6-адресов в шестнадцатеричном формате, 
разделенных дефисом (-). На первом месте в паре должно стоять меньшее число.  Диапазоны рассматриваются как включительные.

        Примечание. Символьная строка IPv6 заключается в квадратные скобки и содержит шестнадцатеричные числа, разделенные двоеточиями. Пример: [::1] или [3ffe:ffff::6ECB:0101].

        Поддерживаемые командлеты: Clear-Item, Get-Item, Set-Item
    -Issuer <String>
        Задает имя центра сертификации, выдавшего сертификат.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Kerberos <Boolean>
        Позволяет клиентскому компьютеру использовать проверку подлинности Kerberos. Проверка подлинности Kerberos подразумевает взаимную проверку подлинности клиента и сервера с использованием сертификатов Kerberos.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -ListeningOn <String>
        Задает IP-адрес или все IP-адреса, по которым служба фактически ожидает передачи данных. Это значение выводится из элемента Address на основании фактических IP-адресов, связанных с прослушивателем. Значение IP-адреса
         должно быть записано в десятичном формате IPv4 или в шестнадцатеричном формате IPv6. Существует несколько записей ListeningOn; каждая запись начинается с " ListeningOn_". Пример:
           ListeningOn_1201550598
           ListeningOn_1973755898
           ListeningOn_1508953035
           ListeningOn_1560839940

        Поддерживаемые командлеты: Get-Item
    -MaxBatchItems <Unsigned Long Integer>
        Задает максимальное количество элементов, которое может быть использовано в ответе Pull. Можно указать любое значение от 1 до 4294967295.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -MaxConcurrentUsers <Unsigned Long Integer>
        Задает максимальное количество пользователей, могущих одновременно выполнять удаленные операции на одном и том же компьютере через удаленную оболочку. По достижении заданного предела новые подключения к оболочке будут отклоняться. Можно указать любое значение от 1 до 100.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -MaxEnvelopeSizekb <Unsigned Long Integer>
        Задает максимальный размер данных SOAP в килобайтах. Можно указать любое значение от 32 до 4294967295.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -MaxMemoryPerShellMB <Unsigned Long Integer>
        Задает максимальный общий объем памяти, который может быть выделен активной удаленной оболочке и всем ее дочерним процессам. Можно задать любое значение от 0 до 2147483647. 0 означает, что объем выделяемой удаленными операциями памяти ограничен только доступной виртуальной памятью. Значение по умолчанию — 0.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -MaxProcessesPerShell <Unsigned Long Integer>
        Задает максимальное количество процессов, которое разрешается запускать любой операции оболочки. Можно указать любое значение от 0 до 2147483647. 0 означает неограниченное количество процессов. По умолчанию ограничение составляет пять процессов на оболочку.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -MaxProviderRequests <Unsigned Long Integer>
        Задает максимальное количество одновременных запросов, допускаемое службой. Можно указать любое значение от 1 до 4294967295. Ограничение применяется по поставщику.

        Примечание. Это значение считается устаревшим, и использовать его не следует.

        Поддерживаемые командлеты: Get-Item
    -MaxShellsPerUser <Unsigned Long Integer>
        Задает максимальное количество оболочек, которое любой пользователь может одновременно удаленно открыть на одном компьютере. Если этот параметр политики включен, по достижении заданного предела пользователь не сможет открывать новые удаленные оболочки. Если этот параметр политики отключен или не задан, по умолчанию ограничение составляет две удаленных оболочки на пользователя. Можно указать любое значение от 0 до 2147483647. 0 означает неограниченное количество оболочек.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -MaxTimeoutMs <Unsigned Long Integer>
        Задает максимальное время ожидания в миллисекундах, которое может использоваться для любого запроса, за исключением запросов Pull. Можно указать любое значение от 500 до 4294967295.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Name <String>
        Задает отображаемое имя для сеанса WS-Management. Это имя можно использовать для идентификации сеанса при использовании других командлетов, например Get-PSSession или Enter-PSSession. Имя не обязательно должно быть уникальным в рамках компьютера или текущего сеанса.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Name (Plugin) <String>
        Задает отображаемое имя для подключаемого модуля. Если подключаемый модуль возвратит ошибку, отображаемое имя будет включено в XML-данные об ошибке, возвращаемые клиентскому приложению. Имя не зависит от локали.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Negotiate <Boolean>
        Позволяет клиентскому компьютеру использовать проверку подлинности по схеме Negotiate (проверка подлинности с согласованием). При проверке подлинности с согласованием клиент отправляет серверу запрос на проверку подлинности. Сервер определяет, какой протокол использовать — Kerberos или NTLM. Протокол Kerberos выбирается для проверки подлинности учетной записи домена, а NTLM — для учетных записей локального компьютера. В случае пользователя домена имя пользователя должно быть указано в формате "домен\имя_пользователя". В случае локального пользователя на серверном компьютере имя пользователя должно быть указано в формате "имя_сервера\имя_пользователя".

        Поддерживаемые командлеты: Get-Item, Set-Item
    -NetworkDelayMs <Unsigned Long Integer>
        Задает дополнительное время ожидания клиента в миллисекундах для поправки на сетевую задержку. Можно указать любое значение от 500 до 4294967295.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Password <String>
        Задает пароль для локальной учетной записи или учетной записи домена. Этот параметр не может иметь значение NULL.
        Клиентский компьютер может указывать учетные данные, которые будут использоваться при создании оболочки на компьютере. В случае пользователя домена имя пользователя должно быть указано в формате "домен\имя_пользователя". В случае локального пользователя на серверном компьютере имя пользователя должно быть указано в формате "имя_сервера\имя_пользователя".

        При использовании этой структуры должны быть заполнены и поле имени пользователя, и поле пароля. Ее можно использовать в сочетании со схемами проверки подлинности Basic (обычная), Digest (дайджест-), Negotiate (с согласованием) и Kerberos. При использовании проверки подлинности по схеме Basic или Digest клиент должен явно указывать учетные данные.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Plugin <>
        Подключаемые модули WS-Management представляют собой собственные библиотеки динамической компоновки (DLL) для подключения к службам WS-Management и расширения их функциональности. API подключаемых модулей WS-Management предоставляет функциональность, позволяющую пользователю разрабатывать подключаемые модули, путем реализации определенных API для поддерживаемых URI ресурсов и операций. После настройки подключаемых модулей под службу WS-Management (WinRM) или службы IIS подключаемые модули загружаются на узел WS-Management или узел служб IIS соответственно. Удаленные запросы передаются входным точкам этих подключаемых модулей для выполнения операций.

        Поддерживаемые командлеты: New-Item, Remove-Item
    -Port <Unsigned Short Integer>
        Задает TCP-порт, для которого создан данный прослушиватель. Можно указать любое значение от 1 до 65535.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Resource <String>
        Задает конечную точку, которая представляет определенный тип операции управления или значение. Служба предоставляет один или несколько ресурсов, и некоторые ресурсы могут иметь более одного экземпляра. Ресурс управления сходен с классом WMI или с таблицей базы данных, а экземпляр сходен с экземпляром класса или со строкой в таблице. Например, класс Win32_LogicalDisk представляет собой ресурс, а Win32_LogicalDisk="C:\"
 — конкретный экземпляр ресурса.
        Универсальный идентификатор ресурса (URI) состоит из префикса и пути к ресурсу. Пример:
        http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
        http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NumericSensor

        Поддерживаемые командлеты: Get-Item, Set-Item
    -ResourceURI <String>
        Задает универсальный идентификатор ресурса (URI), который идентифицирует конкретный тип ресурса, например диск или процесс, на компьютере.
        URI состоит из префикса и пути к ресурсу. Пример:
        http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_LogicalDisk
        http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NumericSensor

        Поддерживаемые командлеты: Get-Item
    -RootSDDL <String>
        Задает строку в формате языка определения дескрипторов безопасности (SDDL) для записи управления доступом. Эта строка определяет параметры безопасности, используемые для авторизации доступа к заданному URI ресурса.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -SDKVersion <String>
        Задает версию комплекта SDK подключаемых модулей WS-Management SDK.  Единственным допустимым значением является 1.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Shell <String>
        Задает строку процесса для пользовательской оболочки. Можно указывать переменные среды.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -ShellTimeout <Unsigned Long Integer>
        Задает время до закрытия оболочки при отсутствии активности.  Укажите время ожидания в миллисекундах.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Subject <String>
        Задает объект, идентифицируемый сертификатом.

        Поддерживаемые командлеты: Get-Item
    -SupportsOptions <Boolean>
        Указывает, поддерживает ли подключаемый модуль использование параметров, передаваемых в заголовке wsman:OptionSet сообщения запроса.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Transport <String>
        Задает протокол, используемый для отправки и получения запросов и ответов протокола WS-Management. Возможные значения — HTTP и HTTPS.
        Примечание. Значение параметра Transport задается при создании прослушивателя.

        Поддерживаемые командлеты: Get-Item
    -TrustedHosts <String>
        Перечень удаленных компьютеров, подключенных к локальному компьютеру посредством доверительного сетевого соединения.  Разрешается отправлять запросы на содержащиеся в этом списке компьютеры, когда используемые схема проверки подлинности и протокол не позволяют клиенту проверить подлинность службы (например, при проверке подлинности по схеме Basic по протоколу HTTP).

        Если сервер присутствует в списке TrustedHosts, клиент не проверяет подлинность удостоверения сервера, что делает его уязвимым для атак "злоумышленник в середине".  Вносить имена узлов в этот список следует только ко
        гда сетевое соединение защищено от пользователей-злоумышленников, например в среде домена.

        Указываемые имена узлов могут быть DNS-именами или IP-адресами. Допустимы следующие значения.
        -- пустой список: доверенные узлы отсутствуют.
        -- Звездочка "*": все узлы являются доверенными.
        Список шаблонов имен узлов, разделенных запятыми (,). Шаблон имени узла должен иметь следующий формат:
        -- Строка, которая начинается с подстановочного знака (*). Строка должна содержать не менее двух символов. Все узлы с заданным суффиксом являются доверенными.
        -- Строка, которая заканчивается подстановочным знаком (*). Строка должна содержать не менее двух символов. Все узлы с заданным префиксом являются доверенными.
        -- Все доверенные имена NetBIOS (например, строки, не содержащие точки).
        -- Строка без подстановочного знака (*): узел, имя которого совпадает со строкой, является доверенным.

        Примечание. При задании значения параметра TrustedHosts с помощью командлета Set-Item командлет Set-Item поддерживает дополнительный параметр -Concatenate.  Приведенный ниже пример добавляет новое значение (*.domain2 .com) к старым значениям, сохраненным в параметре TrustedHost:
          Set-Item .\TrustedHosts *.domain2.com -Concatenate -Force

        Поддерживаемые командлеты: Clear-Item, Get-Item, Set-Item
    -URI <String>
        Определяет URI, доступ к которому авторизуется на основании значения параметра Sddl.


        Поддерживаемые командлеты: Get-Item
    -URLPrefix <String>
        Префикс URL-адреса, по которому принимаются HTTP- или HTTPS-запросы. Представляет собой строку, содержащую только символы a-z, A-Z, 9-0, знак подчеркивания (_) и обратную косую черту (/). Строка не должна начинаться с обратной косой черты (/) или заканчиваться ей. Например, если имя компьютера — "SampleComputer", клиент WS-Management будет указывать в адресе назначения http://SampleMachine/URLPrefix.

        Поддерживаемые командлеты: Clear-Item, Get-Item, Set-Item
    -UserName <String>
        Задает имя пользователя для локальной учетной записи или учетной записи домена. Этот параметр не может иметь значение NULL.
        Клиент может указывать учетные данные, которые будут использоваться при создании оболочки на компьютере. В случае учетной записи домена имя пользователя должно быть указано в формате "домен\имя_пользователя". В случае локальной учетной записи на серверном компьютере имя пользователя должно быть указано в формате "имя_сервера\имя_пользователя".

        При использовании этой структуры должны быть заполнены и поле имени пользователя, и поле пароля. Ее можно использовать в сочетании со схемами проверки подлинности Basic (обычная), Digest (дайджест-), Negotiate (с согласованием) и Kerberos. При использовании проверки подлинности по схеме Basic или Digest клиент должен явно указывать учетные данные.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -Value <String>
        Задает значение параметра инициализации, который представляет собой предназначенное для данного подключаемого модуля значение, используемое для задания параметров конфигурации.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -XMLRenderingType <String>
        Задает формат, в котором XML-данные передаются подключаемым модулям посредством объекта WSMAN_DATA. Допустимые значения:
        Text: входящие XML-данные содержатся в структуре WSMAN_DATA_TYPE_TEXT, которая представляет XML в виде буфера памяти PCWSTR.
        XMLReader: входящие XML-данные содержатся в структуре WSMAN_DATA_TYPE_WS_XML_READER, которая представляет XML в виде объекта XmlReader, определенного в файле заголовка WebServices.h.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -xmlns <String>
        Строка, задающая унифицированное имя ресурса (URN), которое однозначно определяет пространство имен.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -lang <String>
        Строка, задающая язык или язык и регион, где язык и регион разделены дефисом.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -HTTP <Short Integer>
        Задает порт, используемый клиентом для подключений по протоколу HTTP. По умолчанию для HTTP-подключений используется порт 80. Можно указать любое значение от 1 до 65535.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -HTTPS <Short-Integer>
        Задает порт, используемый клиентом для подключений по протоколу HTTPS. По умолчанию для HTTPS-подключений используется порт 443. Можно указать любое значение от 1 до 65535.

        Поддерживаемые командлеты: Get-Item, Set-Item
    -MaxShellRunTime <Unsigned Long Integer>
        Примечание. Это значение считается устаревшим и более не используется.

        Поддерживаемые командлеты: Get-Item
    -MaxShellRunTime <Unsigned Long Integer>
        Примечание. Это значение считается устаревшим, и использовать его не следует.

        Поддерживаемые командлеты: Get-Item

                                           проверка соединения с серверами и компьютерами
PS C:\Users\login> Test-Connection pssrv01
PS C:\Users\login>


 Например, следующая команда получает список компьютеров
    из файла Servers. txt, а затем устанавливает тип запуска "Авто"
    для службы WinRM на всех компьютерах.
    C:\PS> $servers = get-content servers. txt
    C:\PS>  set-service  WinRM  -computername  $servers   -startuptype Automatic
                                                       как на локальной так и на удаленной системе
Invoke-Command

PS C:\Users\login>set-location \;clear
PS C:\>Invoke-Command -ComputerName..... -ScriptBlock{get-service W*}
                                     удаленное выполнение команд на нескольких компьютерах
PS C:\>Invoke-Command -ComputerName.....1, ...........2, ...........3,   -ScriptBlock{get-service W*}
или создаем сессии от компа-рабмаш до нескольких серверов-открыть сессию
PS C:\>New-PSSession ........(computername1)
PS C:\>Get-PSSession
сессия по идентификатору
PS C:\>Get-PSSession -id 1
добавляем переменную(сессия в переменной)
PS C:\>$s1=Get-PSSession -id 1
PS C:\>Invoke-Command -Session $s1 -ScriptBlock{get-service W*}
можно сразу создать переменную со второй сессией, например
PS C:\>$s2=New-PSSession ........(computername2)
PS C:\>Get-PSSession
или
PS C:\>$s2=New-PSSession ........(computername2)
PS C:\>Enter_PSSession $s2
..................
любая из этих команд закрывает сессию
PS C:\>Remove-PSSession -id 1
 C:\PS>get-pssession | remove-pssession                              -если есть сесии | закрыть сессии
 C:\PS> remove-pssession -session (get-pssession)
 C:\PS> $s = get-pssession
 C:\PS> remove-pssession -session $s".

  Описание
  -----------
  Эта функция удаляет все сеансы PSSession в текущем сеансе. После добавления этой функции в профиль Windows PowerShell для удаления всех сеансов достаточно будет ввести "endpss".
 C:\PS>function EndPSS { get-pssession | remove-pssession }
идентификаторы открывающихся сессий плюсуются, и лучше ссылаться на имя компьютера,а именно
C:\PS> remove-pssession -ComputerName.....1
                                                                                                      Фоновые задания

КОМАНДЛЕТЫ ДЛЯ РАБОТЫ С ФОНОВЫМИ ЗАДАНИЯМИ 2.0
Get-Job -	Получает фоновые задания Windows PowerShell. активные в текущем сеансе.
Receive-Job - Получает результаты фоновых заданий Windows PowerShell в текущем сеансе.
Remove-Job - Удаляет фоновое задание Windows PowerShell.
Start-Job - Запускает фоновое задание Windows PowerShell.
Stop-Job - Останавливает фоновое задание Windows PowerShell.
Wait-Job - Отключает командную строку до завершения выполнения одного или нескольких фоновых заданий Windows PowerShell, запущенных в этом сеансе.

КОМАНДЛЕТЫ ДЛЯ РАБОТЫ С ФОНОВЫМИ ЗАДАНИЯМИ 3.0
Resume-job
Suspend-job

PS C:\Windows\system32> Start-Job -ScriptBlock {get-service}
Id              Name            State      HasMoreData     Location             Command
--              ----            -----      -----------     --------             -------
1               Job1            Running    True            localhost            get-service
PS C:\Windows\system32> Start-Job P:\скрипты_проект\power_scripts\MySVC.ps1
Id              Name            State      HasMoreData     Location             Command
--              ----            -----      -----------     --------             -------
3               Job3            Running    True            localhost            clear...
PS C:\Windows\system32>Test-Connection baltazar -AsJob
................

                       АЛЬТЕРНАТИВНЫЙ СПОСОБ ЗАПУСКА ФОНОВЫХ ЗАДАНИЙ 2.0
                                               Комадлеты поддерживающие ключ “-AsJob”:
•  Invoke-Сommand
•  Get-WmiObject
•   Invoke-WmiMethod
•   Remove WmiObjeсt
•   Set-Wmilnstance
•   Test-Connection
•   Restart-Computer
•   Stop-Computer

Get-Job -	Получает фоновые задания Windows PowerShell. активные в текущем сеансе.

запуск фонового задания в скрипт- блоке Start-Job -ScriptBlock {get-service....}

PS C:\Windows\system32> Start-Job -ScriptBlock {get-service}
Id              Name            State      HasMoreData     Location             Command
--              ----            -----      -----------     --------             -------
1               Job1            Running    True            localhost            get-service
PS C:\Windows\system32> Start-Job P:\скрипты_проект\power_scripts\MySVC.ps1
Id              Name            State      HasMoreData     Location             Command
--              ----            -----      -----------     --------             -------
3               Job3            Running    True            localhost            clear...
PS C:\Windows\system32> get-job
Id              Name            State      HasMoreData     Location             Command
--              ----            -----      -----------     --------             -------
1               Job1            Completed  True            localhost            get-service
3               Job3            Completed  True            localhost            clear...
PS C:\Windows\system32>

  HasMoreData-дополнительная информация
просмотр дополнительной инфомации рекомендуется с ключом -keep, тк вторичный вызов без ключа изменяет столбец HasMoreData
PS C:\Windows\system32>Receive-job -Id 1 _keep

                                Stop-Job - Останавливает фоновое задание Windows PowerShell.
>Stop-Job -id1
>get-Job                                   проверили остановку фонового задания
Wait-Job - Отключает командную строку до завершения выполнения одного или нескольких фоновых заданий, длинный сценарий, но необходимо дождатьсяего выполнения
 Start-Job .\.............ps1
>get-Job    
>wait-Job    -id1                 строка выкл до завершения сценария
                                Remove-Job - Удаляет фоновое задание Windows PowerShell.
> Remove-Job -name Job*           удалили все фоновые задания
>get-Job                                   проверили остановку фонового задания


                                                     Восстановление системы при помощи Windows PowerShell 2.0

                                        КОМАНДЛЕТЫ ДЛЯ РАБОТЫ С ТОЧКАМИ ВОССТАНОВЛЕНИЯ СИСТЕМЫ
Enable-ComputerRestore - Включает функцию восстановления системы на
указанном диске файловой системы.
Disable-ComputerRestore - Отключает функцию восстановления системы на
указанном диске файловой системы.
Get-ComputerRestorePoint - Получает точки восстановления системы на
локальном компьютере.
Checkpoint-Computer- Создает точку восстановления системы на локальном компьютере.
Restore-Computer - Запускает восстановление системы на локальном компьютере.

PS C:\Windows\system32> set-location \ ; clear-history



                                          попытка проверить точку восстановления
PS C:\> Enable-ComputerRestore -Drive "C:\"
PS C:\> Get-ComputeRrestorePoint
PS C:\>                                   ее нет
создаем
Checkpoint-Computer -Description "before install"


PS C:\> Checkpoint-Computer -Description "before install"
PS C:\> Get-ComputerRestorePoint
CreationTime           Description                    SequenceNumber    EventType         RestorePointType
------------           -----------                    --------------    ---------         ----------------
02.04.2016 1:20:47     before install                 667               BEGIN_SYSTEM_C... APPLICATION_INSTALL
PS C:\>
чтобы система не переписала точку восстановления во время установки по, отключаем
PS C:\> Disable-ComputerRestore -Drive "C:\"
PS C:\> Get-ComputerRestorePoint
откатываемся на нашу точку восстановления
PS C:\> Restore-Computer -RestorePoint 667

УСТАНОВКА WINDOWS POWERSHELL 2.0 HA SERVER CORE

ПРОЦЕСС УСТАНОВКИ
Компоненты:
.net Framework 2.0
NetFx2-ServerCore
Windows PowerShell
MicrosoftWindowsPowerShell

2-я комстрока на удаленном сервере SERVER CORE щелкнуть-активное окно
>taskmgr &cls
окно
new task                              - ok
окно
cmd                                      -ok
список доступных нам компонентов
oclist
установка
ocsetup NetFx2-ServerCore
oclist
ocsetup MicrosoftWindowsPowerShell
oclist
cd C:\Winsows\System32\WindowsPowerShell\v1.0\
dir /b
dir /b Modules
C:\Winsows\System32\WindowsPowerShell\v1.0>PowerShell.exe
-------------------------------



                                        Арифместические действия в Windows PowerShell 2.0


clear
Write-Host "Сложение"
''
Write-Host "Числа"
$a=5
$b=7
$c=$a+$b
Write-Host $a -nonewline
Write-Host " + " -nonewline
Write-Host $b -nonewline
Write-Host " = " -nonewline
Write-Host $c -nonewline
''
''
Write-Host "Числа"
$a=5
$b=7
$a=$a+$b
write-host "a + b =" $a
''
''
Write-Host "Числа"
$a=7
$b=6
$a-=$b
Write-Host "a - b =" $a
''
''
Write-Host "Приращение на 1"
$a=25
$b=12
$z=1
$a=$a+1
--$b
$z++
Write-Host "a + 1 =" $a
write-host "b - 1 =" $b
write-host "z + 1 =" $z
''
''
Write-Host "Массивы"
''
$a=(3,4,5)
$b=(22,11)
$c=$a+$b
Write-Host $a -nonewline
Write-Host " + " -nonewline
Write-Host $b -nonewline
Write-Host " = " -nonewline
Write-Host $c -nonewline
''
''
Write-Host "Умножение"
''
Write-Host "Числа"
$a=5
$b=16
$c=$a*$b
Write-Host $a "*" $b "=" $c

Write-Host "Строки"
$a="ps"
$b=3
$c=$a*$b
Write-Host $a "*" $b "=" $c
''
''
Write-Host "Массивы"
$a=(1,2,3,5)
$b=4
$c=$a*$b
Write-Host $a "*" $b "=" $c
''
''
Write-Host "Деление"
''
Write-Host "Числа"
$a=5
$b=16
$c=$a/$b
Write-Host $a "/" $b "=" $c
''
''
Write-Host "Целочисленное деление"
''
Write-Host "Числа"
$a=5
$b=16
$c=$a%$b
Write-Host $a "%" $b "=" $c
-------------------------------------------------
Сложение

Числа
5 + 7 = 12

Числа
a + b = 12


Числа
a - b = 1


Приращение на 1
a + 1 = 26
b - 1 = 11
z + 1 = 2


Массивы

3 4 5 + 22 11 = 3 4 5 22 11

Умножение

Числа
5 * 16 = 80
Строки
ps * 3 = pspsps


Массивы
1 2 3 5 * 4 = 1 2 3 5 1 2 3 5 1 2 3 5 1 2 3 5


Деление

Числа
5 / 16 = 0,3125


Целочисленное деление

Числа
5 % 16 = 5


____________________________________________________________________________________

                                                 Сравнение чисел в Windows PowerShell 2.0.Full


               ОПЕРАТОРЫ СРАВНЕНИЯ
Действие	                         Оператор
Проверка равенства	              -eq
Проверка неравенства	              -ne
Меньше	                                                  -lt
Больше	                                                  -gt
Меньше или равно	                                -le
Больше или равно	                                -ge
                                                   

clear-host
write-host "Сравнение чисел"
write-host "переменные"
#переменные
$n1=20
$n2=25
''
write-host "n1 = " $n1
write-host "n2 = " $n2
''
write-host "Проверка равенства"
write-host "переменные"
$n1=20
$n2=25
write-host "n1 = " $n1
write-host "n2 = " $n2
''
#-eq
write-host "n1 = n2 : "($n1 -eq $n2)
write-host "n1 = n1  "($n1 -eq $n1)
''
''
write-host "Проверка неравенства"
write-host "переменные"
$n1=20
$n2=25
write-host "n1 = " $n1
write-host "n2 = " $n2
''
#-ne
write-host "n1 >< n2 : "($n1 -ne $n2)
write-host "n1 >< n1  "($n1 -ne $n1)
''
''
write-host "Проверка меньшинства"
write-host "переменные"
$n1=20
$n2=25
write-host "n1 = " $n1
write-host "n2 = " $n2
''
#-lt
write-host "n1 < n2 : "($n1 -lt $n2)
write-host "n1 < n1  "($n1 -lt $n1)
''
''
write-host "Проверка большинства"
write-host "переменные"
$n1=20
$n2=25
write-host "n1 = " $n1
write-host "n2 = " $n2
''
#-gt
write-host "n1 > n2 : "($n1 -gt $n2)
write-host "n1 > n1  "($n1 -gt $n1)
''
''
write-host "Проверка равенства"
write-host "переменные"
$n1=20
$n2=25
write-host "n1 = " $n1
write-host "n2 = " $n2
''
#-le
write-host "n1 <= n2 : "($n1 -le $n2)
write-host "n1 < =n1  "($n1 -le $n1)
''
''
write-host "Проверка меньше или равно"
write-host "переменные"
$n1=20
$n2=25
write-host "n1 = " $n1
write-host "n2 = " $n2
''
#-ne
write-host "n1 >= n2 : "($n1 -ge $n2)
write-host "n1 >= n1  "($n1 -ge $n1)


--------------------------------
Сравнение чисел
переменные

n1 =  20
n2 =  25

Проверка равенства
переменные
n1 =  20
n2 =  25

n1 = n2 :  False
n1 = n1   True


Проверка неравенства
переменные
n1 =  20
n2 =  25

n1 >< n2 :  True
n1 >< n1   False


Проверка меньшинства
переменные
n1 =  20
n2 =  25

n1 < n2 :  True
n1 < n1   False


Проверка большинства
переменные
n1 =  20
n2 =  25

n1 > n2 :  False
n1 > n1   False


Проверка равенства
переменные
n1 =  20
n2 =  25

n1 <= n2 :  True
n1 < =n1   True


Проверка меньше или равно
переменные
n1 =  20
n2 =  25

n1 >= n2 :  False
n1 >= n1   True

____________________________________________________________________________________
ОПЕРАТОРЫ СРАВНЕНИЯ СТРОК
Действие	Оператор

Проверка вхождения	(значение)
-eq
 -like 
-match
Проверка вхождения прочих строк	(выход массив значений)
-ne 
-notlike 
-notmatch
Проверка вхождения	(булево:False\True)
-contains
Проверка не вхождения	
-notcontains
Замена значений	(выход массив значений)
-replace

clear-host
#определение массивов
$t1="Koval","Irina","Nicolaevna"
$t2="Nicolaevna"
$t3="Nicolaev"                                                   !!!внимание выход содержит!!!
$t4="Nicolaevovna"
$n1=5,10,15,20,25,30,35,40,45,50
$n2=25
#
#
write-host "переменные"
''
write-host "t1=$t1"
write-host "t2=$t2"
write-host "t3=$t3"
write-host "t4=$t4"
write-host "n1=$n1"
write-host "n2=$n2"
''
''
write-host "проверка вхождения"
''
write-host "строка $t1 содержит $t2 :"

$t1 -eq $t2
$t1 -like $t2
$t1 -match $t2
$t1 -match $t3                                !!!внимание выход содержит!!!
$t1 -match $t4

write-host "строка $n1 содержит $n2 :"
$n1 -like $n2
''
''
write-host "проверка вхождения"
write-host "других строк"
write-host "строка $t1 содержит, кроме $t2 :"

$t1 -ne $t2
$t1 -notlike $t2
$t1 -notmatch $t2
$t1 -notmatch $t3
write-host "строка $n1 содержит, кроме $n2 :"
$n1 -notmatch  $n2
''
''
write-host "проверка вхождения"
write-host "строка $t1 содержит $t2 :"
$t1 -contains $t2
write-host "строка $t1 содержит $t3 :"
$t1 -contains $t3
write-host "$n1 содержит $n2 :"
$n1 -contains  $n2
''
''
write-host "проверка не вхождения"
write-host "строка $t1 не содержит $t2 :"
$t1 -notcontains $t2
write-host "строка $t1 не содержит $t3 :"
$t1 -notcontains $t3
write-host "$n1 содержит не $n2 :"
$n1 -notcontains  $n2
''
''
write-host "замена значений"
write-host "если в строке $t1"
write-host "содержится $t4"
write-host "заменитьего на $t2"
$t1 -replace $t4, $t2

переменные

t1=Koval Irina Nicolaevna
t2=Nicolaevna
t3=Nicolaev
t4=Nicolaevovna
n1=5 10 15 20 25 30 35 40 45 50
n2=25


проверка вхождения

строка Koval Irina Nicolaevna содержит Nicolaevna :
Nicolaevna
Nicolaevna
Nicolaevna                                                               !!!внимание выход содержит"Nicolaev"!!!
Nicolaevna
строка 5 10 15 20 25 30 35 40 45 50 содержит 25 :
25


проверка вхождения
других строк
строка Koval Irina Nicolaevna содержит, кроме Nicolaevna :
Koval                                                         (выход массив значений)
Irina
Koval
Irina
Koval
Irina
Koval
Irina
строка 5 10 15 20 25 30 35 40 45 50 содержит, кроме 25 :
5
10
15
20
30
35
40
45
50


проверка вхождения
строка Koval Irina Nicolaevna содержит Nicolaevna :
True
строка Koval Irina Nicolaevna содержит Nicolaev :
False
5 10 15 20 25 30 35 40 45 50 содержит 25 :
True


проверка не вхождения
строка Koval Irina Nicolaevna не содержит Nicolaevna :
False
строка Koval Irina Nicolaevna не содержит Nicolaev :
True
5 10 15 20 25 30 35 40 45 50 содержит не 25 :
False


замена значений
если в строке Koval Irina Nicolaevna
содержится Nicolaevovna
заменитьего на Nicolaevna
Koval                                     (выход массив значений)
Irina
Nicolaevna

____________________________________________________________________________________
PS C:\Windows\system32> help -name *Measure-Object*

ИМЯ
    Measure-Object

ОПИСАНИЕ
    Рассчитывает числовые свойства объектов, а также количество знаков, слов и строк в строковых объектах, например в текстовых файлах.


СИНТАКСИС
    Measure-Object [-Average] [-Maximum] [-Minimum] [-Sum] [[-Property] <string[]>] [-InputObject <psobject>] [<CommonParameters>]

    Measure-Object [-Character] [-IgnoreWhiteSpace] [-Line] [-Word] [[-Property] <string[]>] [-InputObject <psobject>] [<CommonParameters>]


ОПИСАНИЕ
    Командлет Measure-Object вычисляет значения свойств объектов определенного типа. Measure-Object выполняет измерения трех типов в зависимости от параметров команды.
    Командлет Measure-Object выполняет вычисления, связанные со свойствами объектов. Он позволяет подсчитывать объекты, а также находить минимальные, максимальные, суммарные и средние числовые значения. Для текстовых объекто
    в он позволяет подсчитывать число строк, слов и знаков.


ССЫЛКИ ПО ТЕМЕ
    Online version: http://go.microsoft.com/fwlink/?LinkID=113349
    Compare-Object
    ForEach-Object
    Group-Object
    New-Object
    Select-Object
    Sort-Object
    Tee-Object
    Where-Object

ЗАМЕЧАНИЯ
    Для просмотра примеров введите: "get-help Measure-Object -examples".
    Для получения дополнительных сведений введите: "get-help Measure-Object -detailed".
    Для получения технических сведений введите: "get-help Measure-Object -full".

PS C:\Windows\system32> get-help Measure-Object -examples

ИМЯ
    Measure-Object

ОПИСАНИЕ
    Рассчитывает числовые свойства объектов, а также количество знаков, слов и строк в строковых объектах, например в текстовых файлах.

    -------------------------- ПРИМЕР 1 --------------------------

    C:\PS>get-childitem | measure-object


    Описание
    -----------
    Эта команда определяет число файлов и папок в текущем каталоге.

    -------------------------- ПРИМЕР 2 --------------------------

    C:\PS>get-childitem | measure-object -property length -minimum -maximum -average


    Описание
    -----------
    Эта команда отображает минимальный, максимальный, суммарный и средний размер всех файлов в текущем каталоге.

    -------------------------- ПРИМЕР 3 --------------------------

    C:\PS>get-content C:\test.txt | measure-object -character -line -word


    Описание
    -----------
    Эта команда отображает число знаков, слов и строк в файле Text.txt.

    -------------------------- ПРИМЕР 4 --------------------------

    C:\PS>get-process | measure-object -property workingset -minimum -maximum -average


    Описание
    -----------
    Эта команда отображает минимальный, максимальный и средний размер всех рабочих наборов процессов на компьютере.

    -------------------------- ПРИМЕР 5 --------------------------

    C:\PS>import-csv d:\test\serviceyrs.csv | measure-object -property years -minimum -maximum -average


    Описание
    -----------
    Команда вычисляет среднее время работы сотрудников в компании.

    ServiceYrs.csv — это CSV-файл, содержащий номера сотрудников и время работы каждого из сотрудников в годах. Первая строка таблицы представляет собой строку заголовков "EmpNo, Years".

    При импорте файла с помощью командлета Import-Csv создается объект PSCustomObject, имеющий свойства-примечания EmpNo и Years. Командлет Measure-Object позволяет вычислить значения этих свойств, как для любых других свойств объекта.

    -------------------------- ПРИМЕР 6 --------------------------

    C:\PS>get-childitem | measure-object -property psiscontainer -max -sum -min -average

    Count    : 126
    Average  : 0.0634920634920635
    Sum      : 8
    Maximum  : 1
    Minimum  : 0
    Property : PSIsContainer


    Описание
    -----------
    В этом примере показано, что командлет Measure-Object позволяет измерять значения типа Boolean. В данном случае используется свойство PSIsContainer типа Boolean для измерения количества папок (файлов vs.) в текущем каталоге.
__________________________________________________________


                                                    ПОДСТАНОВОЧНЫЕ ЗНАКИ
Действие	Оператор	
Подстановка любой длины	                                                        *	
Подстановка одного символа                                                     ?	
Подстановка одного символа из заданного диапазона	[x-z]	
Подстановка одного символа из заданного набора	[xyz]	

--------------------------
выбрать все (*)  командлеты работающие с датой
PS C:\Windows\system32> get-command *date
CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Cmdlet          Get-Date                                                                                                 Get-Date [[-Date] <DateTime>] [-Year <Int32>] [-Month <Int32>] [-Day <Int32>] [-Hour <Int32>] [-Minu...
Cmdlet          Set-Date                                                                                                 Set-Date [-Date] <DateTime> [-DisplayHint <DisplayHintType>] [-Verbose] [-Debug] [-ErrorAction <Acti...

                                                                                                                 (в самом командлете get использовать * нельзя)

или 
PS C:\> get-command [a-z]et-[a-z][a-z]t?
CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Cmdlet          Get-Date                                                                                                 Get-Date [[-Date] <DateTime>] [-Year <Int32>] [-Month <Int32>] [-Day <Int32>] [-Hour <Int32>] [-Minu...
Cmdlet          Set-Date                                                                                                 Set-Date [-Date] <DateTime> [-DisplayHint <DisplayHintType>] [-Verbose] [-Debug] [-ErrorAction <Acti...
-----------------------

PS C:\Windows\system32> set-location \
PS C:\> $a ="Windows PowerShell 2.0"
PS C:\> $a -like "Windows"
False
PS C:\> $a -match "Windows"                       переменная внутри содержит "Windows"(не может начинаться со                                                                                                                   *, ставится в конце)
True
PS C:\>
------------------
вопросительный знак заменяется всеми возможными вариантами
PS C:\> get-command ?et-????

CommandType     Name                                                                                                     Definition
-----------     ----                                                                                                     ----------
Cmdlet          Get-Date                                                                                                 Get-Date [[-Date] <DateTime>] [-Year <Int32>] [-Month <Int32>] [-Day <Int32>] [-Hour <Int32>] [-Minu...
Cmdlet          Get-Help                                                                                                 Get-Help [[-Name] <String>] [-Path <String>] [-Category <String[]>] [-Component <String[]>] [-Functi...
Cmdlet          Get-Host                                                                                                 Get-Host [-Verbose] [-Debug] [-ErrorAction <ActionPreference>] [-WarningAction <ActionPreference>] [...
Cmdlet          Get-Item                                                                                                 Get-Item [-Path] <String[]> [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Force] ...
Function        Get-Verb                                                                                                 ...
Cmdlet          Set-Date                                                                                                 Set-Date [-Date] <DateTime> [-DisplayHint <DisplayHintType>] [-Verbose] [-Debug] [-ErrorAction <Acti...
Cmdlet          Set-Item                                                                                                 Set-Item [-Path] <String[]> [[-Value] <Object>] [-Force] [-PassThru] [-Filter <String>] [-Include <S...
PS C:\>
                                                                                            Логический операторы
PS C:\>get-help*logical*

Действие	                                                                Оператор
Логический оператор "И"	                                                       -and
Логический оператор "ИЛИ"	                                     -or
Логический оператор "ИСКЛЮЧАЮЩЕЕ ИЛИ"	                   -xor
Логический оператор "НЕ"	                                                      -not, !

ЛОГИЧЕСКИЙ ОПЕРАТОР "И"
Подстановочный символ: -and
Описание:
Возвращает TRUE, только если результатом
оценки условий обеих инструкций является
TRUE.	
ЛОГИЧЕСКИЙ ОПЕРАТОР "ИЛИ"

Подстановочный символ: -or
Описание:
Возвращает TRUE, если результатом оценки
условий хотя бы одной из двух инструкций
является TRUE.

ЛОГИЧЕСКИМ ОПЕРАТОР
"ИСКЛЮЧАЮЩЕЕ ИЛИ"
Подстановочный символ: -хог
Описание:
Возвращает TRUE, только если для одной
инструкции результатом оценки условия
является TRUE, а для другой - FALSE.

ЛОГИЧЕСКИМ ОПЕРАТОР "НЕ”
Подстановочный символ: -not, !
Описание:
Изменяет результат оценки условия
последующей инструкции на противоположный.
clear-host
write-host "логические операторы в"
write-host "Windows PowerShell 2.0"
''
''
write-host "логические и"
#-and
write-host "(5=5) и (7=7)- "-nonewline
(5-eq 5) -and (7-eq 7)
write-host "(5=7) и (7=7)- "-nonewline
(5-eq 7) -and (7-eq 7)
write-host "(5=5) и (7=5)- "-nonewline
(5-eq 5) -and (7-eq 5)
write-host "(5=7) и (7=5)- "-nonewline
(5-eq 7) -and (7-eq 5)
''
''
write-host "логические или"
#-or
write-host "(5=5) или (7=7)- "-nonewline
(5-eq 5)-or (7-eq 7)
write-host "(5=7) или (7=7)- "-nonewline
(5-eq 7)-or (7-eq 7)
write-host "(5=5) или (7=5)- "-nonewline
(5-eq 5)-or (7-eq 5)
write-host "(5=7) или (7=5)- "-nonewline
(5-eq 7)-or (7-eq 5)
''
''

write-host "ИСКЛЮЧАЮЩЕЕ ИЛИ"
#-xor
write-host "(5=5) или (7=7)- "-nonewline
(5-eq 5)-xor (7-eq 7)
write-host "(5=7) или (7=7)- "-nonewline
(5-eq 7)-xor (7-eq 7)
write-host "(5=5) или (7=5)- "-nonewline
(5-eq 5)-xor (7-eq 5)
write-host "(5=7) или (7=5)- "-nonewline
(5-eq 7)-xor (7-eq 5)
''
''
write-host "ЛОГИЧЕСКИМ ОПЕРАТОР НЕ"
#-not
write-host "(5><5) - "-nonewline
-not (5-eq 5)
write-host "(7><7)- "-nonewline
-not (7-eq 7)
write-host "(7><5)- "-nonewline
-not(7-eq 5)
write-host "(5><7) - "-nonewline
-not (5-eq 7)
''
''
#!
write-host "(5><5) - "-nonewline
!(5-eq 5)
write-host "(7><7)- "-nonewline
!(7-eq 7)
write-host "(7><5)- "-nonewline
!(7-eq 5)
write-host "(5><7) - "-nonewline
!(5-eq 7)
------------------------
логические операторы в
Windows PowerShell 2.0


логические и
(5=5) и (7=7)- True
(5=7) и (7=7)- False
(5=5) и (7=5)- False
(5=7) и (7=5)- False


логические или
(5=5) или (7=7)- True
(5=7) или (7=7)- True
(5=5) или (7=5)- True
(5=7) или (7=5)- False


ИСКЛЮЧАЮЩЕЕ ИЛИ
(5=5) или (7=7)- False
(5=7) или (7=7)- True
(5=5) или (7=5)- True
(5=7) или (7=5)- False


ЛОГИЧЕСКИМ ОПЕРАТОР НЕ
(5><5) - False
(7><7)- False
(7><5)- True
(5><7) - True


(5><5) - False
(7><7)- False
(7><5)- True
(5><7) - True

____________________________________________________________________________________

ТИПЫ ПЕРЕМЕННЫХ
Пользовательские переменные
Автоматические переменные
Привилегированные переменные


СПЕЦИФИКАЦИЯ ТИПОВ ПЕРЕМЕННЫХ
Data Type	Description	Example
[int]	Integer numbers	-273, -1, 0, 10, 42
[byte]	8-bit unsigned #	0, 1, ..., 254, 255
[boolean]	Boolean value	$false, $true
[char]	single character	a, b, с, 1, 2, 3, !, #
[string]	a string of characters	"hello, world"
[datetime]	point in time	April 1, 2008

перед переменной указывается в квадратных скобках ее тип
[int] $x = 6.626068e-34
[double] $h = 6.626068e-34
$k = [double] 1.3806504e-23
[char] 42
$fun = “string”
$numstring = [string] 42
$aster = [string] [char] 42

КОМАНДЛЕТЫ ДЛЯ РАБОТЫ С ПЕРЕМЕННЫМИ В WINDOWS POWERSHELL 2.0
Действие	                                                                Оператор
Вывод имен и значений переменных	                           Get-Variable
Объявление новой переменной	                           New-Variable
Объявление/модификация переменной	         Set-Variable
Удаление переменной	                                             Remove-Variable
Сброс значения переменной	                           Clear-Variable


                                                       ВЫВОД ИМЕН И ЗНАЧЕНИЙ ПЕРЕМЕННЫХ
Командлет: Get-Variable
Описание: Получает переменные, определенные
для текущей консоли.

PS C:\>get-variable
PS C:\>get-variable true
PS C:\>get-variable true -valueOnly

ОБЪЯВЛЕНИЕ НОВОЙ ПЕРЕМЕННОЙ
Командлет: New-Variable
Описание: Создает новую переменную.
PS C:\>New-Variable zz
PS C:\>New-Variable yy-value 75 -option readOnly
(переменная только для чтения, для изменения ключ force)

ОБЪЯВЛЕНИЕ/МОДИФИКАЦИЯ ПЕРЕМЕННОЙ
Командлет:
Описание:
Set-Variable

Задает значение переменной. Если
переменная с указанным именем не
существует, она создается.
PS C:\>Set-Variable -name zz -value 25
PS C:\>Set-Variable yy-value 80 -force

Удаление переменной	                                             
Командлет: Remove-Variable
Описание: удаляет переменную и ее значение
PS C:\>Remove-Variable -name zz -value 25
PS C:\>Remove-Variable yy -force

Сброс значения переменной	                           
Командлет:   Clear-Variable
Описание: Сброс значения переменной
PS C:\>Clear-Variable yy -force
--------------------------------------------------------------------------------------------
КОМАНДЛЕТЫ ДЛЯ РАБОТЫ С ПЕРЕМЕННЫМИ И ПЕРЕМЕННЫЕ В WINDOWS POWERSHELL 3.0
Сценарий
•	Инструменты
•	Запуск утилит сценариев и программ
•	Внутренние возможности

                                                  В WINDOWS 8 POWERSHELL 3.0
В Пуске нет, найти можно во Всех приложениях, значки переносим на раб стол и закрепляем.
                                                                     powershell_ise   В WINDOWS 8
Найти можно запустить поиск и набрать powershell_ise 
В нем появился Buildercommand со списком команд и их ключей,во втором окне скриптов подсказка появляется при наборе командлета и знака минус.
-------------------------
Windows PowerShell
(C) Корпорация Майкрософт, 2012. Все права защищены.
PS C:\User\...>ipconfig.exe
...
-----------------
PS C:\User\...>diskpart.exe       //права администратора

...
DISKPART>List disk
---------------
ком строка в  В WINDOWS 8 
PS C:\User\...>cmd.exe /c time /t
запуск браузера
PS C:\User\...>& 'C:\Program Files\Internet Explorer\iexplore.exe'  //2.0-5.0
получить айпиадрес
PS C:\User\...>Get-NetIPAdress                                                                      //3.0-5.0
посчитать кол-во командлетов
PS C:\User\...>$a=Get-Command; $a.Count                                        //2.0-5.0     435;994;
переход между дисками(это функция)
PS C:\User\...>D:                                                                                            //2.0-5.0
PS C:\User\...>C:
PS C:\User\...>f:
или
PS C:\User\...>set-location D:

просмотр текущей директории
PS C:\User\...>Get-Childitem                                                        //2.0-5.0
или
PS C:\User\...>ls
или
PS C:\User\...>dir
--------------------------------------
вывод командлета  в формате листа, а не таблицы(таблица по умолчанию)
PS C:\Windows\...> get-command -name get-date|format-list           //2.0-5.0
----------------------------------
PS C:\Windows\...> get-command -name start-dtc|format-list           //3.0-5.0
-----------------------------
центр обновления windows                                                               //2.0-5.0
PS C:\Windows\...> get-service -name *w*
PS C:\Windows\...> get-service -name wuauserv
PS C:\Windows\....> get-service -name wuauserv|format-list
----------------------------------------------------------
в табличной форме ввести набор командлетов с параметрами и указать для них значение
Переменная $PSDefaultParameterValues                                            //3.0-5.0

$PSDefaultParameterValues	
Командлет:параметр	Значение
Командлет:параметр	Значение
Командлет:параметр	Значение

в переменную ввели выбрать процессы по id со значением ххх
PS C:\Windows\....> $PSDefaultParameterValues["get-process:id"]   =xxx
при сл запуске командлета get-process, мы получим только выбранный ранее вариант, при введении других вариантов, запустится последний введенный

очистка переменной
PS C:\Windows\....>$PSDefaultParameterValues.Clear()
---------------------=======================------------------------------------===========================
PS C:\Windows\....>get-childitem -path WSMan:\Localhost


   WSManConfig: Microsoft.WSMan.Management\WSMan::localhost

Type            Name                           SourceOfValue   Value
----            ----                           -------------   -----
System.String   MaxEnvelopeSizekb                              500
System.String   MaxTimeoutms                                   60000
System.String   MaxBatchItems                                  32000
System.String   MaxProviderRequests                            4294967295
Container       Client
Container       Service
Container       Shell
Container       Listener
Container       Plugin
Container       ClientCertificate



PS C:\Windows\....> get-command -module*

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        Compress-Archive                                   1.0.0.0    Microsoft.PowerShell.Archive
Function        Configuration                                      1.1        PSDesiredStateConfiguration
Function        ConvertFrom-SddlString                             3.1.0.0    Microsoft.PowerShell.Utility
Function        Disable-DscDebug                                   1.1        PSDesiredStateConfiguration
Function        Disable-NetworkSwitchEthernetPort                  1.0.0.0    NetworkSwitchManager
Function        Disable-NetworkSwitchFeature                       1.0.0.0    NetworkSwitchManager
Function        Disable-NetworkSwitchVlan                          1.0.0.0    NetworkSwitchManager
Function        Disable-PSTrace                                    1.0.0.0    PSDiagnostics
Function        Disable-PSWSManCombinedTrace                       1.0.0.0    PSDiagnostics
Function        Disable-WSManTrace                                 1.0.0.0    PSDiagnostics
Function        Enable-DscDebug                                    1.1        PSDesiredStateConfiguration
Function        Enable-NetworkSwitchEthernetPort                   1.0.0.0    NetworkSwitchManager
Function        Enable-NetworkSwitchFeature                        1.0.0.0    NetworkSwitchManager
Function        Enable-NetworkSwitchVlan                           1.0.0.0    NetworkSwitchManager
Function        Enable-PSTrace                                     1.0.0.0    PSDiagnostics
Function        Enable-PSWSManCombinedTrace                        1.0.0.0    PSDiagnostics
Function        Enable-WSManTrace                                  1.0.0.0    PSDiagnostics
Function        Expand-Archive                                     1.0.0.0    Microsoft.PowerShell.Archive
Function        Export-ODataEndpointProxy                          1.0        Microsoft.PowerShell.ODataUtils
Function        Find-DscResource                                   1.0.0.1    PowerShellGet
Function        Find-Module                                        1.0.0.1    PowerShellGet
Function        Find-Script                                        1.0.0.1    PowerShellGet
Function        Format-Hex                                         3.1.0.0    Microsoft.PowerShell.Utility
Function        Get-DscConfiguration                               1.1        PSDesiredStateConfiguration
Function        Get-DscConfigurationStatus                         1.1        PSDesiredStateConfiguration
Function        Get-DscLocalConfigurationManager                   1.1        PSDesiredStateConfiguration
Function        Get-DscResource                                    1.1        PSDesiredStateConfiguration
Function        Get-FileHash                                       3.1.0.0    Microsoft.PowerShell.Utility
Function        Get-InstalledModule                                1.0.0.1    PowerShellGet
Function        Get-InstalledScript                                1.0.0.1    PowerShellGet
Function        Get-IseSnippet                                     1.0.0.0    ISE
Function        Get-LogProperties                                  1.0.0.0    PSDiagnostics
Function        Get-NetworkSwitchEthernetPort                      1.0.0.0    NetworkSwitchManager
Function        Get-NetworkSwitchFeature                           1.0.0.0    NetworkSwitchManager
Function        Get-NetworkSwitchGlobalData                        1.0.0.0    NetworkSwitchManager
Function        Get-NetworkSwitchVlan                              1.0.0.0    NetworkSwitchManager
Function        Get-PSRepository                                   1.0.0.1    PowerShellGet
Function        Import-IseSnippet                                  1.0.0.0    ISE
Function        Import-PowerShellDataFile                          3.1.0.0    Microsoft.PowerShell.Utility
Function        Install-Module                                     1.0.0.1    PowerShellGet
Function        Install-Script                                     1.0.0.1    PowerShellGet
Function        Invoke-AsWorkflow                                  1.0.0.0    PSWorkflowUtility
Function        New-DscChecksum                                    1.1        PSDesiredStateConfiguration
Function        New-Guid                                           3.1.0.0    Microsoft.PowerShell.Utility
Function        New-IseSnippet                                     1.0.0.0    ISE
Function        New-NetworkSwitchVlan                              1.0.0.0    NetworkSwitchManager
Function        New-PSWorkflowSession                              2.0.0.0    PSWorkflow
Function        New-ScriptFileInfo                                 1.0.0.1    PowerShellGet
Function        New-TemporaryFile                                  3.1.0.0    Microsoft.PowerShell.Utility
Function        Publish-Module                                     1.0.0.1    PowerShellGet
Function        Publish-Script                                     1.0.0.1    PowerShellGet
Function        Register-PSRepository                              1.0.0.1    PowerShellGet
Function        Remove-DscConfigurationDocument                    1.1        PSDesiredStateConfiguration
Function        Remove-NetworkSwitchEthernetPortIPAddress          1.0.0.0    NetworkSwitchManager
Function        Remove-NetworkSwitchVlan                           1.0.0.0    NetworkSwitchManager
Function        Restore-DscConfiguration                           1.1        PSDesiredStateConfiguration
Function        Restore-NetworkSwitchConfiguration                 1.0.0.0    NetworkSwitchManager
Function        Save-Module                                        1.0.0.1    PowerShellGet
Function        Save-NetworkSwitchConfiguration                    1.0.0.0    NetworkSwitchManager
Function        Save-Script                                        1.0.0.1    PowerShellGet
Function        Set-LogProperties                                  1.0.0.0    PSDiagnostics
Function        Set-NetworkSwitchEthernetPortIPAddress             1.0.0.0    NetworkSwitchManager
Function        Set-NetworkSwitchPortMode                          1.0.0.0    NetworkSwitchManager
Function        Set-NetworkSwitchPortProperty                      1.0.0.0    NetworkSwitchManager
Function        Set-NetworkSwitchVlanProperty                      1.0.0.0    NetworkSwitchManager
Function        Set-PSRepository                                   1.0.0.1    PowerShellGet
Function        Start-Trace                                        1.0.0.0    PSDiagnostics
Function        Stop-DscConfiguration                              1.1        PSDesiredStateConfiguration
Function        Stop-Trace                                         1.0.0.0    PSDiagnostics
Function        Test-ScriptFileInfo                                1.0.0.1    PowerShellGet
Function        Uninstall-Module                                   1.0.0.1    PowerShellGet
Function        Uninstall-Script                                   1.0.0.1    PowerShellGet
Function        Unregister-PSRepository                            1.0.0.1    PowerShellGet
Function        Update-DscConfiguration                            1.1        PSDesiredStateConfiguration
Function        Update-Module                                      1.0.0.1    PowerShellGet
Function        Update-ModuleManifest                              1.0.0.1    PowerShellGet
Function        Update-Script                                      1.0.0.1    PowerShellGet
Function        Update-ScriptFileInfo                              1.0.0.1    PowerShellGet
Cmdlet          Add-BitsFile                                       1.0.0.0    BitsTransfer
Cmdlet          Add-Computer                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Add-Content                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Add-JobTrigger                                     1.1.0.0    PSScheduledJob
Cmdlet          Add-Member                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Add-Type                                           3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Checkpoint-Computer                                3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Clear-Content                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Clear-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Clear-Item                                         3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Clear-ItemProperty                                 3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Clear-RecycleBin                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Clear-Variable                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Compare-Object                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Complete-BitsTransfer                              1.0.0.0    BitsTransfer
Cmdlet          Complete-Transaction                               3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Connect-WSMan                                      3.0.0.0    Microsoft.WSMan.Management
Cmdlet          ConvertFrom-Csv                                    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          ConvertFrom-Json                                   3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          ConvertFrom-SecureString                           3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          ConvertFrom-String                                 3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          ConvertFrom-StringData                             3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Convert-Path                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Convert-String                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          ConvertTo-Csv                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          ConvertTo-Html                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          ConvertTo-Json                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          ConvertTo-SecureString                             3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          ConvertTo-Xml                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Copy-Item                                          3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Copy-ItemProperty                                  3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Debug-Process                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Debug-Runspace                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Disable-ComputerRestore                            3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Disable-JobTrigger                                 1.1.0.0    PSScheduledJob
Cmdlet          Disable-PSBreakpoint                               3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Disable-RunspaceDebug                              3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Disable-ScheduledJob                               1.1.0.0    PSScheduledJob
Cmdlet          Disable-WSManCredSSP                               3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Disconnect-WSMan                                   3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Enable-ComputerRestore                             3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Enable-JobTrigger                                  1.1.0.0    PSScheduledJob
Cmdlet          Enable-PSBreakpoint                                3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Enable-RunspaceDebug                               3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Enable-ScheduledJob                                1.1.0.0    PSScheduledJob
Cmdlet          Enable-WSManCredSSP                                3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Export-Alias                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Export-BinaryMiLog                                 1.0.0.0    CimCmdlets
Cmdlet          Export-Clixml                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Export-Counter                                     3.0.0.0    Microsoft.PowerShell.Diagnostics
Cmdlet          Export-Csv                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Export-FormatData                                  3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Export-PSSession                                   3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Find-Package                                       1.0.0.1    PackageManagement
Cmdlet          Find-PackageProvider                               1.0.0.1    PackageManagement
Cmdlet          ForEach-Object                                     3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Format-Custom                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Format-List                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Format-Table                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Format-Wide                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Acl                                            3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Get-Alias                                          3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-AppLockerFileInformation                       1.0.0.0    AppLocker
Cmdlet          Get-AppLockerPolicy                                1.0.0.0    AppLocker
Cmdlet          Get-AuthenticodeSignature                          3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Get-BitsTransfer                                   1.0.0.0    BitsTransfer
Cmdlet          Get-ChildItem                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-CimAssociatedInstance                          1.0.0.0    CimCmdlets
Cmdlet          Get-CimClass                                       1.0.0.0    CimCmdlets
Cmdlet          Get-CimInstance                                    1.0.0.0    CimCmdlets
Cmdlet          Get-CimSession                                     1.0.0.0    CimCmdlets
Cmdlet          Get-Clipboard                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-CmsMessage                                     3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Get-ComputerRestorePoint                           3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-ControlPanelItem                               3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-Counter                                        3.0.0.0    Microsoft.PowerShell.Diagnostics
Cmdlet          Get-Credential                                     3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Get-Culture                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Date                                           3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Event                                          3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-EventLog                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-EventSubscriber                                3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-ExecutionPolicy                                3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Get-FormatData                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Host                                           3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-HotFix                                         3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-Item                                           3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-ItemPropertyValue                              3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-JobTrigger                                     1.1.0.0    PSScheduledJob
Cmdlet          Get-Location                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-Member                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Package                                        1.0.0.1    PackageManagement
Cmdlet          Get-PackageProvider                                1.0.0.1    PackageManagement
Cmdlet          Get-PackageSource                                  1.0.0.1    PackageManagement
Cmdlet          Get-PfxCertificate                                 3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Get-Process                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-PSBreakpoint                                   3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-PSCallStack                                    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-PSDrive                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-PSProvider                                     3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-Random                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Runspace                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-RunspaceDebug                                  3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-ScheduledJob                                   1.1.0.0    PSScheduledJob
Cmdlet          Get-ScheduledJobOption                             1.1.0.0    PSScheduledJob
Cmdlet          Get-Service                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-TraceSource                                    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Transaction                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-TroubleshootingPack                            1.0.0.0    TroubleshootingPack
Cmdlet          Get-TypeData                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-UICulture                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Unique                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-Variable                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Get-WinEvent                                       3.0.0.0    Microsoft.PowerShell.Diagnostics
Cmdlet          Get-WmiObject                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-WSManCredSSP                                   3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Get-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Group-Object                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Import-Alias                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Import-BinaryMiLog                                 1.0.0.0    CimCmdlets
Cmdlet          Import-Clixml                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Import-Counter                                     3.0.0.0    Microsoft.PowerShell.Diagnostics
Cmdlet          Import-Csv                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Import-LocalizedData                               3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Import-PackageProvider                             1.0.0.1    PackageManagement
Cmdlet          Import-PSSession                                   3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Install-Package                                    1.0.0.1    PackageManagement
Cmdlet          Install-PackageProvider                            1.0.0.1    PackageManagement
Cmdlet          Invoke-CimMethod                                   1.0.0.0    CimCmdlets
Cmdlet          Invoke-DscResource                                 1.1        PSDesiredStateConfiguration
Cmdlet          Invoke-Expression                                  3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Invoke-Item                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Invoke-RestMethod                                  3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Invoke-TroubleshootingPack                         1.0.0.0    TroubleshootingPack
Cmdlet          Invoke-WebRequest                                  3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Invoke-WmiMethod                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Invoke-WSManAction                                 3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Join-Path                                          3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Limit-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Measure-Command                                    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Measure-Object                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Move-Item                                          3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Move-ItemProperty                                  3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-Alias                                          3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          New-AppLockerPolicy                                1.0.0.0    AppLocker
Cmdlet          New-CimInstance                                    1.0.0.0    CimCmdlets
Cmdlet          New-CimSession                                     1.0.0.0    CimCmdlets
Cmdlet          New-CimSessionOption                               1.0.0.0    CimCmdlets
Cmdlet          New-Event                                          3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          New-EventLog                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-Item                                           3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-JobTrigger                                     1.1.0.0    PSScheduledJob
Cmdlet          New-Object                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          New-PSDrive                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-PSWorkflowExecutionOption                      2.0.0.0    PSWorkflow
Cmdlet          New-ScheduledJobOption                             1.1.0.0    PSScheduledJob
Cmdlet          New-Service                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-TimeSpan                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          New-Variable                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          New-WebServiceProxy                                3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-WinEvent                                       3.0.0.0    Microsoft.PowerShell.Diagnostics
Cmdlet          New-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
Cmdlet          New-WSManSessionOption                             3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Out-File                                           3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Out-GridView                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Out-Printer                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Out-String                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Pop-Location                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Protect-CmsMessage                                 3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Publish-DscConfiguration                           1.1        PSDesiredStateConfiguration
Cmdlet          Push-Location                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Read-Host                                          3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Register-CimIndicationEvent                        1.0.0.0    CimCmdlets
Cmdlet          Register-EngineEvent                               3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Register-ObjectEvent                               3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Register-PackageSource                             1.0.0.1    PackageManagement
Cmdlet          Register-ScheduledJob                              1.1.0.0    PSScheduledJob
Cmdlet          Register-WmiEvent                                  3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-BitsTransfer                                1.0.0.0    BitsTransfer
Cmdlet          Remove-CimInstance                                 1.0.0.0    CimCmdlets
Cmdlet          Remove-CimSession                                  1.0.0.0    CimCmdlets
Cmdlet          Remove-Computer                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-Event                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Remove-EventLog                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-Item                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-ItemProperty                                3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-JobTrigger                                  1.1.0.0    PSScheduledJob
Cmdlet          Remove-PSBreakpoint                                3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Remove-PSDrive                                     3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-TypeData                                    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Remove-Variable                                    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Remove-WmiObject                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-WSManInstance                               3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Rename-Computer                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Rename-Item                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Rename-ItemProperty                                3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Reset-ComputerMachinePassword                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Resolve-Path                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Restart-Computer                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Restart-Service                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Restore-Computer                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Resume-BitsTransfer                                1.0.0.0    BitsTransfer
Cmdlet          Resume-Service                                     3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Save-Package                                       1.0.0.1    PackageManagement
Cmdlet          Select-Object                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Select-String                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Select-Xml                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Send-MailMessage                                   3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Set-Acl                                            3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Set-Alias                                          3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Set-AppLockerPolicy                                1.0.0.0    AppLocker
Cmdlet          Set-AuthenticodeSignature                          3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Set-BitsTransfer                                   1.0.0.0    BitsTransfer
Cmdlet          Set-CimInstance                                    1.0.0.0    CimCmdlets
Cmdlet          Set-Clipboard                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-Content                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-Date                                           3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Set-DscLocalConfigurationManager                   1.1        PSDesiredStateConfiguration
Cmdlet          Set-ExecutionPolicy                                3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Set-Item                                           3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-JobTrigger                                     1.1.0.0    PSScheduledJob
Cmdlet          Set-Location                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-PackageSource                                  1.0.0.1    PackageManagement
Cmdlet          Set-PSBreakpoint                                   3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Set-ScheduledJob                                   1.1.0.0    PSScheduledJob
Cmdlet          Set-ScheduledJobOption                             1.1.0.0    PSScheduledJob
Cmdlet          Set-Service                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-TraceSource                                    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Set-Variable                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Set-WmiInstance                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Set-WSManQuickConfig                               3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Show-Command                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Show-ControlPanelItem                              3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Show-EventLog                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Sort-Object                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Split-Path                                         3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Start-BitsTransfer                                 1.0.0.0    BitsTransfer
Cmdlet          Start-DscConfiguration                             1.1        PSDesiredStateConfiguration
Cmdlet          Start-Process                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Start-Service                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Start-Sleep                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Start-Transaction                                  3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Start-Transcript                                   3.0.0.0    Microsoft.PowerShell.Host
Cmdlet          Stop-Computer                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Stop-Process                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Stop-Service                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Stop-Transcript                                    3.0.0.0    Microsoft.PowerShell.Host
Cmdlet          Suspend-BitsTransfer                               1.0.0.0    BitsTransfer
Cmdlet          Suspend-Service                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Test-Object                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Test-AppLockerPolicy                               1.0.0.0    AppLocker
Cmdlet          Test-ComputerSecureChannel                         3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Test-Connection                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Test-DscConfiguration                              1.1        PSDesiredStateConfiguration
Cmdlet          Test-Path                                          3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Test-WSMan                                         3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Trace-Command                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Unblock-File                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Undo-Transaction                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Uninstall-Package                                  1.0.0.1    PackageManagement
Cmdlet          Unprotect-CmsMessage                               3.0.0.0    Microsoft.PowerShell.Security
Cmdlet          Unregister-Event                                   3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Unregister-PackageSource                           1.0.0.1    PackageManagement
Cmdlet          Unregister-ScheduledJob                            1.1.0.0    PSScheduledJob
Cmdlet          Update-FormatData                                  3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Update-List                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Update-TypeData                                    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Use-Transaction                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Wait-Debugger                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Wait-Event                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Wait-Process                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Write-Error                                        3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Write-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Write-Information                                  3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Write-Output                                       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Write-Progress                                     3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Write-Verbose                                      3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Write-Warning                                      3.1.0.0    Microsoft.PowerShell.Utility
======#-----#=========#-----------------------------#======================#--------------------#===================
New-Item -ItemType file -Path $PROFILE 
                                                                                                          Профиль
•	Расположение:
$PROFILE
•	Расширение:
.psl
•	Синтаксис:
New-Item -ItemType file -Path $PROFILE -Force
Remove-Item $PROFILE

                                                                                       Производительность команд
•	Командлет:
•	Measure-Command
•	Синтаксис:
•	Measure-Command -Expression {Function1}
                                                                    
                                                                                         время выполнения команд

Measure-Command -Expression {Function -ComputerName...}
-------
Measure-Command -Expression {Get-NetIPAddress -AddressFamily ipv4 -IncludeAllCompartments -InterfaceAlias ethernet0}

Get-Command Get-NetIPAddress

CommandTуре	Name	ModuleName
--------------------       ---------    -----------------
Function	Get-NetIPAddress	NetTCPIP

Get-Command Get-NetIPAddress | Select-Object -Property  *

создаем переменную, например текущая дата, запускаем серию командлетов скрипта, 
из даты выполнения вычитаем текущую дату

Measure-Command -Expression {Get-NetIPAddress -AddressFamily ipv4 -IncludeAllCompartments -InterfaceAlias ethernet0}
$a =Get-Date
Get-NetIPAddress -ComputerName localhost
(Get-Date)-$a
----------------------------------------------------------------
                                                                                     Создание командлетов
•	Программное обеспечение:
                  Visual Studio
	Windows Development Kit

•	Проект:
                  Class Library
•	Выходной файл:
•	Module.dll
•	Синтаксис:
•	Import-Module C:\FilePath\Module.dll
==========================================================
открыли Visual Studio, 
новый проект 
с#, 
windows, 
Class Library  (.NET Framework     - default, type  Visual с#  (.dll))
вводим имя ok
------------------------------
слева вверху
CLasses
GetUPbum CLass1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading .Tasks;

namespace GetUPbum 
{
                //references
	public class CLass1
	{
	}

}

справа вверху
Solution explorer
Solution GetUPbum
...
referenses
...
...
...
...
на выпадающем меню нажимаем
references add
...
...
 в открывшейся вкладке reference manager нажимаем
Assemblies           - Framework  -System.Configuration.Install           ok(Для компиляции классов)
browse         -recent   -system.management.Automation...., -Microsoft powershellDiagnostics.Activities    ok(Использованные ранееWindows Development Kit)
-----------GetUptimeCommand_c#------------сколько наш комп проработал---------
[Cmdlet(VerbsCommon.Get, "Uptime")]
public class GetUptimeComand : Cmdlet
{
	protected override void ProcessRecord()
	{
		using (var uptime = new PerforenceCounter("System, System Up time"))
		{
		uptime.HextValue();
		WriteObject(TimeSpan.FromSecondf(uptime.NextValue()));
		}
	}
}


[RunInstaller(true)]
public class GetUptimePSSnapIn : PSSnapIn
{
	public GetUptimePSSnapIn()
	: base()
	{
	}	

	public override string Name
	{
	get { return "GetUptimePSSnapIn"; }
	}
	public override string Vendor
	{
	get { return "Ed";}
	}
	public override string Dedcription
	{
	get { return "Returns the uptime of the system";}	
	}
	public override string VendorResource
	{
		get
		{
			return "GetUptimePSSnapIn, Ed";
		}
	}
}

--------------------------------------------------
вставили код, нажали правую кнопку и в меню выбрали
resolve  -using system.management.Automation
в Solution выбрали Solution build
после компиляции по указанному пути c:\...\в нижнем окне
компилятора находим библиотеку .dll и копируем в папку script
далее устанавливаем как модуль
import-module C:\....\.dll 
get-module



















                                                          Тиражирование кода в Windows PowerShell 2.0


сценарий 1                                 сценарий 1                                        сценарий 2

фрагмент1       ---------------->ссылка на сценарий2---------------->
фрагмент2                                 ссылка на сценарий2<---------------        сценарий 2
фрагмент3                                  ссылка на сценарий2


#backup01
#Заранее создали 2 папки на сервере ps_backup и на локальном backup
#5папок(1-5)поочередно копируем из P:\ в F:\ 
#затем перемещаем(в  F:\ ничегоне останется)насервер в папку ps_backup 
#удаляем соединение
copy-item P:\скрипты_проект\power_scripts\1\* F:\gorilla\backup\
net use Z:\\fs01\ps_backup
move-item F:\gorilla\backup\* Z:\
net use Z: /delete 
#
copy-item P:\скрипты_проект\power_scripts\2\* F:\gorilla\backup\
net use Z:\\fs01\ps_backup
move-item F:\gorilla\backup\* Z:\
net use Z: /delete 
#
copy-item P:\скрипты_проект\power_scripts\3\* F:\gorilla\backup\
net use Z:\\fs01\ps_backup
move-item F:\gorilla\backup\* Z:\
net use Z: /delete 
#
copy-item P:\скрипты_проект\power_scripts\4\* F:\gorilla\backup\
net use Z:\\fs01\ps_backup
move-item F:\gorilla\backup\* Z:\
net use Z: /delete 
#
copy-item P:\скрипты_проект\power_scripts\5\* F:\gorilla\backup\
net use Z:\\fs01\ps_backup
move-item F:\gorilla\backup\* Z:\
net use Z: /delete 
-------------------------------------
#backup02
#Заранее создали 2 папки на сервере ps_backup и на локальном backup
#5папок(1-5)поочередно копируем из P:\ в F:\ 
#затем вызываем скрипт scr_serv1_backup03.ps1
copy-item P:\скрипты_проект\power_scripts\1\* F:\gorilla\backup\
P:\скрипты_проект\power_scripts\script_serv\scr_serv1_backup03.ps1
#
copy-item P:\скрипты_проект\power_scripts\2\* F:\gorilla\backup\
P:\скрипты_проект\power_scripts\script_serv\scr_serv1_backup03.ps1

#
copy-item P:\скрипты_проект\power_scripts\3\* F:\gorilla\backup\
P:\скрипты_проект\power_scripts\script_serv\scr_serv1_backup03.ps1

#
copy-item P:\скрипты_проект\power_scripts\4\* F:\gorilla\backup\
P:\скрипты_проект\power_scripts\script_serv\scr_serv1_backup03.ps1

#
copy-item P:\скрипты_проект\power_scripts\5\* F:\gorilla\backup\
P:\скрипты_проект\power_scripts\script_serv\scr_serv1_backup03.ps1
-----------------------------------------------------вызываемый отдельный скрипт
#backup03
#5папок(1-5)поочередно перемещаем(в  F:\ ничегоне останется)на сервер в папку ps_backup 
#удаляем соединение

net use Z:\\fs01\ps_backup
move-item F:\gorilla\backup\* Z:\
net use Z: /delete 
-----------------------------------------------------или так
#backup04
#
copy-item P:\скрипты_проект\power_scripts\1\* F:\gorilla\backup\
#
copy-item P:\скрипты_проект\power_scripts\2\* F:\gorilla\backup\
#
copy-item P:\скрипты_проект\power_scripts\3\* F:\gorilla\backup\
#
copy-item P:\скрипты_проект\power_scripts\4\* F:\gorilla\backup\
#
copy-item P:\скрипты_проект\power_scripts\5\* F:\gorilla\backup\
#выгрузка
P:\скрипты_проект\power_scripts\script_serv\scr_serv1_backup03.ps1
-------------------------------
                                              Управление областью действия переменных в Windows PowerShell 2.0

ОБЛАСТИ ДЕЙСТВИЯ ПЕРЕМЕННЫХ
Область действия	                  Обозначение
Глобальная область	Global
Локальная область	 Local
Область сценария	                   Script
Частная	                                     Private

PS C:\Windows\system32> $a=111
PS C:\Windows\system32> New-variable -name b -value 222
PS C:\Windows\system32> $global:c=333
PS C:\Windows\system32> New-Variable -Name d -Value 444 -Scope Global
PS C:\Windows\system32> write-host $a $b $c $d
111 222 333 444
PS C:\Windows\system32>
-----------------------------------------------
PS C:\Windows\system32> set-location P:\
PS P:\> set-location P:\скрипты_проект\power_scripts\per_1
PS P:\скрипты_проект\power_scripts\per_1> .\obl_desv_vidimosti_per1.ps1

---------------------------------------отдельный скрипт obl_desv_vidimosti_per1.ps1
#создали переменные
clear-host
#глобальная
$global:a='Global Variable'
#локальная
$global:b='Local Variable'
#в области скрипта
$script:c='Script Variable'
#частная
$private:d='Private Variable'
#вывод на экран в сценарии obl_desv_vidimosti_per2.ps1
set-location P:\
P:\скрипты_проект\power_scripts\per_1\obl_desv_vidimosti_per2.ps1
write-host $a
write-host $b
write-host $c
write-host $d
----------------------------------отдельный скрипт obl_desv_vidimosti_per2.ps1
#вывод на экран сценария obl_desv_vidimosti_per1.ps1
write-host $a
write-host $b
write-host $c
write-host $d




Global Variable
Local Variable
Script Variable

Global Variable
Local Variable
Script Variable
Private Variable
PS P:\>
--------------------------------------------------отдельный скрипт obl_desv_vidimosti_per3.ps1
function MYFunction
{
#глобальная
$global:a='Global Variable'
#локальная
$global:b='Local Variable'
#в области скрипта
$script:c='Script Variable'
#частная
$private:d='Private Variable'
}
MyFunction

write-host $a
write-host $b
write-host $c
write-host $d


PS C:\Windows\system32> set-location P:\скрипты_проект\power_scripts\per_1
PS P:\скрипты_проект\power_scripts\per_1> .\obl_desv_vidimosti_per3
Global Variable
Local Variable
Script Variable
----------------------------------------------------------------------------------------

                                              Управление переменными окружения в Windows PowerShell 2.0
в рамках одного экзкмпляра(т.е если запустить еще одну консоль, то переменных там нет)
PS C:\Windows\system32>set-loction env:
PS Env:\> $env:computername
PS Env:\> $env:a=11                                    создать новую перемменную окружения
PS Env:\> get-childitem

Name                           Value
----                           -----
a                              11
ALLUSERSPROFILE                C:\ProgramData
APPDATA                        C:\Users\...\AppData\Roaming
CLASSPATH                      .;C:\Program Files\Java\jre7\lib\ext\QTJava.zip
CommonProgramFiles             C:\Program Files\Common Files
COMPUTERNAME                  \...\
ComSpec                        C:\Windows\system32\cmd.exe
DISPLAY                        localhost:0.0
EDITOR                         vi
ESET_OPTIONS                                                                                                                                                                                                                 ...
FP_NO_HOST_CHECK               NO
HOMEDRIVE                      C:
HOMEPATH                       \Users\\....\
INTERIX_ROOT                   /dev/fs/C/Windows/SUA/
INTERIX_ROOT_WIN               C:\Windows\SUA\
LD_LIBRARY_PATH                /usr/lib:/usr/X11R6/lib
LOCALAPPDATA                   C:\Users\\....\\AppData\Local
LOGONSERVER                    \\\.....\
MOZ_PLUGIN_PATH                C:\Program Files\Foxit Software\Foxit PhantomPDF\plugins\
NUMBER_OF_PROCESSORS           1
OPENNT_ROOT                    /dev/fs/C/Windows/SUA/
OS                             Windows_NT
Path                           C:\Windows\system32\WindowsPowerShell\v1.0\;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\латех\m...
PATHEXT                        .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
PROCESSOR_ARCHITECTURE         x86
PROCESSOR_IDENTIFIER           x86 Family 15 Model 3 Stepping 4, GenuineIntel
PROCESSOR_LEVEL                15
PROCESSOR_REVISION             0304
ProgramData                    C:\ProgramData
ProgramFiles                   C:\Program Files
PSModulePath                   C:\Users\\....\\Documents\WindowsPowerShell\Modules;C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
PUBLIC                         C:\Users\Public
QTJAVA                         C:\Program Files\Java\jre7\lib\ext\QTJava.zip
SFUDIR                         C:\Windows\SUA\
SFUDIR_INTERIX                 /dev/fs/C/Windows/SUA/
SUA_ROOT                       /dev/fs/C/Windows/SUA/
SUA_ROOT_WIN                   C:\Windows\SUA\
SystemDrive                    C:
SystemRoot                     C:\Windows
TEMP                           C:\Users\IRINA_~1\AppData\Local\Temp
TMP                            C:\Users\IRINA_~1\AppData\Local\Temp
USERDOMAIN                    \...\
USERNAME                       \....\
USERPROFILE                    C:\Users\\....\
VBOX_MSI_INSTALL_PATH          C:\Program Files\Oracle\VirtualBox\
VS100COMNTOOLS                 D:\компилятор2010\visual studio\Common7\Tools\
windir                                               C:\Windows
windows_tracing_flags          3
windows_tracing_logfile        C:\BVTBin\Tests\installpackage\csilogfile.log
XAPPLRESDIR                    /usr/X11R6/lib/X11/app-defaults
XCMSDB                         /usr/X11R6/lib/X11/Xcms.txt
XKEYSYMDB                      /usr/X11R6/lib/X11/XKeysymDB
XNLSPATH                       /usr/X11R6/lib/X11/locale

или так                     создать новую перемменную окружения
PS Env:\>
PS Env:\> new-item -itemtype variable -name b -value 22

Name                           Value
----                           -----
b                              22
PS Env:\> get-childitem
                        изменить значение переменной окружения(в текущей папке)
PS Env:\> set-item -path a -value 33
PS Env:\> get-childitem
или если директория другая
PS Env:\>set-location C:
PS C:\Windows\system32>set-item -path Env:\b -value 44
                        удаление переменной окружения
PS Env:\> remove-item Env:\a
PS Env:\> remove-item Env:\b
PS Env:\> get-childitem

                                                                       Кавычки в Windows PowerShell 2.0
Тип                                     Символ
Двойные кавычки        " "
Одинарные кавычки     ' '
обратная кавычка в районе Ё
clear-host
write-host "kavichki"
write-host 'hello kavichki'
$a=12
write-host "`$a=$a"
write-host '$a='"$a"
write-host "$a=$a"
write-host """$a=$a"""
-----------------------
kavichki
hello kavichki
$a=12
$a= 12
12=12
"12=12"

____________________________________________________________________________
ESCAPE-СИМВОЛЫ В
WINDOWS POWERSHELL 2.0
Escape-символы	Описание
`'
`"
`0	NULL
`a	Звуковой сигнал
`b	<-Backspace
`r	Возврат курсора в начало строки
`n	Переход на новую строку
`t	Горизонтальный табулятор
`v	Вертикальный табулятор (при печати)
`f	Переход на новую страницу (при печати)
PS C:\Windows\system32> get-help about_esc
-----
PS C:\Windows\system32>  get-help about_special_characters
------------
$a="`a`a`a`a`a`a`a`a`a`a"                          Звуковой сигнал(10раз)
$a
стереть  в  значении переменной последнюю цифру (с помощью ескейп-символа изменить значение переменной на один порядок)
PS C:\Windows\system32>$a="123456`b"
PS C:\Windows\system32>Write-Host $a
123456
PS C:\Windows\system32>Write-host $a -NoNewline
12345

Возврат курсора в начало строки
PS C:\Windows\system32>"123456`r"
PS C:\Windows\system32>Write-host $a -NoNewline
123456

Переход на новую строку
PS C:\Windows\system32>$a ="`nHello World!`n"
PS C:\Windows\system32>Write-host $a

Hello World!

Горизонтальный табулятор
PS C:\Windows\system32>$a="a`t186"
PS C:\Windows\system32>Write-host $a
a               186
PS C:\Windows\system32>$a=1
PS C:\Windows\system32>$b=2
PS C:\Windows\system32>$c=3
PS C:\Windows\system32>Write-host"a`t$a`nb`t$b`nc`t$c"
a              1
b              2
c              3
PS C:\Windows\system32>

                                         Многострочные переменные в Windows PowerShell 2.0

Синтаксис
$variable = @"
TEXT
"@

DATA variable {
"TEXT"
}

Пример
$a = @"
AAA
BBB
ccc
"@

DATA a {
"AAA
BBB
CCC"
}
PS C:\Windows\system32>

##GET-PowerShell_Ise
#Declare s_start 
$s_start = @"
Script V 0.1
Multy-string variable

"@
#Declare s_end
DATA s_end {
"

The End of Script
Made by Irina
Protvino 2016"
}
###Script Area###
Clear-Host
Write-host $s_start
get-process -name powershell_ise
Write-host $s_end
------------------

Script V 0.1
Multy-string variable


Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName          
-------  ------    -----      ----- -----   ------     -- -----------          
    609      25    61876      47960   323    84,23   1372 powershell_ise       


The End of Script
Made by Irina
Protvino 2016
____________________________________________________________________________


                                               Обработка строк в Windows PowerShell 2.0

Действие	               Оператор
Присваивание	                 =
Соединение строк	                 +
Повторение строки               *
Соединение строк 	-Join
Разделение строк	                 -Split


Действие	Оператор	Пример
Присваивание	     =	           $а="ААААА"
Соединение строк     +	           $ а="AAA"+"ВВВ"
Повторение строки    *	           $а * 10


---------------------------------------------------------------------------------
clear-host
write-host "-------------------------"
$name="Irina"
$Lastname="Koval"
$Fullname1="Koval"+" "+"Irina"
$Fullname2=$name +" "+$Lastname 
$r=("-"*25)
$Fullname1
write-host ("-"*25)
$Fullname2
$r
##
$data=get-date 
$data
''
##
##Declare Variables
$client_os ="Windows XP","Windows Vista"`
,"Windows 7","Windows 10"
$server_os = "Windows Server 2003"`
,"Windows Server 2003 R2"`
,"Windows Server 2008"`
,"Windows Server 2008 R2"`
,"Windows Server 2012"`
,"Windows Server 2012 R2"`
,"Windows Server 2016"`
,"Windows Server 2016 R2"
$r = ("="*25)
$all_os=$client_os + $server_os
##Script Area

write-host "Client OS:"
$client_os
$r
write-host "Server OS:"
$server_os
$r
write-host "All OS:"
$all_os
''
"Windows", "PowerShell", "2.0" -join " "
"Windows", "PowerShell", "2.0" -join "%"

___________________________
-------------------------
Koval Irina
-------------------------
Irina Koval
-------------------------

24 апреля 2016 г. 19:13:35

Client OS:
Windows XP
Windows Vista
Windows 7
Windows 10
=========================
Server OS:
Windows Server 2003
Windows Server 2003 R2
Windows Server 2008
Windows Server 2008 R2
Windows Server 2012
Windows Server 2012 R2
Windows Server 2016
Windows Server 2016 R2
=========================
All OS:
Windows XP
Windows Vista
Windows 7
Windows 10
Windows Server 2003
Windows Server 2003 R2
Windows Server 2008
Windows Server 2008 R2
Windows Server 2012
Windows Server 2012 R2
Windows Server 2016
Windows Server 2016 R2

Windows PowerShell 2.0
Windows%PowerShell%2.0
____________________________________________________________________________

Рассмотрим следующий пример.
      -split "1 2", "a b"
      1
      2
      a b
------------
      "1 2", "a b" -split " "
      1
      2
      a
      b

----------------
      -split ("1 2", "a b")
      1
      2
      a
      b

      $a = "1 2", "a b"
      -split $a
      1
      2
      a
      b


 Следующая команда разбивает строку по пробелам.
     C:\PS> -split "Windows PowerShell 2.0`nWindows PowerShell with remoting"

     Windows
     PowerShell
     2.0
     Windows
     PowerShell
     with
     remoting


 Следующая команда разбивает строку по запятым.

     C:\PS> "Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune" -split ','

     Mercury
     Venus
     Earth
     Mars
     Jupiter
     Saturn
     Uranus
     Neptune

  Следующая команда разбивает строку на три подстроки.

      C:\PS> "a,b,c,d,e,f,g,h" -split ",", 3

      a
      b
      c,d,e,f,g,h


  Следующая команда разбивает две строки на три подстроки.
  (ограничение применяется к каждой строке отдельно).
      C:\PS> "a,b,c,d", "e,f,g,h" -split ",", 3

      a
      b
      c,d
      e
      f
      g,h


 Следующая команда выполняет разбивку по одному или двум
 разделителям в зависимости от значения переменной.

     C:\PS>  $i = 1
     C:\PS>  $c = "LastName, FirstName; Address, City, State, Zip"
     C:\PS>  $c -split {if ($i -lt 1) {$_ -eq ","} else {$_ -eq ";"}}

     LastName, FirstName
      Address, City, State, Zip

  Следующие команды разбивают файл XML сначала по угловым скобкам,
  а затем по точкам с запятой. В результате выводится удобная для
  чтения версия файла XML.

      C:\PS>  get-process powershell | export-clixml ps.xml
      C:\PS>  $x = import-clixml ps.xml
      C:\PS>  $x = $x -split "<"
      C:\PS>  $x = $x -split ";"

PS C:\Windows\system32> help  about_Join

    Оператор join объединяет набор строк в одну строку. Строки
    добавляются в конце результирующей строки в том же порядке, в
    котором они указаны в команде.

  Синтаксис
      В следующей схеме показан синтаксис оператора join.
        -Join <String[]>
        <String[]> -Join <Delimiter>
  Параметры
      String[]
          Задает одну или несколько объединяемых строк.
      Delimiter
          Задает один или несколько символов, помещаемых между объединяемыми
          строками.
          По умолчанию разделитель не используется ("").!!!!!!!!!!!!!!!!!!!!!
  Примечания
      Унарный оператор join (-join <string[]>) имеет более высокий
      приоритет, чем запятая. Поэтому если задать ему список перечисленных через
      запятую строк, ему передается только первая строка (до первой  запятой).
      При использовании унарного оператора join заключите строки в круглые
      скобки или сохраните их в переменной и передайте переменную этому
      оператору.
      Пример:
          -join "a", "b", "c"
          a
          b
          c

          -join ("a", "b", "c")
          abc


          $z = "a", "b", "c"
          -join $z
          abc
  Примеры
      Следующая инструкция объединяет три строки.
          -join ("Windows", "PowerShell", "2.0")
          WindowsPowerShell2.0
      Следующая инструкция объединяет три строки, используя пробел в
      качестве разделителя.
          "Windows", "PowerShell", "2.0" -join " "
          Windows PowerShell 2.0
      Следующие инструкции объединяют три строки, используя несколько
      символов в качестве разделителя.
          $a = "WIND", "SP", "ERSHELL"
          $a -join "OW"
          WINDOWSPOWERSHELL
      Следующая инструкция объединяет строки, содержащиеся в
      автономной строке, преобразуя их в единую строку. Поскольку
      автономная строка представляет собой единую строку, необходимо
      разделить содержащиеся в ней строки, прежде чем их можно будет
      объединить. Этим способом можно объединить строки файла XML,
      сохраненного в автономной строке.
          $a = @'
          a
          b
          c
          '@

          (-split $a) -join " "
          a b c
----------------------------------------------

                                               Форматирование чисел и строк в Windows PowerShell 2.0
меняем порядок вывода чисел и строк(перестановка)
Синтаксис
'Порядок' -f Элементы	
Пример
'{1} {0}'-f "В", "А"


$a="Avtor","Nazvanie","nomer"
$nomer=1,2,3,4,5
##
clear-host
$a
'{2} {0} {1}'-f $a
$nomer 
"." +" "+"spisok"
------------------------
Avtor
Nazvanie
nomer
nomer Avtor Nazvanie
1
2
3
4
5
. spisok

____________________________________________________________________________


                                         СПЕЦИФИКАТОРЫ ФОРМАТА В WINDOWS POWERSHELL 2.0		
Формат	                                                             Спецификаторы	#
Денежный	                                                       с, C	
Научный	                                                                         е, Е	                   да
С фиксированной точкой	                                     f, F	                   да
Наиболее компактный	                                     g, G	                   да
С разделителями	                                                       n, N	                   да
Процентный	                                                       P, P	                   да
Обратно совместимый	                                     r, R	
Шестнадцатеричный	                                     x, X	
Время	                                                                   hh, mm, ss	
Дата	                                                                   d, m, у, dd, yy, ddd	

для форматирования пишется ключ -f , и учитываются особенности записи массивов (с нулевого элемента){0,1,2,3...}далее после двоеточия пишем буквенный спецификатор.
!!!!не переводит в шеснадцатеричные цифры свыше 20 знаков!!!!!

------------------
##The Script
$a= 150, 65536, 10, 0.5, 12e8
$b=3578965412335745894
$data=get-date
##
clear-host
write-host $a
''
'{0:C}, {3:C}' -f $a
''
'{2:e}' -f $a
'{0:e9}' -f$a

''
'{0:F}' -f$a
'{0:F10}' -f$a
''
'{4:g2}' -f$a
'{1:g4}' -f$a
'{2:g6}' -f$a
'{3:g7}' -f$a
''
'{1:n2}' -f$a
'{0:n2}' -f$b
''
'{3:p2}' -f$a
''
'{3:R}' -f$a
''
'{0:X},{1:X},{2:X}' -f$a
'{0:X}' -f $b
''
$data
''
'{0:d}' -f$data
'{0:m}' -f$data
'{0:hh}:{0:mm}:{0:ss}' -f$data
'{0:hh}:{0:mm}' -f$data
'{0:ddd}' -f$data
''
'{0:d} {0:hh}:{0:mm}:{0:ss} {0:ddd} '-f$data
----------------------------------------------
150 65536 10 0,5 1200000000

150,00р., 0,50р.

1,000000e+001
1,500000000e+002

150,00
150,0000000000

1,2e+09
6,554e+04
10
0,5

65 536,00
3 578 965 412 335 745 894,00

50,00%

0,5

96,10000,A
31AB0A1491AE7B66


25 апреля 2016 г. 23:28:24

25.04.2016
апреля 25
11:28:24
11:28
Пн

25.04.2016 11:28:24 Пн
___________________________________________________________________
                                      Одномерные массивы в Windows PowerShell 2.0

                                 СЦЕНАРИИ
Типы массивов		Действия над массивами
тестовые                                        создание
числовые	                     выборка

ВЫБОРКА ЭЛЕМЕНТОВ ИЗ ОДНОМЕРНОГО МАССИВА В WINDOWS POWERSHELL 2.0
1.	Выборка всего массива.
2.	Выборка одного элемента массива.
3.	Выборка нескольких элементов из массива.
4.	Выборка диапазона значений из массива.
5.	Выборка объединенных диапазонов значений.	

Создание массивов
Выбираем имя переменной  и пишем после знака доллара, присваиваем значение массива-численные после знака равно(присвоить)через запятую, буквенные в двойных кавычках через запятую и пробел. Вывод на экран просто имени переменной показывает значения в столбик, при использованиии командлета write-host-в строку

PS C:\Windows\system32> $a1=1,2,3,4,5,6,7,8,9
PS C:\Windows\system32> $a2="A", "B", "C", "D", "E", "F", "G","H"
PS C:\Windows\system32> write-host $a1
1 2 3 4 5 6 7 8 9
PS C:\Windows\system32> write-host $a2
A B C D E F G H
PS C:\Windows\system32> $a1
1
2
3
4
5
6
7
8
9
PS C:\Windows\system32> $a2
A
B
C
D
E
F
G
H
PS C:\Windows\system32>

При необходимости выбора определенного элемента из массива (Выборка) и операций с ним, к имени переменной добавляем номер элемента в квадратных скобках, счет элементов начинается с нулевого, а не с первого! При перечислении нескольких элементов(последовательный диапазон) выборки ставятся две точки. Отрицательное значение применяется при необходимости вести отсчет с последних элементов.
  
PS C:\Windows\system32> $a1[0, 5]
1
6
PS C:\Windows\system32> $a1[0, 5,8]
1
6
9
PS C:\Windows\system32> $a1[0,5,8,1]
1
6
9
2
PS C:\Windows\system32> write-host $a1[0,5,8,1]
1 6 9 2
PS C:\Windows\system32> $a2[1,0,1,9]
B
A
B
PS C:\Windows\system32> $a2[1,0,1,8]
B
A
B
PS C:\Windows\system32> $a2[1,0,1,7]
B
A
B
H
PS C:\Windows\system32> write-host $a2[1,0,1,7]
B A B H

PS C:\Windows\system32> $a1[-1]
9
PS C:\Windows\system32> $a2[-1]
H


PS C:\Windows\system32> write-host $a1[-2..7]
8 9 1 2 3 4 5 6 7 8
PS C:\Windows\system32> write-host $a1[-2..5]
8 9 1 2 3 4 5 6
PS C:\Windows\system32> write-host $a1[-2..6]
8 9 1 2 3 4 5 6 7

PS C:\Windows\system32> write-host $a2[-2..5]
G H A B C D E F
PS C:\Windows\system32>

сложили необходимые диапазоны выборки (см повторы! элементов)
PS C:\Windows\system32> $a2
A
B
C
D
E
F
G
H
PS C:\Windows\system32> $a2[1..-1 + 0..7]
B
A
H
A
B
C
D
E
F
G
H
PS C:\Windows\system32> write-host $a2[1..-1 + 0..7]
B A H A B C D E F G H
PS C:\Windows\system32>

                             Работа с одномерными массивами в Windows PowerShell 2.0

ОБЪЯВЛЕНИЕ МАССИВОВ В WINDOWS POWERSHELL 2.0
1.	Создание числового массива.
2.	Создание текстового массива.
3.	Создание массива переменных.


массив можно задать и так
PS C:\Windows\system32> $a3=@(get-date; get-process; get-service)


PS C:\Windows\system32> $a4=@(get-date; get-module -ListAvailable; get-process -name po*; get-service -name d*)
PS C:\Windows\system32> $a4

УПРАВЛЕНИЕ ЭЛЕМЕНТАМИ МАССИВА В WINDOWS POWERSHELL 2.0
1.	Замена значения элемента массива.
2.	Добавление элемента в конец массива.
3.	Модификации массивов.
-----------------------------------------
покажи мне 5 элемент массива
$a=get-process
$a[4]

------------------------------------------------



PS C:\Windows\system32> $ab=@(1,2,3,4,5,6,7,8,9)
PS C:\Windows\system32> $ba=@("add"; "seven")
PS C:\Windows\system32> $ab[-1]
9
PS C:\Windows\system32> $ab[-1]=99
PS C:\Windows\system32> $ab[-1]
99
PS C:\Windows\system32> $ab
1
2
3
4
5
6
7
8
99
PS C:\Windows\system32>

Добавить в  конец массива
PS C:\Windows\system32> $ab +=9
PS C:\Windows\system32> $ab +=10
PS C:\Windows\system32> $ab
1
2
3
4
5
6
7
8
99
9
10
PS C:\Windows\system32>

PS C:\Windows\system32> $ab =$ab[0..7] + 9+ $ab[8..10]
PS C:\Windows\system32> $ab
1
2
3
4
5
6
7
8
9
99
9
10
удалить последние элементы и добавить элемент
PS C:\Windows\system32> $ab=$ab[0..8]+10+11
PS C:\Windows\system32> $ab
1
2
3
4
5
6
7
8
9
10
11
длина массива
PS C:\Windows\system32> $ab.length
11
PS C:\Windows\system32> $ab[-1]
11

-------------------------------
                                              Многомерные массивы в Windows PowerShell 2.0
СОЗДАНИЕ МНОГОМЕРНОГО МАССИВА В WINDOWS POWERSHELL 2.0
$Array2 = New-Object 'object[,]' n1,n2                          //2-хмерныймассив[,](число строк,число столбцов)
$Array3 = New-Object 'object[,,]' n1,n2,n3                  //3-хмерный[,,]разделяет 3числа
$Array4 = New-Object 'object[,,,]' n1,n2,nЗ,n4

ПРИМЕР СОЗДАНИЯ ДВУМЕРНОГО МАССИВА В WINDOWS POWERSHELL 2.0
1	Windows Client	7 SP1
2	Windows Server	2008 R2 SP1
3	SQL Server	2008 R2
4	Exchange Server	2010 SP1
5	Sharepoint Server	2010
-----------------------------------

#Create Array                                                    //создать массив двухмерный
$array=New-object 'object[,]' 5,3                   //5строк, 3 столбца
#Insert values in Array                                       //ввод данных в массив
$array[0,0]=1
$array[1,0]=2
$array[2,0]=3
$array[3,0]=4
$array[4,0]=5
###
$array[0,1]='Windows Client'
$array[1,1]='Windows Server'
$array[2,1]='SQL Server'
$array[3,1]='Exchange Server'
$array[4,1]='Sharepoint Server'
###
$array[0,2]='7 SP1'
$array[1,2]='2008 R2 SP1'
$array[2,2]='2008 R2'
$array[3,2]='2010 SP1'
$array[4,2]='2010'
#Screen Array                                     //вывод на экран массива
#$array                                                //если раскоментировать(убрать знак, то массив будет в последовательную строку
#Custom view for array
clear-host
write-host $array[0,0]`t $array[0,1]`t $array[0,2]
write-host $array[1,0]`t $array[1,1]`t $array[1,2]
write-host $array[2,0]`t $array[2,1]`t`t $array[2,2]
write-host $array[3,0]`t $array[3,1]`t $array[3,2]
write-host $array[4,0]`t $array[4,1]`t $array[4,2]
------------------------

1 	 Windows Client 	 7 SP1
2 	 Windows Server 	 2008 R2 SP1
3 	 SQL Server 	 2008 R2
4 	 Exchange Server 	 2010 SP1
5 	 Sharepoint Server 	 2010

____________________________________________________________________________

                                      Управление псевдонимами в Windows PowerShell 2.0

                      КОМАНДЛЕТЫ ДЛЯ УПРАВЛЕНИЯ ПСЕВДОНИМАМИ (алиасами) В WINDOWS POWERSHELL 2.0	
КОМАНДЛЕТ	                                              ДЕЙСТВИЕ
Get-Alias	                                                       Получение списка псевдонимов
New-Alias	                                     Создание псевдонима
Set-Alias	                                                       Изменение псевдонима (если нет, то создает) 
Export-Alias	                                     Экспорт псевдонимов
Import-Alias	                                     Импорт псевдонимов


PS C:\>cmd  /c 'dir'/b              переход и работа в комстроке  Windows  cmd

создание алиаса (существуют до закрытия нашей сессии, но если добавить в профиль, то постоянно)
PS C:\>New-Alias -Name directory -Value Get-ChildItem
PS C:\>Get-Alias -Name dire*
с комментариями
PS C:\>Get-Alias  -Definition Get-ChildItem

еще создали
PS C:\>Set-Alias -Name directory2 -Value Get-Command
PS C:\>Get-Alias -Name dire*
изменили
PS C:\>Set-Alias -Name directory2 -Value Get-ChildItem
PS C:\>Get-Alias -Name dire*

можно экспортировать в тхт, и в последствии загружать импортом оттуда
PS C:\>Export-Alias  -Path C:\Users\Irina_999_555\Desktop\1.txt    //создался файл 1.txt на раб столе
PS C:\>Import-Alias  -Path C:\Users\Irina_999_555\Desktop\1.txt   //туча ошибок из-за повторения алиасов, но загружены все 
PS C:\>Get-Alias	
по умолчанию файл сохраняется в формате Csv
PS C:\>Export-Alias  -As Csv -Path C:\Users\Irina_999_555\Desktop\1.csv
 или можно экспортировать в виде скрипта     
 PS C:\>Export-Alias  -As script -Path C:\Users\Irina_999_555\Desktop\1.ps1
--------------------------------------------
список алиасов, используемых сегодня при работе
PS C:\Windows\system32> get-command *alias

CommandType     Name                                                                                                     Definition(комментарии)
-----------     ----                                                                                                     ----------
Cmdlet          Export-Alias                                                                                             Export-Alias [-Path] <String> [[-Name] <String[]>] [-PassThru] [-As <ExportAliasFormat>] [-Append] [...
Cmdlet          Get-Alias                                                                                                Get-Alias [[-Name] <String[]>] [-Exclude <String[]>] [-Scope <String>] [-Verbose] [-Debug] [-ErrorAc...
Cmdlet          Import-Alias                                                                                             Import-Alias [-Path] <String> [-Scope <String>] [-PassThru] [-Force] [-Verbose] [-Debug] [-ErrorActi...
Cmdlet          New-Alias                                                                                                New-Alias [-Name] <String> [-Value] <String> [-Description <String>] [-Option <ScopedItemOptions>] [...
Cmdlet          Set-Alias                                                                                                Set-Alias [-Name] <String> [-Value] <String> [-Description <String>] [-Option <ScopedItemOptions>] [...
PS C:\Windows\system32>
------------------------------------------------------
                                                                                 Функции в Windows PowerShell 2.0

СТРУКТУРА ФУНКЦИЙ В WINDOWS POWERSHELL 2.0
function ИМЯ {
	param	                                      (ПАРАМЕТРЫ)
	Begin { 	                                     КОМАНДЛЕТЫ
                           }
	Process	{
	}	                                      КОМАНДЛЕТЫ
	End {	
	}	                                      КОМАНДЛЕТЫ
}		

--------------------
##function
function MyFunction1{
    Get-Date
    GEt-Process -Name "power*"
}
##
clear-host
MyFunction1
----------------------------

29 апреля 2016 г. 22:35:43

Id      : 5676
Handles : 518
CPU     : 31,5625
Name    : powershell_ise
____________________________________________________________________________
PS C:\WINDOWS\system32\WindowsPowerShell\v1.0> get-command MyFunction1

CommandType     Name                            Definition                     
-----------     ----                            ----------                     
Function        MyFunction1                     ...                            
ExternalScript  MyFunction1.ps1                 P:\скрипты_проект\power_scri...
____________________________________________________________________________


##function
function MyFunction2{
param($proc)
    Get-Date
    GEt-Process -Name $proc
}
##
clear-host
MyFunction2 -proc "power*"
---------------------------------

29 апреля 2016 г. 22:43:56

Id      : 5676
Handles : 521
CPU     : 47,15625
Name    : powershell_ise




____________________________________________________________________________
PS C:\WINDOWS\system32\WindowsPowerShell\v1.0> MyFunction2 -proc "sv*"

29 апреля 2016 г. 22:46:56
Id      : 300
Handles : 584
CPU     : 
Name    : svchost
Id      : 680
Handles : 364
CPU     : 
Name    : svchost
Id      : 1
Handles : 323
CPU     : 
Name    : svchost

Id      : 830
Handles : 538
CPU     : 
Name    : svchost
Id      : 920
Handles : 641
CPU     : 
Name    : svchost
Id      : 102
Handles : 328
CPU     : 
Name    : svchost
Id      : 108
Handles : 1269
CPU     : 
Name    : svchost
Id      : 138
Handles : 311
CPU     : 
Name    : svchost
Id      : 24
Handles : 64
CPU     : 
Name    : svchost
Id      : 27
Handles : 95
CPU     : 
Name    : svchost
Id      : 3176
Handles : 206
CPU     : 
Name    : svchost
Id      : 3608
Handles : 91
CPU     : 
Name    : svchost
Id      : 3752
Handles : 341
CPU     : 
Name    : svchost
____________________________________________________________________________

##function
function MyFunction3{
param($proc, $serv)
    Get-Date
    write-host "Process with Name = $proc"
    Get-Process -Name $proc
    write-host "Service with Name = $serv"
    Get-Service -Name $serv

}
##
clear-host
MyFunction3 -proc "power*" -serv "wua*"
------------------------

29 апреля 2016 г. 22:57:51
Process with Name = power*

Id      : 5676
Handles : 527
CPU     : 73,0625
Name    : powershell_ise

Service with Name = wua*

Status      : Running
Name        : wuauserv
DisplayName : Центр обновления Windows
____________________________________________________________________________

##function
function MyFunction4{
param($proc, $serv)
    Begin {
        write-host "start of MyFunction4"
    }
    Process {    
        Get-Date
        write-host "Process with Name = $proc"
        Get-Process -Name $proc
        write-host "Service with Name = $serv"
        Get-Service -Name $serv
        }
   End {
           write-host "End of MyFunction4"

   }
  }
##
clear-host
MyFunction4 -proc "power*" -serv "wua*"
---------------------

start of MyFunction4

29 апреля 2016 г. 23:13:07
Process with Name = power*

Id      : 5676
Handles : 533
CPU     : 101,6875
Name    : powershell_ise

Service with Name = wua*

Status      : Running
Name        : wuauserv
DisplayName : Центр обновления Windows

End of MyFunction4
____________________________________________________________________________
                                  
                                    Автоматические переменные в Windows PowerShell 2.0
                      АВТОМАТИЧЕСКИЕ ПЕРЕМЕННЫЕ И КОМАНДЛЕТ WHERE-OBJECT

КОМАНДЛЕТ | Where-Object {ФИЛЬТР}
{$_ . ОПЦИЯ СРАВНЕНИЕ "ЗНАЧЕНИЕ"}

PS C:\> get-service -name WinRm | Format-list


Name                : WinRm
DisplayName         : Служба удаленного управления Windows (WS-Management)
Status              : Running
DependentServices   : {}
ServicesDependedOn  : {RPCSS, HTTP}
CanPauseAndContinue : False
CanShutdown         : True
CanStop             : True
ServiceType         : Win32ShareProcess



PS C:\> get-service |where-object {$_.status -eq 'stopped'}

Status   Name               DisplayName
------   ----               -----------
Stopped  AdobeFlashPlaye... Adobe Flash Player Update Service
Stopped  AeLookupSvc        Информация о совместимости приложений
Stopped  ALG                Служба шлюза уровня приложения
Stopped  AppIDSvc           Удостоверение приложения
Stopped  aspnet_state       Служба состояний ASP.NET
Stopped  AxInstSV           Установщик ActiveX (AxInstSV)
Stopped  BBSvc              BingBar Service
Stopped  BDESVC             Служба шифрования дисков BitLocker
Stopped  bthserv            Служба поддержки Bluetooth
Stopped  clr_optimizatio... Microsoft .NET Framework NGEN v2.0....
Stopped  clr_optimizatio... Microsoft .NET Framework NGEN v4.0....
...
PS C:\> get-service |where-object {$_.status -ne 'stopped'}

Status   Name               DisplayName
------   ----               -----------
Running  AdobeARMservice    Adobe Acrobat Update Service
Running  Appinfo            Сведения о приложении
Running  AppMgmt            Управление приложениями
Running  AudioEndpointBu... Средство построения конечных точек ...
Running  Audiosrv           Windows Audio
Running  BBUpdate           BBUpdate
Running  BFE                Служба базовой фильтрации
Running  BITS               Фоновая интеллектуальная служба пер...
Running  Browser            Браузер компьютеров
Running  CertPropSvc        Распространение сертификата
Running  CryptSvc           Службы криптографии
...
АВТОМАТИЧЕСКИЕ ПЕРЕМЕННЫЕ И КОМАНДЛЕТ FOREACH-OBJECT
КОМАНДЛЕТ | ForEach-Object -Process
{
Пошаговая обработка
}
{
КОМАДЛЕТ $_ .НАЗВАНИЕ
}

--------------------
1.Csv
name
  AdobeARMservice    //
  Appinfo            
  AppMgmt         
    Audiosrv           
  BBUpdate           
  BFE                
  BITS               
  Browser        
  CertPropSvc 
  CryptSvc
------------------
Import-Csv c:\...\1.Csv |ForEach-Object -Process {get-service -Name $_.name}

ForEach-Object	
• Автоматизация создания объектов в Exchange Server 2010

----------------------------------------
                                                СТРУКТУРА ФИЛЬТРОВ в WINDOWS POWERSHELL 2.0
function ИМЯ {
Process {
АВТОМАТИЧЕСКАЯ ПЕРЕМЕННАЯ
}
filter ИМЯ {
АВТОМАТИЧЕСКАЯ ПЕРЕМЕННАЯ
}

---------------------------
PS C:\>Set-Location \
PS C:\>Get-service -Name wuauserv | Format-list
создаем переменную с помощью фильтра
PS C:\>filter s_dname1{$_.DisplayName}
PS C:\>Get-service | s_dname1
или с помощью функции
PS C:\>function s_dname2{process{$_.DisplayName}}
PS C:\>Get-Service| s_dname2
-----------------------------------
                                                                                    Server Manager (...)
Roles
Features
Diagnostics
Configuration
Storage

Features: 5 of 42 installed
-----------------------------------
Wndows PowerShell Integrated Scnpting Environment (ISE)
Remote Server Administration Tools
Role Administration Toots
Active Directory Certificate Services Tools
Certification Authority Tools
Online Responder Tools
AD DS and AD LDS Tools
ADDS Tools
AD DS Snap-Ins and Command-Line Tools
Active Directory Admnistrative Center
Server for NIS Tools
AD LDS Snap-Ins and Command-Line Tools
Active Directory module for Windows PowerShell
Active Directory Rights Management Services Tools
DHCP Server Tools
DNS Server Tools
Fax Server Tools
File Services Tools
Distributed File System Tools
File Server Resource Manager Tools
Services for Network File System Tools
Hyper-V Tools
Network Policy and Access Services Tools
Print and Document Services Tools
Web Server (IIS) Tools
Telnet Client
Telnet Server
.NET Framework 3.5.1 Features
.NET Framework 3.5.1
---------------------------------------------установленные C:\Users\...\Desktop\1.txt
.net Framework 3.5.1 Features
.net Framework 3.5.1
Remote server Administration Tools
Role Administration Tools
Active Directory certificate services Tools
certification Authority Tools
online Responder Tools
AD DS and AD LDS Tools
AD DS Tools
ad DS snap-ins and Command-Line Tools
Active Directory Administrative center
server for nis Tools
ad LDS Snap-ins and Command-Line Tools
Active Directory module for windows Powershell
Active Directory Rights Management services Tools
dhcp server Tools
dns server Tools
Fax server Tools
File services Tools
Distributed File system Tools
File server Resource Manager Tools
services for Network File system Tools
Hyper-v Tools
Network Policy and Access services Tools
Print and Document services Tools
web server (IIS) Tools
Telnet client
Telnet server
windows Powershell integrated scripting Environment (ISE)
PS C:\>Get-Module -Name servermanager
PS C:\>Get-Module -ListAvailable
PS C:\>Import -Module  servermanager
PS C:\>Get-WindowsFeature
...
[X] File Server Resource Manager Tools                     RSAT-FSRM-Mgnt
[X] Services for Network File System Tools	RSAT-NFS-Admin
[X] Hyper-U Tools	                                                      RSAT-Hyper-U
[X] Network Policy and Access Services Tools	RSAT-NPAS
[X] Print and Document Services Tools	                  RSAT-Print-Services
[ ] Renote Desktop Services Tools	                  RSAT-RDS
[ ] Renote Desktop Session Host Tools	                  RSAT-RDS-RemoveApp
[ ] Renote Desktop Gateway Tools	                  RSAT-RDS-Gateway
....

PS C:\>Get-WindowsFeature  -Name telnet-c* | Format-List
PS C:\>Get-WindowsFeature| Where-Object{$_.installed -eq $true}
PS C:\>filter s_dname1{$_.DisplayName}
PS C:\>Get-WindowsFeature| Where-Object{$_.installed -eq $true} | s_dname1>C:\Users\...\Desktop\1.txt
------------------------------------------
                                                    Встроенные функции в Windows PowerShell 2.0
ПРОСМОТР ФУНКЦИЙ
                    Function
              [PSProvider]
Function                      Get-Command
[PS Drive]                        [cmdlet]

PS C:\>Get-Command  -CommandType  function
PS C:\>Get-item function:\Clear-host | Format-List

Удаленный запуск
PS C:\>Enable-PSRemoting
Y
Y
Y
PS C:\>Enter-PSSession ......namecomp...
PS C:\>Get-Command -name Disable-PSRemoting |Format-List

отключение удаленного запуска
PS C:\Windows\system32> Get-Command -name Disable-PSRemoting |Format-List


Name        : Disable-PSRemoting
CommandType : Function
Definition  :
              [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact="High")]
              param(
                  [Parameter()]
                  [switch]
                  $force = ($false)
              )
              process {

                  # Disable all Session Configurations
                  try {
                    $PSBoundParameters.Add("Name","*")
                    Disable-PSSessionConfiguration @PSBoundParameters
                  } catch {
                     throw
                  }

              }

PS C:\Windows\system32>

создаем функцию, присваиваем ей имя-отключение удаленного запуска

function MyFunc1{
 [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact="High")]
              param(
                  [Parameter()]
                  [switch]
                  $force = ($false)
              )
              process {

                  # Disable all Session Configurations
                  try {
                    $PSBoundParameters.Add("Name","*")
                    Disable-PSSessionConfiguration @PSBoundParameters
                  } catch {
                     throw
                  }

              }
}
clear-host
MyFunc1
-----------------------

ПРИМЕРЫ ВСТРОЕННЫЙ функций в WINDOWS POWERSHELL 2.0
•	Clear-Host
•	Enable-PSRemoting
•	Disable-PSRemoting
•	mkdir
•	more
•	prompt
•	TabExpansion	

PS C:\Windows\system32>Get-Command -name prompt |Format-list
 ###peeimenovanie stroki priglasheniya
 function prompt {$(if (test-path variable:/PSDebugContext) { '[DBG]: ' } else { '' }) + 'PS ' + $(Get-Location) + $(if ($nestedpromptlevel -ge 1) { '>>' }) + '> '} 
 
 function prompt{'Windows PowerShell 2.0>'}
----------------------------------------------------------------------
                                                              Объекты в Windows PowerShell 2.0
Объекты бывают 3-х  видов:

СОМ-ОБЪЕКТЫ В WINDOWS POWERSHELL
Объекты .NET Framework в Windows PowerShell 2.0
WMI объекты в Windows PowerShell 2.0
----------------------
У каждого объекта есть:
                                Objects
Object's type
Object's methods 
Object's properties
---------------
Тип объекта - это информация о природе этого объекта.
Методы объекты - это действия которые можно совершать над элементами, представляемым данным объектом.
Свойство объекта - это сведения о состоянии объекта. Get-Member

PS C:\Windows\system32> Get-ChildItem |Get-Member


   TypeName: System.IO.DirectoryInfo

Name                      MemberType                                  Definition
----                               ----------                                        ----------
Mode                      CodeProperty                               System.String Mode{get=Mode;}
Create                    Method         System.Void Create(System.Security.AccessControl.DirectorySecurity directorySecurity), System.Void Create()
CreateObjRef              Method                        System.Runtime.Remoting.ObjRef CreateObjRef(type requestedType)
CreateSubdirectory        Method         System.IO.DirectoryInfo CreateSubdirectory(string path), System.IO.DirectoryInfo CreateSubdirectory(string path, System.Security.AccessControl.DirectorySecurity directorySecurity)

Delete                    Method         System.Void Delete(), System.Void Delete(bool recursive)
Equals                    Method         bool Equals(System.Object obj)
GetAccessControl          Method         System.Security.AccessControl.DirectorySecurity GetAccessControl(), System.Security.AccessControl.DirectorySecurity GetAccessControl(System.Security.AccessControl.AccessControlSect...
GetDirectories            Method         System.IO.DirectoryInfo[] GetDirectories(string searchPattern), System.IO.DirectoryInfo[] GetDirectories(), System.IO.DirectoryInfo[] GetDirectories(string searchPattern, System.IO...
GetFiles                  Method         System.IO.FileInfo[] GetFiles(string searchPattern), System.IO.FileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption), System.IO.FileInfo[] GetFiles()
GetFileSystemInfos        Method         System.IO.FileSystemInfo[] GetFileSystemInfos(string searchPattern), System.IO.FileSystemInfo[] GetFileSystemInfos()
GetHashCode               Method         int GetHashCode()
GetLifetimeService        Method         System.Object GetLifetimeService()
GetObjectData             Method         System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
GetType                   Method         type GetType()
InitializeLifetimeService Method         System.Object InitializeLifetimeService()
MoveTo                    Method         System.Void MoveTo(string destDirName)
Refresh                   Method         System.Void Refresh()
SetAccessControl          Method         System.Void SetAccessControl(System.Security.AccessControl.DirectorySecurity directorySecurity)
ToString                  Method         string ToString()
PSChildName               NoteProperty   System.String PSChildName=0409
PSDrive                   NoteProperty   System.Management.Automation.PSDriveInfo PSDrive=C
PSIsContainer             NoteProperty   System.Boolean PSIsContainer=True
PSParentPath              NoteProperty   System.String PSParentPath=Microsoft.PowerShell.Core\FileSystem::C:\Windows\system32
PSPath                    NoteProperty   System.String PSPath=Microsoft.PowerShell.Core\FileSystem::C:\Windows\system32\0409
PSProvider                NoteProperty   System.Management.Automation.ProviderInfo PSProvider=Microsoft.PowerShell.Core\FileSystem
Attributes                Property       System.IO.FileAttributes Attributes {get;set;}
CreationTime              Property       System.DateTime CreationTime {get;set;}
CreationTimeUtc           Property       System.DateTime CreationTimeUtc {get;set;}
Exists                    Property       System.Boolean Exists {get;}
Extension                 Property       System.String Extension {get;}
FullName                  Property       System.String FullName {get;}
LastAccessTime            Property       System.DateTime LastAccessTime {get;set;}
LastAccessTimeUtc         Property       System.DateTime LastAccessTimeUtc {get;set;}
LastWriteTime             Property       System.DateTime LastWriteTime {get;set;}
LastWriteTimeUtc          Property       System.DateTime LastWriteTimeUtc {get;set;}
Name                      Property       System.String Name {get;}
Parent                    Property       System.IO.DirectoryInfo Parent {get;}
Root                      Property       System.IO.DirectoryInfo Root {get;}
BaseName                  ScriptProperty System.Object BaseName {get=$this.Name;}


   TypeName: System.IO.FileInfo

Name                      MemberType     Definition
----                      ----------     ----------
Mode                      CodeProperty   System.String Mode{get=Mode;}
AppendText                Method         System.IO.StreamWriter AppendText()
CopyTo                    Method         System.IO.FileInfo CopyTo(string destFileName), System.IO.FileInfo CopyTo(string destFileName, bool overwrite)
Create                    Method         System.IO.FileStream Create()
CreateObjRef              Method         System.Runtime.Remoting.ObjRef CreateObjRef(type requestedType)
CreateText                Method         System.IO.StreamWriter CreateText()
Decrypt                   Method         System.Void Decrypt()
Delete                    Method         System.Void Delete()
Encrypt                   Method         System.Void Encrypt()
Equals                    Method         bool Equals(System.Object obj)
GetAccessControl          Method         System.Security.AccessControl.FileSecurity GetAccessControl(), System.Security.AccessControl.FileSecurity GetAccessControl(System.Security.AccessControl.AccessControlSections inclu...
GetHashCode               Method         int GetHashCode()
GetLifetimeService        Method         System.Object GetLifetimeService()
GetObjectData             Method         System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
GetType                   Method         type GetType()
InitializeLifetimeService Method         System.Object InitializeLifetimeService()
MoveTo                    Method         System.Void MoveTo(string destFileName)
Open                      Method         System.IO.FileStream Open(System.IO.FileMode mode), System.IO.FileStream Open(System.IO.FileMode mode, System.IO.FileAccess access), System.IO.FileStream Open(System.IO.FileMode mo...
OpenRead                  Method         System.IO.FileStream OpenRead()
OpenText                  Method         System.IO.StreamReader OpenText()
OpenWrite                 Method         System.IO.FileStream OpenWrite()
Refresh                   Method         System.Void Refresh()
Replace                   Method         System.IO.FileInfo Replace(string destinationFileName, string destinationBackupFileName), System.IO.FileInfo Replace(string destinationFileName, string destinationBackupFileName, b...
SetAccessControl          Method         System.Void SetAccessControl(System.Security.AccessControl.FileSecurity fileSecurity)
ToString                  Method         string ToString()
PSChildName               NoteProperty   System.String PSChildName=1100
PSDrive                   NoteProperty   System.Management.Automation.PSDriveInfo PSDrive=C
PSIsContainer             NoteProperty   System.Boolean PSIsContainer=False
PSParentPath              NoteProperty   System.String PSParentPath=Microsoft.PowerShell.Core\FileSystem::C:\Windows\system32
PSPath                    NoteProperty   System.String PSPath=Microsoft.PowerShell.Core\FileSystem::C:\Windows\system32\1100
PSProvider                NoteProperty   System.Management.Automation.ProviderInfo PSProvider=Microsoft.PowerShell.Core\FileSystem
Attributes                Property       System.IO.FileAttributes Attributes {get;set;}
CreationTime              Property       System.DateTime CreationTime {get;set;}
CreationTimeUtc           Property       System.DateTime CreationTimeUtc {get;set;}
Directory                 Property       System.IO.DirectoryInfo Directory {get;}
DirectoryName             Property       System.String DirectoryName {get;}
Exists                    Property       System.Boolean Exists {get;}
Extension                 Property       System.String Extension {get;}
FullName                  Property       System.String FullName {get;}
IsReadOnly                Property       System.Boolean IsReadOnly {get;set;}
LastAccessTime            Property       System.DateTime LastAccessTime {get;set;}
LastAccessTimeUtc         Property       System.DateTime LastAccessTimeUtc {get;set;}
LastWriteTime             Property       System.DateTime LastWriteTime {get;set;}
LastWriteTimeUtc          Property       System.DateTime LastWriteTimeUtc {get;set;}
Length                    Property       System.Int64 Length {get;}
Name                      Property       System.String Name {get;}
BaseName                  ScriptProperty System.Object BaseName {get=if ($this.Extension.Length -gt 0){$this.Name.Remove($this.Name.Length - $this.Extension.Length)}else{$this.Name};}
VersionInfo               ScriptProperty System.Object VersionInfo {get=[System.Diagnostics.FileVersionInfo]::GetVersionInfo($this.FullName);}
PS C:\Windows\system32>

PS C:\Windows\system32> get-date|get-member

берем тип, добавляем в квадратные скобки ставим  ::Now и жмем интер
PS C:\Windows\system32>[System.DateTime]::Now
4 мая 2016 г. 20:52:27



посчитать  длину символов в переменной

PS C:\Windows\system32> $a='qwertyuiop[]asdfghjkl;zxcvbnm,./'
PS C:\Windows\system32> $a
qwertyuiop[]asdfghjkl;zxcvbnm,./
PS C:\Windows\system32> $a|get-member
$a.Length

   TypeName: System.String

Name             MemberType            Definition
----             ----------            ----------
Clone            Method                System.Object Clone()
CompareTo        Method                int CompareTo(System.Object value), int CompareTo(string strB)
Contains         Method                bool Contains(string value)
CopyTo           Method                System.Void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
EndsWith         Method                bool EndsWith(string value), bool EndsWith(string value, System.StringComparison comparisonType), bool EndsWith(string value, bool ignoreCase, System.Globalization.CultureInfo culture)
Equals           Method                bool Equals(System.Object obj), bool Equals(string value), bool Equals(string value, System.StringComparison comparisonType)
GetEnumerator    Method                System.CharEnumerator GetEnumerator()
GetHashCode      Method                int GetHashCode()
GetType          Method                type GetType()
GetTypeCode      Method                System.TypeCode GetTypeCode()
IndexOf          Method                int IndexOf(char value), int IndexOf(char value, int startIndex), int IndexOf(char value, int startIndex, int count), int IndexOf(string value), int IndexOf(string value, int startIn...
IndexOfAny       Method                int IndexOfAny(char[] anyOf), int IndexOfAny(char[] anyOf, int startIndex), int IndexOfAny(char[] anyOf, int startIndex, int count)
Insert           Method                string Insert(int startIndex, string value)
IsNormalized     Method                bool IsNormalized(), bool IsNormalized(System.Text.NormalizationForm normalizationForm)
LastIndexOf      Method                int LastIndexOf(char value), int LastIndexOf(char value, int startIndex), int LastIndexOf(char value, int startIndex, int count), int LastIndexOf(string value), int LastIndexOf(strin...
LastIndexOfAny   Method                int LastIndexOfAny(char[] anyOf), int LastIndexOfAny(char[] anyOf, int startIndex), int LastIndexOfAny(char[] anyOf, int startIndex, int count)
Normalize        Method                string Normalize(), string Normalize(System.Text.NormalizationForm normalizationForm)
PadLeft          Method                string PadLeft(int totalWidth), string PadLeft(int totalWidth, char paddingChar)
PadRight         Method                string PadRight(int totalWidth), string PadRight(int totalWidth, char paddingChar)
Remove           Method                string Remove(int startIndex, int count), string Remove(int startIndex)
Replace          Method                string Replace(char oldChar, char newChar), string Replace(string oldValue, string newValue)
Split            Method                string[] Split(Params char[] separator), string[] Split(char[] separator, int count), string[] Split(char[] separator, System.StringSplitOptions options), string[] Split(char[] separ...
StartsWith       Method                bool StartsWith(string value), bool StartsWith(string value, System.StringComparison comparisonType), bool StartsWith(string value, bool ignoreCase, System.Globalization.CultureInfo ...
Substring        Method                string Substring(int startIndex), string Substring(int startIndex, int length)
ToCharArray      Method                char[] ToCharArray(), char[] ToCharArray(int startIndex, int length)
ToLower          Method                string ToLower(), string ToLower(System.Globalization.CultureInfo culture)
ToLowerInvariant Method                string ToLowerInvariant()
ToString         Method                string ToString(), string ToString(System.IFormatProvider provider)
ToUpper          Method                string ToUpper(), string ToUpper(System.Globalization.CultureInfo culture)
ToUpperInvariant Method                string ToUpperInvariant()
Trim             Method                string Trim(Params char[] trimChars), string Trim()
TrimEnd          Method                string TrimEnd(Params char[] trimChars)
TrimStart        Method                string TrimStart(Params char[] trimChars)
Chars            ParameterizedProperty char Chars(int index) {get;}
Length           Property              System.Int32 Length {get;}

PS C:\Windows\system32> $a.Length
32

PS C:\Windows\system32> $b=($a.Chars (0)+$a.Chars (1)+$a.Chars (2)+$a.Chars (3)+$a.Chars (4)+$a.Chars (5))
PS C:\Windows\system32> $b
qwerty
-----------
ToUpper  -верхний регистр(большие)
ToLower  -нижний регистр(маленькие)
ToCharArray - массив элементов
-----
PS C:\Windows\system32> $b; $b.ToUpper(); $b.ToLower() ;$b.ToCharArray ()
QWERTY
qwerty
q
w
e
r
t
y
--------------------
копирование скрипта и вычисление даты создания копии
PS C:\Windows\system32>(get-childitem .\1.ps1).copyto("C:\user\...\copy1.ps1")

скопировали и передаем в переменную имя файла в кавычках
PS C:\Windows\system32>$c=Get-Childitem'.\copy1.ps1'

PS C:\Windows\system32>$c
...
PS C:\Windows\system32>$c.CreationTime
...
------------------------------

ФОРМАТЫ И ТИПЫ ОБЪЕКТОВ В WINDOWS POWERSHELL 2.0
>	Certificate.format.psl xml
>	Diagnostics.Format.psl xml
>	DotNetTypes.format.ps1 xml
>	FileSystem.format.ps1 xml
>	getevent.types.pslxml
>	Help.format.pslxml
>	PowerShellCore.format.ps1 xml
>	PowerShellTrace.format.pslxml
>	Registry.formatpslxml	
>	types.pslxml
>	WSMan.Foramat.pslxml
-----------------------------------------воздействуем только на текущую оболочку (можно исп в скриптах)
PS C:\Windows\system32> $Host
PS C:\Windows\system32> $Host|get-member
PS C:\Windows\system32> $Host.UI |get-member
PS C:\Windows\system32> $Host.UI.RawUI
PS C:\Windows\system32> $Host.UI.RawUI.WindowTitle ='okno 2.0'
PS C:\Windows\system32> $Host.UI.RawUI.ForegroundColor ='green'
PS C:\Windows\system32> $a=$Host.UI.RawUI
----------------------------------------------
                                                           СОМ-ОБЪЕКТЫ В WINDOWS POWERSHELL 2.0 
ProgID	                               Приложение
cenroll.cenroll	               Службы регистрации заявок на выпуск сертификатов
hnetcfg.fwmgr	                Управление Windows Firewall
microsoft.update.autoupdate	
microsoft.update.installer	
microsoft.update.searches	Управление Microsoft Update
microsoft.update.session	
microsoft.update.systeminfo	
shell.application	                 Управление Windows Explorer
shell.localmachine	                 Получение информации о компьютере
sqldmo.sqlserver                        Microsoft SQL Server
access.application                      Microsoft Office Access
excell.application                       Microsoft Office Excel
excell.sheet                                Microsoft Office Excel
outlook.application                   Microsoft Office Outlook
powerpoint.application            Microsoft Office PowerPoint
word.application                        Microsoft Office Word
word.document                         Microsoft Office Word
-------------------------------------
переменная-новый объект-ком_объект-имя объекта
PS C:\Windows\system32> $a = New-Object -ComObject hnetcfg.fwmgr
PS C:\Windows\system32> $a | Get-Member
выбрали свойство в колонке Property или метод в колонке Method
PS C:\Windows\system32> $a.LocalPolicy
PS C:\Windows\system32> $a.LocalPolicy|Get-Member
PS C:\Windows\system32> $a.LocalPolicy.CurrentProfile
PS C:\Windows\system32> $a.LocalPolicy.CurrentProfile|Get-Member

экземпляр пауэршел, локальная политика, текущий профиль
PS C:\Windows\system32> $b=$a.LocalPolicy.CurrentProfile
PS C:\Windows\system32> $b.IcmpSettings
разрешены только исходящие пакеты. пинг не разрешен AllowOutboundPacketTooBig           : True

какие приложения работают через файэрволл
PS C:\Windows\system32> $b=$a.LocalPolicy.CurrentProfile
PS C:\Windows\system32> $b.AuthorizedApplications

смотрим, что на раб столе
PS C:\Windows\system32> $c= New-Object -ComObject shell.application
PS C:\Windows\system32> $c| Get-Member
PS C:\Windows\system32> $c.Open('C:\Users\Irina\Desktop')

домашний каталог пауэршел
PS C:\Windows\system32> $c= New-Object -ComObject shell.application
PS C:\Windows\system32> $c.Open("$pshome")

всегда очистить переменные
PS C:\Windows\system32>get-variable
PS C:\Windows\system32>remove-variable -name a,b,c
---------------------------------------------------------
пишем скрипт, получающий информацию из системы -имя процесса, его идентификатор, потребление процессорного времени, и какой объем виртуальной памяти ему выделен,и вносящий ее в эксель
PS C:\Windows\system32> powershell_Ise
...
пишем скрипт получающий инфу о дисках (Excel-2016 работает)
# Созадём объект Excel
$Excel = New-Object -ComObject Excel.Application

# Делаем его видимым
$Excel.Visible = $true
# Добавляем рабочую книгу
$WorkBook = $Excel.Workbooks.Add()
$LogiclDisk = $WorkBook.Worksheets.Item(1)
# Переименовываем лист
$LogiclDisk.Name = 'Логические диски'

# Заполняем ячейки - шапку таблицы
$LogiclDisk.Cells.Item(1,1) = 'Буква диска'
$LogiclDisk.Cells.Item(1,2) = 'Метка'
$LogiclDisk.Cells.Item(1,3) = 'Размер (ГБ)'
$LogiclDisk.Cells.Item(1,4) = 'Свободно (ГБ)'# Переходим на следующую строку...
$Row = 2
$Column = 1

# ... и заполняем данными в цикле по логическим разделам
Get-WmiObject Win32_LogicalDisk | ForEach-Object `
{
    # DeviceID
    $LogiclDisk.Cells.Item($Row, $Column) = $_.DeviceID
    $Column++
    
    # VolumeName
    $LogiclDisk.Cells.Item($Row, $Column) = $_.VolumeName
    $Column++
    
    # Size
    $LogiclDisk.Cells.Item($Row, $Column) = ([Math]::Round($_.Size/1GB, 2))
    $Column++
    
    # Free Space
    $LogiclDisk.Cells.Item($Row, $Column) = ([Math]::Round($_.FreeSpace/1GB, 2))
    
    # Переходим на следующую строку и возвращаемся в первую колонку
    $Row++
    $Column = 1
}
# Выделяем жирным шапку таблицы
$LogiclDisk.Rows.Item(1).Font.Bold = $true

# Выравниваем для того, чтобы их содержимое корректно отображалось в ячейке
$UsedRange = $LogiclDisk.UsedRange
$UsedRange.EntireColumn.AutoFit() | Out-Null
# Добавляем лист
$WorkBook.Worksheets.Add()
$PhysicalDrive = $WorkBook.Worksheets.Item(1)

# Переименовываем лист
$PhysicalDrive.Name = 'Физические диски'

# Заполняем ячейки - шапку таблицы
$PhysicalDrive.Cells.Item(1,1) = 'Модель'
$PhysicalDrive.Cells.Item(1,2) = 'Размер (ГБ)'
$PhysicalDrive.Cells.Item(1,3) = 'Кол-во разделов'
$PhysicalDrive.Cells.Item(1,4) = 'Тип'

# Переходим на следующую строку...
$Row = 2
$Column = 1

# ... и заполняем данными в цикле по физическим дискам
Get-WmiObject Win32_DiskDrive | ForEach-Object `
{
    # Model
    $PhysicalDrive.Cells.Item($Row, $Column) = $_.Model
    $Column++
    
    # Size
    $PhysicalDrive.Cells.Item($Row, $Column) = ([Math]::Round($_.Size /1GB, 1))
    $Column++
    
    # Partitions
    $PhysicalDrive.Cells.Item($Row, $Column) = $_.Partitions
    $Column++
    
    # InterfaceType
    $PhysicalDrive.Cells.Item($Row, $Column) = $_.InterfaceType
    
    # Переходим на следующую строку и возвращаемся в первую колонку
    $Row++
    $Column = 1
}

# Выделяем жирным шапку
$PhysicalDrive.Rows.Item(1).Font.Bold = $true

# Выравниваем для того, чтобы их содержимое корректно отображалось в ячейке
$UsedRange = $PhysicalDrive.UsedRange
$UsedRange.EntireColumn.AutoFit() | Out-Null
$WorkBook.SaveAs('F:\gorilla\1\1.xlsx')
$Excel.Quit()
--------------------------------------------------------
                          Воспроизведение речи через Powershell

PS C:\Windows\system32> $synthesizer |get-member
   TypeName: System.Speech.Synthesis.SpeechSynthesizer
Name                          MemberType Definition
----                          ---------- ----------
BookmarkReached               Event      System.EventHandler`1[System.Speech.Synthesis.BookmarkReachedEventArgs] BookmarkReached(System.Object, System.Speech.Synthesis.BookmarkReachedEventArgs)
PhonemeReached                Event      System.EventHandler`1[System.Speech.Synthesis.PhonemeReachedEventArgs] PhonemeReached(System.Object, System.Speech.Synthesis.PhonemeReachedEventArgs)
SpeakCompleted                Event      System.EventHandler`1[System.Speech.Synthesis.SpeakCompletedEventArgs] SpeakCompleted(System.Object, System.Speech.Synthesis.SpeakCompletedEventArgs)
SpeakProgress                 Event      System.EventHandler`1[System.Speech.Synthesis.SpeakProgressEventArgs] SpeakProgress(System.Object, System.Speech.Synthesis.SpeakProgressEventArgs)
SpeakStarted                  Event      System.EventHandler`1[System.Speech.Synthesis.SpeakStartedEventArgs] SpeakStarted(System.Object, System.Speech.Synthesis.SpeakStartedEventArgs)
StateChanged                  Event      System.EventHandler`1[System.Speech.Synthesis.StateChangedEventArgs] StateChanged(System.Object, System.Speech.Synthesis.StateChangedEventArgs)
VisemeReached                 Event      System.EventHandler`1[System.Speech.Synthesis.VisemeReachedEventArgs] VisemeReached(System.Object, System.Speech.Synthesis.VisemeReachedEventArgs)
VoiceChange                   Event      System.EventHandler`1[System.Speech.Synthesis.VoiceChangeEventArgs] VoiceChange(System.Object, System.Speech.Synthesis.VoiceChangeEventArgs)
AddLexicon                    Method     System.Void AddLexicon(System.Uri uri, string mediaType)
Dispose                       Method     System.Void Dispose()
Equals                        Method     bool Equals(System.Object obj)
GetCurrentlySpokenPrompt      Method     System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt()
GetHashCode                   Method     int GetHashCode()
GetInstalledVoices            Method     System.Collections.ObjectModel.ReadOnlyCollection[System.Speech.Synthesis.InstalledVoice] GetInstalledVoices(), System.Collections.ObjectModel.ReadOnlyCollection[System.Speech.Synt...
GetType                       Method     type GetType()
Pause                         Method     System.Void Pause()
RemoveLexicon                 Method     System.Void RemoveLexicon(System.Uri uri)
Resume                        Method     System.Void Resume()
SelectVoice                   Method     System.Void SelectVoice(string name)
SelectVoiceByHints            Method     System.Void SelectVoiceByHints(System.Speech.Synthesis.VoiceGender gender), System.Void SelectVoiceByHints(System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.Voice...
SetOutputToAudioStream        Method     System.Void SetOutputToAudioStream(System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo)
SetOutputToDefaultAudioDevice Method     System.Void SetOutputToDefaultAudioDevice()
SetOutputToNull               Method     System.Void SetOutputToNull()
SetOutputToWaveFile           Method     System.Void SetOutputToWaveFile(string path), System.Void SetOutputToWaveFile(string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo)
SetOutputToWaveStream         Method     System.Void SetOutputToWaveStream(System.IO.Stream audioDestination)
Speak                         Method     System.Void Speak(string textToSpeak), System.Void Speak(System.Speech.Synthesis.Prompt prompt), System.Void Speak(System.Speech.Synthesis.PromptBuilder promptBuilder)
SpeakAsync                    Method     System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak), System.Void SpeakAsync(System.Speech.Synthesis.Prompt prompt), System.Speech.Synthesis.Prompt SpeakAsync(System.Speec...
SpeakAsyncCancel              Method     System.Void SpeakAsyncCancel(System.Speech.Synthesis.Prompt prompt)
SpeakAsyncCancelAll           Method     System.Void SpeakAsyncCancelAll()
SpeakSsml                     Method     System.Void SpeakSsml(string textToSpeak)
SpeakSsmlAsync                Method     System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak)
ToString                      Method     string ToString()
Rate                          Property   System.Int32 Rate {get;set;}
State                         Property   System.Speech.Synthesis.SynthesizerState State {get;}
Voice                         Property   System.Speech.Synthesis.VoiceInfo Voice {get;}
Volume                        Property   System.Int32 Volume {get;set;}
                                                         
                                            
PS C:\Windows\system32> $synthesizer.GetInstalledVoices() | ForEach-Object { $_.VoiceInfo }
...

пишем скрипт

Add-Type -AssemblyName System.Speech
$synthesizer = New-Object -TypeName System.Speech.Synthesis.SpeechSynthesizer
$synthesizer.Speak('командная строка')
------------------------------------------------------
                                                Объекты .NET Framework в Windows PowerShell 2.0

•	Microsoft.Win32.Registry
•	Microsoft.Win32.RegistryKey
•	SystemAppDomain
•	System.Array
•	System.Console
•	System.Convert
•	System.Datetime
•	System.Diagnostics Debug
•	System.Diagnostics.EventLog
•	System.Diagnostics.Process
•	System Drawing.Bitmap
•	System.Drawing. Image
•	System.Environment
•	System.Guid
•	System.IO.Stream
•	System.Management. Automation. PowerShell
•	System.Math
•	System.Net.Dns
•	System. Net. NetworkCredential
•	System. Net. WebClient
•	System. Random
•	System.Reflection.Assembly
•	System.Security.Principal.WellKnownSidType
•	System. Security. Principal.WindowsBuiltInRole
•	System.Security.Principal.WindowsIdentity
•	System.Secunty.Principal.WindowsPrincipal
•	System.Security.SecureString
•	System.String
•	System.Text.RegularExpressions.Regex
•	System.Threading.Thread	
•	System.Type
•	System. Uri
•	System. Windows.Forms.FlowLayoutPanel
•	System.Windows.Forms.Form

Для того, чтобы все объекты работали необходимо подгрузить сборки, разделять объекты и классы .NET Framework
-------------------------------------------события безопасности------------------------
РАБОТА С ОБЪЕКТАМИ .NET FRAMEWORK В WINDOWS POWERSHELL2.0
                                                           [Объект] ::Метод. Свойство

объект можно передать в переменную и с помощью |get-member,  |get-member  -static  можно посмотреть их свойства
PS C:\Windows\system32> [system.datetime] |get-member -static

PS C:\Windows\system32>get-EventLog  -LogName security                     //с правами адм!
PS C:\Windows\system32>$a=[system.datetime]::Today.AddDays(-30)     //за последние 30 дней, события безопасности
PS C:\Windows\system32>$a
PS C:\Windows\system32>Get-EventLog  -LogName security  -After $a

или
C:\PS>get-wmiobject          win32_nteventlogfile          -filter
"logfilename='TestLog'" | foreach {$_. sources}   MyApp TestApp
    C:\PS> remove-eventlog -source MyApp
    C:\PS>      get-wmiobject       win32_nteventlogfile       -filter
"logfilename='TestLog'} | foreach {$_. sources} TestApp
------------------------------------------------------------------------------------
                                                                           работа с dns сервером

Administrator Windows PowerShell
Windows PowerShell
Copyright <C> 2009 Microsoft Corporation. All rights reserved.

PS C:\Users\adninistrator.POWERSHELL> Set-Location \
PS C:\> [systen.net.dns ] |Get-Member
PS C:\> [system.net.dns ] |Get-Member  -Static
...
GetHostByAddress Method static       //которые позволяют нам делать запросы в прямую и обратную зоны при             GetHostByName  Method    static      //помощи   подачи айпи адреса или имени хоста
...

PS C:\> [system.net.dns]::GetHostByName(’psclient01')    //при помощи   подачи  имени хоста
или
PS С:\> [systen.net .dns 1: :GetHostByAddress(' 10.0.1.2')    //при помощи   подачи айпиадреса 
получаем запись, указывающую на наш контроллер домена
------------------------
                                                                WMI объекты в Windows PowerShell 2.0
get-help get-wmiobject -detailed
                                                                                WMI КЛАССЫ
                                                                                 WMI Classes
Win32 Classes
WMI Registry Classes
WMI System Classes
Monitor Display Classes
IPMI Classes
MSFT Classes
CIM Classes
Standard Consumer Classes
MSMCA Classes
WMI C++ Classes
-------------------------
 классы управления WMI 
                                                                           WIN32 КЛАССЫ
                                                                               Win32 Classes
Computer System Hardware Classes
Installed Applications Classes
Operating System Classes
Performance Counter Classes
Security Descriptor Helper Class
WMI Service Management Classes
-------------------------------------------------
                                                         WIN32 COMPUTER SYSTEM HARDWARE CLASSES
                                                                Win32 Computer System Hardware Classes

                                           Cooling Device CLasses
Win32_Fan
Win32_HeatPipe
Win32_Refrigeration
Win32_TemperatureProbe

                                           Input Device CLasses
Win32_Keyboard
Win32_PointingDevice

                                           Mass Storage CLasses
Win32_ AutochkSetting
Win32_CDROMDrrve
Win32_ DiskDrive
Win32_FloppyDrive

                                           Motherboard, Controller, and Port CLasses
Win32_1394Controller
Wi n32_1394ControllerDevice
Win32_AI locatedResource
Win32_AssociatedProcessorMemory

                                           Networking Device CLasses
Win32_NetworkAdapter
Win32_NetworkAdapterConfiguration
Win32_NetworkAdapterSetting

                                            Power CLasses
Wirt32_AssociatedBattery
Win32_Battery
Wi n32_CurrentProbe
Win32_PortableBattery

                                           Printing CLasses
Win32_DriverForDevice
Win32_Printer
Win32_PrinterConfiguration
Win32_PrinterController

                                            Telephony CLasses
Wm32_POTSModem
Win32_POTSModemToSerialPort

                                         Video and Monitor CLasses
Win32_ DesktopMonitor
Win32_ DisplayConfiguration
Win32_DisplayControllerConfiguration
Win32_ VideoConfiguration
-----------------------------
                                                                                         WMI QUERY LANGUAGE
Общий синтаксис:
Select * from Класс where Условие
Синтаксис условий:
Оператор	Значение
>	Больше
<	Меньше
=	Равно
like	Частичное соответствие
-------------------------------------------
получить объект -запрос выбрать ....процессор, производитель приблизительно истинный интел
Get-Wmiobject -Query 'select * from win32_processor where Manufacturer like "GenuineIntel"'



----------------------------Для  выхода  из  сеанса   локальной  системы ----------------
для завершения сеанса:
  shutdown. exe -l
или
  (Get-WmiObject  -Class  Win32_OperatingSystem  -ComputerName   .).
Win32Shutdown(0)

 --------------------------Для  завершения   работы  компьютера  -------------------
Для  завершения   работы  компьютера   нужно  использовать   метод
Win32Shutdown с флагом 1 .
    (Get-WmiObject  -Class  Win32_OperatingSystem  -ComputerName   .).
Win32Shutdown(1)

--------------------  Для   перезагрузки   операционной   системы----------------
 Для   перезагрузки   операционной   системы   используйте    метод
Win32Shutdown с флагом 2 .
    (Get-WmiObject  -Class  Win32_OperatingSystem  -ComputerName   .).
Win32Shutdown(2)

------------------------------------------------ установки -------------------------
для   установки   пакета   NewPackage.   msi,
расположенного на  общем сетевом  ресурсе \\AppServ\dsp  на  удаленном
компьютере  PC01,  введите  в  командной  строке  Windows   PowerShell
следующую команду:
    (Get-WMIObject   -ComputerName   PC01    -List   |    Where-Object
-FilterScript       {$_.       Name       -eq       "Win32_Product"}).
Install(\\AppSrv\dsp\NewPackage. msi)

-------------------------------------Для  обновления -------------------------------- 
Для  обновления  приложения  необходимо  знать  имя   обновляемого
приложения и путь  к пакету  обновления приложения
  (Get-WmiObject  -Class  Win32_Product   -ComputerName  .   -Filter
"Name='OldAppName'"). Upgrade(\\AppSrv\dsp\OldAppUpgrade. msi)

------------------------------------------- Удаление приложений-------------------
по имени
 (Get-WmiObject  -Class   Win32_Product  -Filter   "Name='ILMerge'"
-ComputerName . ). Uninstall()
для старых программ
  Get-ChildItem -Path  Uninstall: |  ForEach-Object -Process  {  $_.GetValue("UninstallString") }
----------------------------------------------------------------------------
 Чтобы построить список приложений, установленных на локальной  или
удаленной системе при помощи  установщика Windows, можно  использовать
несложный запрос WMI:
 Get-WmiObject   -Class   Win32_Product  -ComputerName   .   |
Where-Object -FilterScript {$_.  Name -eq "Microsoft  . NET  Framework
2.0"} | Format-List -Property *

или
 Get-WmiObject  -Class   Win32_Product  -ComputerName   .   -Filter
"Name='Microsoft . NET Framework 2.0'"| Format-List -Property *

или конкретно
 Get-WmiObject -Class Win32_Product  -ComputerName . |  Format-List
-Property Name,  InstallDate, InstallLocation,  PackageCache,  Vendor,
Version, IdentifyingNumber 

только  имена  установленных приложений
Get-WmiObject -Class Win32_Product  -ComputerName . |  Format-Wide -Column 1
-------------------------------------------принтер------------------------
Получить список  принтеров,  установленных  на  компьютере,  проще всего при помощи класса WMI Win32_Printer 
 Get-WmiObject -Class Win32_Printer -ComputerName

добавить новый сетевой принтер, используйте объект  WScript.Network :
    (New-Object         -ComObject         WScript.          Network).
AddWindowsPrinterConnection("\\Printserver01\Xerox5")
Установка принтера по умолчанию
    Чтобы установить  принтер  по  умолчанию при  помощи  службы  WMI,
найдите  принтер   в   коллекции  Win32_Printer   и   вызовите   метод
SetDefaultPrinter :
    (Get-WmiObject  -ComputerName  .   -Class  Win32_Printer   -Filter
"Name='HP LaserJet 5Si'"). SetDefaultPrinter()
    Несколько проще работа  с объектом WScript.  Network , у  которого
есть метод SetDefaultPrinter , принимающий в качестве аргумента только
имя принтера:
    (New-Object -ComObject  WScript.  Network).  SetDefaultPrinter('HP
LaserJet 5Si')
Удаление подключения к принтеру
    Чтобы удалить  подключение  принтера, используйте  метод  WScript.
Network RemovePrinterConnection :
    (New-Object         -ComObject         WScript.          Network).
RemovePrinterConnection("\\Printserver01\Xerox5")

----------------------------------------- BIOS----------------
Команды   отображают название  BIOS на  удаленном компьютере Server01 и время, прошедшее с момента выпуска BIOS.
C:\PS>$a = get-wmiobject win32_bios -computer server01
    $a  |   format-list   -property  Name,   @{Label="BIOS   Age";   `
Expression={(get-date) - $_. ConvertToDateTime($_. ReleaseDate)}}

или для локального
C:\PS> get-wmiobject win32_bios | format-list *

-------------------------------Сведения  о   модели  компьютера --------------
Get-WmiObject -Class  Win32_ComputerSystem 

------------------------------Вывод сведений о процессоре------------------
Get-WmiObject   -Class   Win32_Processor    -ComputerName   . |Select-Object -Property [a-z]*

NumberOfCores //количество ядер
caption               //название
MaxClockspeed    //частота
Get-Wmiobject -Query 'select * from win32_processor where Manufacturer like "GenuineIntel"'
Get-Wmiobject -Query 'select caption, MaxClockspeed  from win32_processor where Manufacturer like "GenuineIntel"'

--------------------------Вывод сведений о версии операционной системы----------------
 Get-WmiObject  -Class  Win32_OperatingSystem

или
Get-WmiObject  -Class  Win32_OperatingSystem  -ComputerName  .   |Select-Object    -Property     BuildNumber,     BuildType, OSType, ServicePackMajorVersion, ServicePackMinorVersion
---------------------------------------------поиск----------------------------
команда  с  помощью  командлета  Get-WMIObject  запрашивает каталог C:\Test и сохраняет его в переменной $a.
C:\PS>$a =  Get-WMIObject -query  "Select *  From  Win32_Directory Where Name ='C:\\Test'" 

----------------------------------------------------драйверы ------------------
драйверы    выбирать  только  запущенные
  Get-WmiObject   -Class    Win32_SystemDriver  | Where-Object  -FilterScript {$_.State -eq "Running"}

--------------------------------------

             драйверы запуск  которых   выполняется автоматически

Get-WmiObject   -Class  Win32_SystemDriver | Where-Object  -FilterScript {$_.State -eq  "Running"} | Where-Object  -FilterScript {$_.StartMode -eq "Auto"}
 DisplayName : RAS Asynchronous Media Driver Name : AsyncMac  State : Running Status : OK Started : True
    DisplayName : Audio  Stub Driver  Name : audstub  State :  Running
Status : OK Started : True
или
Get-WmiObject   -Class  Win32_SystemDriver   |   Where-Object
-FilterScript {$_. State -eq  "Running"} | Where-Object  -FilterScript
{$_.  StartMode   -eq  "Manual"}   |  Format-Table   -Property   Name, DisplayName
или
 Get-WmiObject    -Class    Win32_SystemDriver    |    Where-Object
-FilterScript {  ($_. State  -eq "Running")  -and ($_.  StartMode  -eq "Manual") } | Format-Table -Property Name, DisplayName
----------------------------------------
                         перечисления     экземпляров     класса Win32_SystemDriver.

Get-WmiObject -Class  Win32_SystemDriver |  Sort-Object  -Property
State, Name | Format-Table -Property Name, State, Started, DisplayName
-AutoSize -Wrap

или
PS>  Get-WmiObject   -Class   Win32_SystemDriver   |   Sort-Object
-Property State,  Name  -Descending  |  Format-Table  -Property  Name,
State, Started, DisplayName -AutoSize -Wrap

--------------------------------------------------------------учетную запись  пользователя-----------------
Общие   сведения   о   локальных   пользователях   -    количество
зарегистрированных пользователей,  текущее число  пользователей и  имя
владельца -  можно получить,  выбрав соответствующие  свойства  класса
Win32_OperatingSystem .  Отображаемые  свойства  можно  указать  явным
образом:
Get-WmiObject  -Class  Win32_OperatingSystem  -ComputerName  . |Select-Object    -Property  NumberOfLicensedUsers, NumberOfUsers, RegisteredUser

Общие сведения о сеансах подключения, связанных с  пользователями,
можно получить через класс Win32_LogonSession службы WMI:
    Get-WmiObject -Class Win32_LogonSession -ComputerName .
    Получение сведений о пользователе, подключенном к компьютеру
    Имя  пользователя,  подключенного   к  определенной   компьютерной
системе,  можно  отобразить  с  помощью  класса  Win32_ComputerSystem.
Приведенная ниже команда возвращает только пользователей, подключенных
к рабочему столу системы:
    Get-WmiObject  -Class   Win32_ComputerSystem  -Property   UserName -ComputerName .

Этот скрипт проверяет учетную запись каждого пользователя.
function ScreenPassword($instance)
    {
    if (!($instance. screensaversecure)) {return $instance. name}
    <additional statements>
    }
    foreach    ($a     in    @(get-wmiobject     win32_desktop))     {ScreenPassword($a) }

--------------------------------------свободное место------------------------
подсчет свободного места на локальных дисках (вывод общее количество всего свободного места в байтах, надо дважды разделить на 1024)
Get-WmiObject -Class Win32_LogicalDisk

или
 C:\PS> get-wmiobject win32_logicaldisk
или
  Get-WmiObject  -Class   Win32_LogicalDisk  -Filter   "DriveType=3"  //лучший
или
Get-WmiObject -Class  Win32_LogicalDisk -Filter  "DriveType=3"-ComputerName . | Measure-Object -Property FreeSpace, Size -Sum
или
Get-WmiObject  -Class   Win32_LogicalDisk  -Filter   "DriveType=3"-ComputerName .  | Measure-Object  -Property  FreeSpace, Size  -Sum  |Select-Object -Property Property, Sum
-----------------------------------------------------рабочие столы-----------
сведения  о  рабочих
столах локального компьютера:
    Get-WmiObject -Class Win32_Desktop   (необязательный параметр -ComputerName .имя)

-------------------------------------сведения о службе WinRM-----------------------------
Следующая команда выводит сведения о службе WinRM для трех
    удаленных компьютеров.
C:\PS> get-wmiobject -query "select * from win32_service where name='WinRM'" -computername server01, server01, server03

-----------------------------------------Список всех  установленных исправлений -------------------
Get-WmiObject -Class Win32_QuickFixEngineering 

----------------------------------------
                                                                                   Профили в Windows PowerShell 2.0
$pshome   //папка где установлен PowerShell
путь к профилю, их можно создавать несколько и вносить все,чем часто пользуемся
C:\WINDOWS\system32\WindowsPowerShell\v1.0\Examples\profile.ps1
---------------------------------------
                 Протоколирование(транскрибирование) в Windows PowerShell 2.0
Командлет Start-Transcript создает запись всего сеанса Windows PowerShell или его части в текстовом файле. Запись включает все команды, вводимые пользователем, и все выходные данные, которые отображаются на консоли.
Запуск, и до стопа все что пишется в консоли, команды, выводы на экран итд запишется в файл .txt 

Start-Transcript - Начало протоколирования
Stop-Transcript - Завершение протоколирования

По умолчанию директория записи -документы на С., для указания своей директории
Start-Transcript -Path C:\Users\Irina_999_555\Desktop\1.txt

просмотреть файл можно в Powershel_ ise.exe C:\Users\Irina_999_555\Desktop\1.txt
------------------------------
 C:\PS>start-transcript -path c:\transcripts\transcript0.txt -noclobber
 Описание
 -----------
 Эта команда запускает запись в файл Transcript0.txt в каталоге "C:\transcripts". Параметр NoClobber запрещает перезаписывать любые существующие файлы.
 шается неудачей.
Для записи вконецуже существующего файла
Start-Transcript -Path C:\Users\Irina_999_555\Desktop\1.txt -append
--------------------------------------------------------------------------------
                                                    Транзакции в Windows PowerShell 2.0

1.   Транзакция (англ. transaction) — группа последовательных операций, которая представляет собой логическую единицу работы с данными. Транзакция может быть выполнена либо целиком и успешно, либо не выполнена. Поддержка транзакций в Windows PowerShell 2.0 осуществляется на уровне поставщика, а именно  Registry (HKLM-ветка реестра LOCAL_MACHINE и HKCU- ветка реестра CURRENT_USER).

2.   Вложенная транзакция (Subscribers -подписчик)- это транзакция внутри транзакции, их может быть несколько

3.   НЕЗАВИСИМЫЕ ТРАНЗАКЦИИ В WINDOWS POWERSHELL 2.0- это транзакция внутри транзакции, сохраняющая свой результат на диске, не смотря на невыполнение общей транзакции, те если вложенная транзакция, стоящая после нее не выполняется




Поддержка транзакций
Командлет                                         Поставщик
(Cmdlet)                                                (PSProvider)



PS C:\Users\user>	Get-PSProvider	//список провайдеров
Nane	                                                          Capabilities	                              Drives
======================================================================
WS Man _____________________________Credentials____________________<WShan>
Alias_________________________________ShouldProcess_________________<alias>
 Environment_________________________ ShouldProcess_________________ <Env>
 FileSystem___________________________Filter, ShouldProcess____________<C. A. D> 
 Function____________________________ ShouldProcess__________________<Function>
 Registry _____________________________ShouldProcess, Transactions______<HKLM, HKCU>
 Variable______________________________ShouldProcess__________________<Variable>
 Certificate__________________________ShouldProcess __________________<cert>	

PS C:\Users\user>	Get-PSDrive	

                                   КОМАНДЛЕТЫ ДЛЯ РАБОТЫ С ТРАНЗАКЦИЯМИ	

Start-Transaction	- Начало новой транзакции
Complete-Transaction	- Завершение транзакции
Undo-Transaction	- Отмена транзакции
Get-Transaction	- Получение текущей транзакции
Use-Transaction	- Добавление блока с объектами NET Framework (поддерживающих транзакции) в текущую транзакцию
-----------------------------------------
создание транзакции

Start-Transaction
КОМАНДЛЕТ          Use-Transaction
КОМАНДЛЕТ          Use-Transaction
КОМАНДЛЕТ          Use-Transaction
Complete-Transaction
-----------------------
создаем новую ветку реестра
PS C:\Windows\system32>powershell_ise
Transaction.ps1

Start-Transacti on
Set-Location HKLM:\SOFTWARE
New-Item -Name webCast123456 -UseTransaction
New-ItemProperty -Path WebCast123456 -Name name`
-Value ’Transactions in Windows PowerShell 2.0' -UseTransaction
Complete-Transaction

PS C:\Windows\system32>.\regedt32.exe
-------------------------
создаем новую ветку реестра, добавим цикл, при выполнении завершить при не выполнении отменить и вернуться к началу.
Start-Transaction
КОМАНДЛЕТ          Use-Transaction
КОМАНДЛЕТ          Use-Transaction
КОМАНДЛЕТ          Use-Transaction
if(условие) {
Complete-Transaction
}else {Undo-Transaction}
-------------------------------------------
PS C:\Windows\system32>powershell_ise
Transaction2.ps1

Start-Transaction
Set-Location hklm:\software
$a=5
Remove-Item -Path .\WebCast123456 -UseTransaction
if ($a eq 5) {Complete-Transaction} else {Undo-Transaction}

PS C:\Windows\system32>.\regedt32.exe
---------------------------------
установка таймаута(таймер на выполнение)через сколько минут произойдет откат транзакций (RollBack)

Start-Transaction -Timeout 5
КОМАНДЛЕТ          Use-Transaction
КОМАНДЛЕТ          Use-Transaction
КОМАНДЛЕТ          Use-Transaction
Complete-Transaction
------------------------------------------
                                             Вложенные транзакции в Windows PowerShell 2.0
Вложенная транзакция (Subscribers -подписчик)- это транзакция внутри транзакции.

Start-Transaction	- Начало новой транзакции
Complete-Transaction	- Завершение транзакции
Undo-Transaction	- Отмена транзакции
Get-Transaction	- Получение текущей транзакции
Use-Transaction	- Добавление блока с объектами NET Framework (поддерживающих транзакции) в текущую транзакцию
----------------------------------------------
удаление ветки реестра (простая транзакция)
PS C:\Windows\system32>powershell_ise
Transaction3.ps1

Start-Transaction
Set-Location HKCU:\Software
Remove-Item .\webCast*
Complete-Transaction
-----------------------------------------
Transaction4.ps1 (простая транзакция)

Start-Transaction
Set-Location HKCU:\Software
New-Item -na WebCast654321 -UseTransaction
New-ItemProperty -Path WebCast654321 -Name 'NAME'`
-Value 'Subscribers in Windows PowerShell 2.0 -UseTransaction 
Complete-Transaction
---------------------------------
вложенные транзакции

PS C:\Windows\system32>powershell_ise
Transaction5.ps1

Start-Transaction
       Set-Location HKCU:\Software
       Start-Transaction
             New-Item -Name WebCast45 -UseTransaction
             New-ItemProperty -Path WebCast45 -Name 'NAME'`
                         -Value 'Subscribers in Windows PowerShell 2.0' -UseTransaction
       Complete-Transaction
       Start-Transaction
             New-Item -Name WebCast46 -UseTransaction
             New-Itemproperty -Path Webcast46 -Name 'NAME'`
                       -Value 'Conditionals in Windows PowerShell 2.0' -UseTransaction
     Complete-Transaction
     Start-Transaction
             New-Item -Name WebCast47 -UseTransaction
             New-ItemProperty -Path WebCast47 -Name 'NAME'`
                     -Value 'Cycles in Windows PowerShell 2.0' -UseTransaction
     Complete-Transaction
Complete-Transaction

PS C:\Windows\system32>.\regedt32.exe
------------------------------------------------
               НЕЗАВИСИМЫЕ ТРАНЗАКЦИИ В WINDOWS POWERSHELL 2.0
                             при работе со вложенными транзакциями  

НЕЗАВИСИМЫЕ ТРАНЗАКЦИИ В WINDOWS POWERSHELL 2.0- это транзакция внутри транзакции, сохраняющая свой результат на диске, не смотря на невыполнение общей транзакции, те если вложенная транзакция, стоящая после  или до нее не выполняется.
Если ошибка в независимой транзакции, то происходит откат всей общей транзакции.

Start-Transaction -Independent
--------------
Start-Transaction
       Set-Location HKCU:\Software
       Start-Transaction
             New-Item -Name WebCast45 -UseTransaction
             New-ItemProperty -Path WebCast45 -Name 'NAME'`
                         -Value 'Subscribers in Windows PowerShell 2.0' -UseTransaction
       Complete-Transaction
       Start-Transaction
             New-Item -Name WebCast46 -Independent                //ключ независимой транзакции                     New-Itemproperty -Path Webcast46 -Name 'NAME'`
                       -Value 'Conditionals in Windows PowerShell 2.0' -UseTransaction
     Complete-Transaction
     Start-Transaction
             New-Item -Name WebCast47 -UseTransaction
             New-ItemProperty -Path WebCast47 -Name 'NAME'`
                     -Value 'Cycles in Windows PowerShell 2.0' -UseTransaction
     Complete-Transaction
Complete-Transaction

PS C:\Windows\system32>.\regedt32.exe
---------------------------------
                                  Условные (Conditionals )конструкции в Windows PowerShell 2.0

ОПЕРАТОРЫ СРАВНЕНИЯ
Действие	                         Оператор
Проверка равенства	              -eq
Проверка неравенства	              -ne
Меньше	                                                  -lt
Больше	                                                  -gt
Меньше или равно	                                -le
Больше или равно	                                -ge
-------------------------------
                     Условные (Conditionals )конструкции
if
if...else                               
if...elseif...else   
if Not
Switch
--------------------------------------------------------------------
if(условие){действие-выполнить, или не выполнить}
--------------------------------------------------------------------
PS C:\Windows\system32>powershell_ise
#IF
Clear-Host
$a =Read-Host 'Enter $a value’
# появляется окно с приглашением ввести значение переменной
Write-Host '##IF##’
If ($a -eq 5) {Write-Host '$a = 5’}
# Remove-Variable -name a
----------------------------
if(условие){действие}`
else {действие}
----------------------------
PS C:\Windows\system32>powershell_ise
op8.ps1

#IF..else  
Clear-Host
$a =Read-Host 'Enter $a value’
# появляется окно с приглашением ввести значение переменной
Write-Host '##IF..else  ##’
If ($a -eq 5) {Write-Host '$a = 5’}`
else  {Write-Host '$a <> 5’}
------------------------------------------
if(условие)`
{действие}`
elseif(условие)`
{действие}`
else {действие}
------------------------
PS C:\Windows\system32>powershell_ise
op9.ps1

#if...elseif...else 
Clear-Host
$a =Read-Host 'Enter $a value’
# появляется окно с приглашением ввести значение переменной
Write-Host '##if...elseif...else ##’
If ($a -eq 5) {Write-Host '$a = 5’}`
elseif($a -lt 5) {Write-Host '$a < 5’}`
else  {Write-Host '$a > 5’}
-----------------------------------------
If (!(УСЛОВИЕ)) {ДЕЙСТВИЕ}
If (!(УСЛОВИЕ)) {ДЕЙСТВИЕ}`
Else {ДЕЙСТВИЕ}

If (-not{УСЛОВИЕ)) {ДЕЙСТВИЕ)

If (-not(УСЛОВИЕ)) {ДЕЙСТВИЕ}`
Else {ДЕЙСТВИЕ}
----------------------------------------------
#IF NOT //-not()
Clear-Host
$a Read-Host 'Enter $a value’
Write-Host '##IF NOT //-not()##’
If (-not ($a -eq 5)) {Write-Host ’Sa <> 5’}
Else {Write-Host '$a = 5'}
---------------------------
#IF NOT //!()
Clear-Host
$a Read-Host 'Enter $a value’
Write-Host '##IF NOT //!()##’
If (! ($a -eq 5)) {Write-Host ’Sa <> 5’}
Else {Write-Host '$a = 5'}
-----------------------------------
Switch (УСЛОВИЕ) {
Значение1 {ДЕЙСТВИЕ}
Значение2 {ДЕЙСТВИЕ}
ЗначениеN {ДЕЙСТВИЕ}
}
-------------------------------------
гост
19.701-90
(ИСО 5807-85)
------------------------------
#SWITCH
Clear-Host
$a Read-Host 'Enter Sa value’
Write-Host '##SWITCH##’
switch ($a) {
0	{Write-Host ’$a=0'}
1	{write-Host '$a=1'}
2	{Write-Host '$a=2'}
3	{Write-Host ’$a=3'}
4	{Write-Host '$a=4'}
5	{Write-Host ’ $a=5'}
}
-----------------------------------------
PS C:\Windows\system32> get-help SWITCH
РАЗДЕЛ
    about_Switch

КРАТКОЕ ОПИСАНИЕ
    Описание использования инструкции Switch для обработки нескольких
    инструкций If.

ПОЛНОЕ ОПИСАНИЕ
    Инструкция If используется для принятия решения в скрипте или
    программе. В сущности, она сообщает: "Если данное условие
    выполняется, то выполните это действие. В противном случае
    выполните следующее действие". Эту операцию можно выполнять
    сколько угодно раз, однако если список условий велик,
    использование инструкции If становится неудобным. Можно
    объединить длинный список условий в одной инструкции switch. Как
    и во всех инструкциях с ветвлением, блоки скриптов должны
    заключаться в скобки ({}).

    Инструкция Switch фактически представляет собой последовательность
    инструкций If. Она поочередно сопоставляет выражение с каждым
    условием. Если обнаружено совпадение, то выполняется действие,
    связанное с этим условием. Обычно инструкция switch выглядит
    следующим образом:

        PS> $a = 3
        PS> switch ($a) {
            1 {"Один."}
            2 {"Два."}
            3 {"Три."}
            4 {"Четыре."}
            }

        Три.


    В этом простом примере значение сравнивается с каждым условием в
    списке. Это действие выводит строку совпадения. Однако при
    проверке всех условий может возникнуть проблема. Пример:

        PS> $day = "day5"
        PS> switch ($day){
            day1 {"Понедельник"; break}
            day2 {"Вторник"; break}
            day3 {"Среда"; break}
            day4 {"Четверг"; break}
            day5 {"Пятница"; break}
            day6 {"Суббота"; break}
            day7 {"Воскресенье"; break}
            day5 {"Слишком много дней"; break}
            }

        Пятница


    В списке присутствует два условия day5. Однако инструкция break в
    конце каждого условия велит инструкции switch прекратить
    дальнейший поиск и выполнить найденное действие. Если бы
    инструкции break не было, были бы выполнены оба действия day5.

    Если инструкция switch применяется к массиву, проверяться будут
    все элементы массива по порядку, начиная с нулевого элемента (0).
    В массиве должен быть хотя бы один элемент, удовлетворяющий хотя
    бы одному условию. В противном случае произойдет ошибка. Если
    предложений по умолчанию несколько, результатом будет ошибка.

    Полный синтаксис switch следующий:

        switch [-regex|-wildcard|-exact][-casesensitive] ( pipeline )
    или

        switch [-regex|-wildcard|-exact][-casesensitive] -file filename

    с последующим

        {
            "string"|number|variable|{ expression } { statementlist }
            default { statementlist }
        }


    Если не использовать никакие параметры, оператор Switch выполняет
    действие, как если бы было обнаружено точное совпадение без учета
    регистра. Если результатом конвейера является массив, проверяться
    будут все элементы массива в восходящем порядке, начиная с
    нулевого элемента (0).

    В блоке кода Switch могут присутствовать только один условный
    элемент и только одно предложение по умолчанию. При наличии нескольких
    предложений по умолчанию возникает исключение ParseException.

    Инструкция Switch имеет следующие параметры.

        Regex           Указывает, что удовлетворяющее критерию
                        предложение, являющееся строкой, обрабатывается как строка Regex.
                        Использование этого параметра отключает параметры Wildcard и Exact.
                        Если удовлетворяющее критерию предложение не является строкой,
                        этот параметр игнорируется.

        Wildcard        Указывает, что удовлетворяющее критерию предложение,
                        являющееся строкой, обрабатывается как строка с
                        подстановочным символом. Использование этого параметра
                        отключает параметры Regex и Exact. Если удовлетворяющее критерию
                        предложение не является строкой, этот параметр игнорируется.

        Exact           Указывает, что удовлетворяющее критерию
                        предложение, являющееся строкой, должно точно соответствовать критерию.
                        Использование этого параметра отключает параметры Wildcard и Regex. Если
                        удовлетворяющее критерию предложение не является строкой, этот параметр
                        игнорируется.

        CaseSensitive   Указывает, что удовлетворяющее критерию предложение,
                        являющееся строкой, изменяется с учетом регистра. Если удовлетворяющее
                        критерию предложение не является строкой, этот параметр игнорируется.

        File            Источник берется из файла (или представителя), а не из инструкции.
                        При наличии нескольких параметров File используется только
                        последний. Каждая строка файла считывается и передается через
                        блок switch.

    Допускается многократное использование параметров Regex, Wildcard
    или Exact. Однако на действие влияет только последний
    использованный параметр.

    Ключевое слово Break означает, что обработка больше не выполняется и
    инструкция Switch завершает работу.

    Ключевое слово Continue указывает, что обработка текущего токена
    не будет продолжаться и начнется оценка следующего токена в
    условии. При отсутствии токенов оператор Switch завершает работу.

    Блок вида "{ expression }" может быть блоком кода, который будет
    оцениваться при сравнении. Текущий объект привязывается к
    автоматической переменной $_ и доступен во время проверки выражения.
    Считается, что результатом сравнения было совпадение, если выражение
    принимает значение "true". Это выражение вычисляется в новой области.

    Ключевое слово Default в инструкции switch указывает, что если
    соответствия не найдены, начнется проверка кодового блока,
    следующего за ключевым словом. Программному потоку будет запрещено
    переключение с блока на блок, поскольку закрывающая скобка ( } ) в
    составном списке является явным остановом.

    При обнаружении нескольких соответствий каждое соответствие
    приводит к запуску выражения. Во избежание этого для предотвращения
    дальнейшего сравнения можно использовать ключевые слова Break или
    Continue.
СМ. ТАКЖЕ
    about_Break
    about_Continue
    about_If
    about_Script_Blocks
PS C:\Windows\system32>
------------------------------------------
                                                 Циклы в Windows PowerShell 2.0

for
forEach
While
Do while
Do Until
-----------------------------------------------------------------------------------
                                           ЦИКЛ FOR WINDOWS POWERSHELL 2.0

ОПЕРАТОРЫ СРАВНЕНИЯ
Действие	                         Оператор
Проверка равенства	              -eq
Проверка неравенства	              -ne
Меньше	                                                  -lt
Больше	                                                  -gt
Меньше или равно	                                -le
Больше или равно	                                -ge

for (НАЧАЛЬНОЕ ЗНАЧЕНИЕ;УСЛОВИЕ;ШАГ)
{
ДЕЙСТВИЕ
}
-------------------------

# FOR #
Clear-Host
for ($a=1;$a -lt 6; $a=$a +1)
{
Write-Host $a
}
wri te-Host ‘####################'
for ($b=10; $b -gt 0; $b = $b - 2)
{
Write-Host $b
}
---------------------
1
2
3
4
5
######################
10
8
6
4
2
-------------------------

#FOREACH#
Clear-Host
$tab = ”`t"
$a =1
#foreach ($service in Get-Service)
foreach ($service in get-service |where-object {$_.status -ne 'stopped'})
{
Write-Host $a -NoNewline
Write-Host $tab -NoNewline
Write-Host $service.Status -NoNewline
Write-Host $tab -NoNewline
Write-Host $service.Name
$a = $a + 1
}
------------------------------------------------------------------------------------
                                             ЦИКЛ WHILE WINDOWS POWERSHELL 2.0
WHILE (УСЛОВИЕ)
{
            ДЕЙСТВИЕ
}
----------------------------

# WHILE #
Clear-Host
$tab = ”`t"
 $a = 0
while ($a -le 5)
{
Write-Host $a $tab -NoNewline
$a++
}
----------------------------------------------------------------------------------------
                              ЦИКЛ DO WHILE WINDOWS POWERSHELL 2.0
Цикл повторяется пока условие выполняется
do {
ДЕЙСТВИЕ
}
WHILE (УСЛОВИЕ)
# УСЛОВИЕ ВЫХОДА $false
----------------------------------------
выход из цикла при нажатии любой цифры кроме 10
# DO WHILE
$a= 10
do {
$a =Read-Host ’Enter $a value: '
Write-Host $a
}
while ($a -ne 10)
set-location N:\progi\очистка\ccsetup505
start N:\progi\очистка\ccsetup505\CCleaner.exe
--------------
удобно для ввода пароля, выход из цикла при нажатии  цифры 505 и запуск программы очистки компьютера
# DO WHILE
$a= 505
do {
$a =Read-Host ’Введите пароль: '
Write-Host $a
}
while ($a -ne 505)
set-location C:\ccsetup505
start CCleaner.exe
-----------------------------------------
                                           ЦИКЛ DO UNTIL WINDOWS POWERSHELL 2.0
Цикл повторяется пока условие выполняется
do {
ДЕЙСТВИЕ
}
WHILE (УСЛОВИЕ)
# УСЛОВИЕ ВЫХОДА $true
----------------------------------------------
 до тех пор пока....
# DO UNTIL	
$a = 10
do {
$a Read-Host 'Enter $a value: '
Write-Host $a
}
until ($a -eq 10)
-------------------------------



                                                             Windows PowerShell 4.0
-----------------------------------работает во всех версиях  Windows PowerShell 
C:\PS>$PSVersionTable                                 //Версия

C:\PS>Get-WmiObject   -Class Win32_operatingSystem      //определение системы Windows 
C:\PS>Get-WmiObject   -Class Win32_operatingSystem   -Property caption  //детали
                                                                 запуск служб 
C:\PS>Get-Service |Select-object -first10| foreach-object stop(остановка первых сверху 10 служб)
C:\PS>Get-Service |Select-object -first5| foreach-object start(запуск первых сверху 5 служб)

C:\PS>Get-NetIPAddress -AddressFamily ipv4 -IncludeAllCompartments -InterfaceAlias ethernet0                    //4,0

C:\PS>Get-Service | Sort-Object  -Property Status, Name -Descending       //получение служб по статусу (2.0-4.0)

C:\PS>Get-Service | Where-Object -Property Status -eq 'running'   //список служб запущенных //4,0
PS C:\> get-service |where-object {$_.status -ne 'stopped'}    //список служб запущенных //2,0
C:\PS>get-service | where-object {$_.Status -eq "Stopped"}//список служб остановленных //2,0

C:\PS>Get-Service | Where-Object  -Property Name -Like 'win*'                     //4,0
C:\PS>get-command | where-object {$_.definition -like "*first*"}           //2,0-4,0

Получи службы отфильтрованные по имени, начинающиеся на вин и на А
C:\PS>Get-Service | Where-Object -FilterScript {$PSItem.Name -like'win*' -or $_.Name -like'A*'}           //(2.0-4.0)
C:\PS>Get-Service | Where-Object -FilterScript {$_.Name -like 'win' -or $_.Name -like 'A*'}                   //(2.0-4.0)

C:\PS>Get-Service | Where-Object -FilterScript {$PSItem.Name -like'win*' -and $_.status -like'run*'}  //4,0

                                                                 Операторы сравнения
•	Равно(Equal to):
-eq
•	Не равно (Not equal to):
-ne
•	Больше (Greater than):
gt
•	Больше или равно (Greater than or equal to):
-ge
•	Меньше (less than):
-lt
•	Меньше или равно (less-than or equal to):
-le
•	Соответствие с подстановкой (Match using the wildcard character (*)):
-Like
•	He соответствие с подстановкой (Does not match using the wildcard character (*)):
-NotLike

                                                        Операторы сравнения
Соответствие на основе регулярных выражений [Matches a string using regular
expressions]:
•	-Match
He соответствие на основе регулярных выражений [Does not match a string):
•	-NotMatch
•	Проверка коллекции на содержание одного значения:
•	-Contains
•	Проверка коллекции на не содержание одного значения:
•	-NotContains
Проверка на наличие значения в коллекции:
•	-In
•	Проверка на отсутствие значения в коллекции:
•	-Notin


get-help about_Comparison_Operators
  Побитовые операторы
      Оболочка Windows PowerShell поддерживает стандартные побитовые
      операторы, включая побитовое И (-band), побитовое ИЛИ и побитовое
      исключающее ИЛИ (-bor и -bxor). Начиная с версии Windows PowerShell
      2.0, все побитовые операторы работают с 64-разрядными целыми числами.


      Windows PowerShell поддерживает следующие побитовые операторы:


      Оператор  Описание                      Пример
      --------  --------------------------    -------------------
      -band     Побитовое И                   C:\PS> 10 -band 3
                                              2

      -bor      Побитовое ИЛИ (включающее)    C:\PS> 10 -bor 3
                                              11

      -bxor     Побитовое ИЛИ (исключающее)   C:\PS> 10 -bxor 3
                                              9

      Побитовые операторы используют двоичный формат значений.
      Например, для числа 10 используется битовая структура 00001010
      (с учетом 1 байта), а для числа 3 - 00000011. При использовании
      побитового оператора для сравнения 10 и 3 выполняется сравнение
      отдельных битов в каждом байте.


      При операции побитового И результирующий бит устанавливается в
      1 только в том случае, если оба входных бита равняются 1.


          00001010   (10)
          00000011   ( 3)
          ------------------ bAND
          00000010   ( 2)


      При операции побитового ИЛИ (включающего) результирующий бит
      устанавливается в 1, если любой из входных битов или они оба
      равняются 1. Результирующий бит устанавливается в 0 только в
      том случае, если оба входных бита равняются 0.


          00001010   (10)
          00000011   ( 3)
          ---------------- bOR (включающее ИЛИ)
          00001011   (11)


      При операции побитового ИЛИ (исключающего) результирующий бит
      устанавливается в 1 только в том случае, если один из входных
      битов равняется 1.


          00001010   (10)
          00000011   ( 3)
          ---------------- bXOR (исключающее)
          00001001   ( 9)
----------------------------------------------------------
 Выборка данных
•	Командлет:
• Select-Object
•	Синтаксис:
Get-Service I Select-Object -Property name, status
•	Вычисляемые свойства:
Get-Service I Select-Object -Property name, status,`
@{Name="Comment"; Expression = {$_.DisplayName}}

Get-Childltem I Select-Object -Property Name, `
@{N="Size"; E={"(0:F2}" -f {$PSltem.Length / 1KB)}}
----------------------------------------------
переименование выводимого в службах поля displayname в свойство с названием Description и с дальнейшим использованием этого свойства (только текущий сеанс-при закрытии сеанса его не будет)
Get-Service |Select-Object -property Name, status, @{name 'Description';expression {$_. displayname}} |`
Sort-Object -Property Description	

в переменную грузим все файлы из каталога(переводим контейнер в файл)сортируем по имени с размером в мегабайтах
$a= Get-ChildItem C:\Windows\System32
$a[0] | select-object -property*
$a | Where-Object -Property PSIsContainer -eq $false | Select-Object  -Property Name, @{name= 'Size'; e={$PSItem.length /1Mb}}

переводим размер в десятичный формат и килобайты
$a | Where-Object -Property PSIsContainer -eq  $false |`
 Select-Object  -Property Name, @{name= 'Size'; e={"{0:N2} -f{$PSItem.length /1KB}}

форматируем номер телефона
12345678900
$a=12345678900
"{0:#-###-###-##-##}" -f $a
1-234-567-89-00
$a=89685831169
"{0:#-###-###-##-##}" -f $a
8-968-583-11-69
---------------------------------------------------
ищем подсеть с помощью ип-адреса
#start
function Start-ICMPScanner
{
       $tab="`t"
       for($i=1; $i -le 3; $i++)
      {
             $IP='10.0.0.'+$i
             write-host $IP -NoNewLine
             write-host $tab -NoNewLine
             Test-Connection -ComputerName $IP  -Count 1 -Quiet
      }
}
#task 1
Start-ICMPScanner
-------------------------------------------------
#start
function Start-ICMPScanner
{
       $tab="`t"
       for($i=1; $i -le 3; $i++)
      {
             $IP='10.0.0.'+$i
             $result=Test-Connection -ComputerName $IP  -Count 1 -Quiet
             write-host $IP -NoNewLine
             write-host $tab -NoNewLine
             if($result -eq $falce)
             {  
                     write-host $result -foregroundColor Red
               }
              else
              { 
                      write-host $result -foregroundColor Green
               }
       }
}
#task 1
Start-ICMPScanner
-----------------------------------------
                                                       вставка описания функции и примеров в справку(оформление как при вызове справки)
#start
function Start-ICMPScanner
{
<#
.Synopsis(короткое описание )
            Start-ICMP Echo Scanner
.Description(подробное описание)
...
.parameter user name
...
.Example(примеры)
...$a=Start-ICMPScanner; &$a
.Notes(примечания)
...
.Link(нужные ссылки)
...
#>
    Param(
	[ValidatePattern ("\d{1,3}.\d{1,3}.\d{1,3}.") ][ValidateLength(6,12)] [string]$Range=$(Throw "Set the Range parameter, Example:'192.168.56.'")
	, [ValidateRange(0,255)][int]$StartIP=$(Throw "Set StartIP parameter, Example:1")
	, [ValidateRange(0,255)][int]$EndIP=$(Throw "Set EndIP parameter, Example:1")
	,  [ValidateRange(0,10)][int]$CallCount =$(Throw "Set ICMP Call Count parameter, Example:1")
)
$tab="`t"
       for($i=$StartIP; $i -le $ENdIP; $i++)
      {
             $IP=$Range+$i
             $result=Test-Connection -ComputerName $IP   -Count $CallCount  -Quiet
             write-host $IP -NoNewLine
             write-host $tab -NoNewLine
             if($result -eq $falce)
             {  
                     write-host $result -foregroundColor Red
               }
              else
              { 
                      write-host $result -foregroundColor Green
               }
       }
}
#task 1
Start-ICMPScanner  -Range '192.168.56.'  -StartIP  -EndIP 2 -CallCount 2
#task 2
Start-ICMPScanner -Range '169.254.240.'  -StartIP1  -EndIP 3 -CallCount 1
#task 3
Start-ICMPScanner -Range '127.0.0.1.'  -StartIP 1  -EndIP 3 -CallCount 3
#end
get-commandType function
get-help Start-ICMPScanner-Examples
##устанавливаем шаблон из 4 цифр и точки, проверяем длинустроки от 6 до 12, устанавливаем подсказку при ощибочном вводе##
----------------------------------
Передача параметров функции
•	Передача параметров функции:
function Example3
<#
.Synopsis
#>
Param (
[type]$variable1, [type]$variable2, [type]$variable3
)
#Commands
)
•	Синтаксис:
Example3 -variable1 "Value" -variable2 'Value' -variable3 "Value"
•	Подсказки:
Param([type]$variable1 = $(Throw "Error description"))
---------------------------------------
                                    Проверка параметров функции
-Проверка типа данных: тип данных[int-целое]
param ([int] $variable)
-Проверка диапазона числовых значений: от..0...до...255
param ([ValidateRange(5,15)] $variable)
-Проверка длины строки:
param ([ValidateLength(5,15)] $variable)
-Проверка в наборе элементов: текст, например дни недели
param ([ValidateSet(5,15,300)] $variable),
[ValidateSet ("t1","t2")] $variable2)
-Проверка выполнения условия: готовый скрипт подаем на вход
param ([ValidateScript ({$_ -like "*aaa"}] $variable)
-Проверка шаблона: окончание переменнойна ing
param ([ValidatePattern ("ing\b") ] $Variable)

-----------------------------------------------процесс создания скрипта
fuction Get-IPv4Address
{
<#
#>
Get-WmiObject -Class win32_networkAdapterConfiguration
}
-------
fuction Get-IPv4Address
{
<#
#>
$a = Get-WmiObject -Query 'select *from win32_networkAdapterConfiguration where index = 0'
$a | Select-Object -Property *
}
---------------------------------скрипт-пингуем сеть на подсети
#start
function Start-ICMPScanner
{
<#
.Synopsis(короткое описание )
            Start-ICMP Echo Scanner
.Description(подробное описание)
...
.parameter user name
...
.Example(примеры)
...$a=Start-ICMPScanner; &$a
.Notes(примечания)
...
.Link(нужные ссылки)
...
#>
    Param(
    [ValidatePattern ("\d{1,3}.\d{1,3}.\d{1,3}.") ][ValidateLength(8,16)][string]$Range = $(Throw "Set the Range parameter, Example:'192.168.56.'")
	, [ValidateRange(1,255)][int]$StartIP=$(Throw "Set StartIP parameter, Example:1")
	, [ValidateRange(1,255)][int]$EndIP=$(Throw "Set EndIP parameter, Example:1")
	, [ValidateRange(1,10)][int]$CallCount =$(Throw "Set ICMP Call Count parameter, Example:1")
)
$tab="`t"
       for($i=$StartIP; $i -le $ENdIP; $i++)
      {
             $IP=$Range+$i
             $result=Test-Connection -ComputerName $IP   -Count $CallCount  -Quiet
             write-host $IP -NoNewLine
             write-host $tab -NoNewLine
             if($result -eq $falce)
             {  
                     write-host $result -foregroundColor Red
               }
              else
              { 
                      write-host $result -foregroundColor Green
               }
       }
}


fuction Get-IPV4Address
{
<#
#>
Param ([string]$ComputerName)
    $b = Test-Connection $ComputerName -Quiet
    if($b -eq $true)
    {
        try
         {   
    $a = Get-WmiObject -Query 'select *from win32_networkAdapterConfiguration where index = 0'-ComputerName $ComputerName 
    $a | Select-Object -Property description,IPAddress,IPSubnet,`
    DefaultIPGatway,DNSServerSearchOrder,DNSHostname, DNSDomain  
    }
    catch
        {
            write-host "Error credential to access $ComputerName"
        }
    }
    else
    {
    write-host "Error RPC Access to $ComputerName"
    }
 }

Get-IPV4Address -ComputerName LOCALHOST
Start-ICMPScanner -Range '127.0.0.1.'  -StartIP 1  -EndIP 1 -CallCount 1
test-connection -ComputerName localhost
------------------------------------------------------
Подписание сценариев

•	Командлеты:
•	Get-AuthenticodeSignature
•	Set- AuthenticodeSignature
•	Шаблон сертификата:
Code Signing
--------------
mmc
 в меню файл добавить оснастку -сертификаты
моей учетной записи пользователя(первый пункт)
личные-правой кнопкой мыши-все задачи-запросить новый сертификат
добавлено администратором
политика регистрации Active Directory(если нет,то настоить)
выбрать шаблон ...Code Signing
----------------------------
                                                                                                        модули
Microsoft.PowerShell.Management
Microsoft.PowerShell.Security
Microsoft.PowerShell.Utility
Storage
                                                                                      доступные модули

get-module
Get-Module -ListAvailable
Get-NetAdapter

------------------------------------------------------

PS C:\Windows\system32> help about_comment_based_help
РАЗДЕЛ
    about_Comment_Based_Help

КРАТКОЕ ОПИСАНИЕ
    Описание написания разделов справки на основе комментариев для
    функций и скриптов.

ПОЛНОЕ ОПИСАНИЕ
    С помощью специальных ключевых слов комментариев справки можно
    писать разделы справки на основе комментариев для функций и скриптов.

    Командлет Get-Help отображает содержимое справки на основе
    комментариев в том же формате, в котором отображаются разделы
    справки для командлетов, созданные из XML-файлов. Для просмотра
    справки для функции или скрипта пользователи могут использовать
    все параметры командлета Get-Help: Detailed, Full, Example и Online.

    Также с помощью специальных ключевых слов комментариев справки
    можно писать файлы справки на основе XML-файлов для функций и
    скриптов и перенаправлять пользователей в другой файл справки.

    В этом разделе описано, как писать разделы справки для функций и
    скриптов. Сведения об отображении разделов справки для функций и
    скриптов см. в разделе Get-Help.


 СИНТАКСИС ДЛЯ СПРАВКИ НА ОСНОВЕ КОММЕНТАРИЕВ
    Синтаксис для справки на основе комментариев имеет следующий вид.
        # .< ключевое_слово_справки>
        # <содержимое_справки>

    -или:

        <#
            .< ключевое_слово_справки>
            < содержимое_справки>
        #>


    Справка на основе комментариев пишется как набор комментариев.
    Можно вводить символ комментария (#) перед каждой строкой
    комментариев или использовать символы "<#" и "#>" для создания
    блока комментариев. Все строки, входящие в блок комментариев,
    воспринимаются как комментарии.

    Все строки в разделе справки на основе комментариев должно идти
    непрерывно. Если раздел справки на основе комментариев следует за
    комментарием, не являющимся частью раздела, между последней
    строкой этого комментария и началом справки должна присутствовать
    хотя бы одна пустая строка.

    Ключевые слова определяют разделы справки на основе комментариев.
    Перед каждым ключевым словом справки на основе комментариев
    вводится точка (.). Ключевые слова можно вводить в любом порядке.
    В именах ключевых слов не учитывается регистр.

    Например, ключевое слово Description предшествует описанию
    функции или скрипта.

        <#
            .Description
            Get-Function отображает имя и синтаксис всех функций в
            рамках сеанса.
        #>

    В блоке комментариев должно содержаться хотя бы одно ключевое
    слово. Некоторые ключевые слова, например EXAMPLE, могут
    встречаться несколько раз в рамках одного блока комментариев.
    Содержимое справки для каждого ключевого слова начинается со
    строки, следующей за ключевым словом, и может занимать несколько
    строк.



 СИНТАКСИС ДЛЯ СПРАВКИ НА ОСНОВЕ КОММЕНТАРИЕВ В ФУНКЦИЯХ

    Справка на основе комментариев для функции может размещаться в
    одной из трех областей:

        -- В начале тела функции.

        -- В конце тела функции.

        -- Перед ключевым словом Function. Между последней строкой
           справки для функции и ключевым словом Function не может
           быть больше одной пустой строки.



    Пример:

        function MyFunction
        {
            <#
            .< ключевое_слово_справки>
            < содержимое_справки>
            #>

            <команды функции>
        }


    -или:

        function MyFunction
        {
            <команды функции>

            <#
            .< ключевое_слово_справки>
            < содержимое_справки>
            #>
        }

    -или:

        <#
        .< ключевое_слово_справки>
        < содержимое_справки>
        #>
        function MyFunction { }



 СИНТАКСИС ДЛЯ СПРАВКИ НА ОСНОВЕ КОММЕНТАРИЕВ В СКРИПТАХ

    Справка на основе комментариев для скрипта может размещаться в
    одной из двух областей скрипта.

    -- В начале файла скрипта. При таком размещении перед справкой
       для скрипта могут указываться только комментарии и пустые строки.

    -- Если первый элемент тела скрипта (после справки) является
       объявлением функции, между последней строкой справки для
       скрипта и объявлением функции должны присутствовать хотя бы
       две пустых строки. В противном случае справка интерпретируется
       как справка для функции, а не справка для скрипта.

    -- В конце файла скрипта.



    Пример:

        <#
        .< ключевое_слово_справки>
        < содержимое_справки>
        #>


        function MyFunction { }

    -или-


        function MyFunction { }

        <#
        .< ключевое_слово_справки>
        < содержимое_справки>
        #>



 КЛЮЧЕВЫЕ СЛОВА СПРАВКИ НА ОСНОВЕ КОММЕНТАРИЕВ
    Ниже перечислены действительные ключевые слова справки на основе
    комментариев. Перечисленные выполнено в том порядке, в котором
    ключевые слова обычно появляются в разделе справки, для всех
    ключевых слов приведено краткое описание.
    Эти ключевые слова могут появляться в справке на основе
    комментариев в любом порядке, регистр символов не имеет значения.


    .SYNOPSIS
        Краткое описание функции или скрипта. Это ключевое слово
        может использоваться в каждом разделе только один раз.

    .DESCRIPTION
        Подробное описание функции или скрипта. Это ключевое слово
        может использоваться в каждом разделе только один раз.

    .PARAMETER <имя_параметра>
        Описание параметра. Ключевое слово Parameter может
        указываться для каждого из параметров функции или скрипта.

        Ключевые слова Parameter могут появляться в блоке
        комментариев в произвольном порядке, однако порядок
        отображения параметров (и их описаний) в разделе справки
        определяется синтаксисом функции или скрипта. Для изменения
        порядка отображения необходимо изменить синтаксис.

        Можно также указать описание параметра, разместив комментарий
        в коде функции или скрипта сразу после имени переменной параметра.
        При использовании комментария в коде и ключевого слова
        Parameter будет использоваться описание, связанное с ключевым
        словом Parameter, комментарий в коде будет проигнорирован.

    .EXAMPLE
        Пример команды, в которой используется функция или скрипт, за
        которым может следовать пример выходных данных и описание.
        Это ключевое слово необходимо повторить для каждого примера.

    .INPUTS
        Типы данных объектов платформы Microsoft .NET , которые могут быть
        переданы функции или скрипту по конвейеру. Можно также
        включить описание входных объектов.

    .OUTPUTS
        Типы данных объектов платформы .NET, возвращаемых
        командлетом. Можно также включить описание возвращаемых объектов.

    .NOTES
        Дополнительные сведения о функции или скрипте.

    .LINK
        Имя связанного раздела. Это ключевое слово необходимо
        повторить для каждого связанного раздела.

        Это содержимое отображается в подразделе "Ссылки по теме"
        раздела справки.

        В содержимом ключевого слова Link может указываться URI на
        интернет-версию того же раздела справки. Интернет-
        версия открывается при использовании параметра Online
        командлета Get-Help. URI должен начинаться с "http" или "https".

    .COMPONENT
        Технология или функциональная возможность, которая
        используется функцией или скриптом либо с которой связана
        функция или скрипт. Это содержимое отображается в случае,
        если команда Get-Help включает параметр Component командлета
        Get-Help.

    .ROLE
        Роль пользователя для раздела справки. Это содержимое
        отображается в случае, если команда Get-Help включает
        параметр Role командлета Get-Help.

    .FUNCTIONALITY
        Предполагаемое использование функции. Это содержимое
        отображается в случае, если команда Get-Help включает
        параметр Functionality командлета Get-Help.

    .FORWARDHELPTARGETNAME <имя_команды>
        Обеспечивает перенаправление в раздел справки для указанной
        команды. Можно выполнять перенаправление пользователей в
        любой раздел справки, включая разделы справки для функции,
        скрипта, командлета или поставщика.

    .FORWARDHELPCATEGORY <категория>
        Задает категорию справки элемента в ForwardHelpTargetName.
        Допустимыми значениями являются Alias, Cmdlet, HelpFile,
        Function, Provider, General, FAQ, Glossary, ScriptCommand,
        ExternalScript, Filter или All. Используйте это ключевое
        слово для предотвращения конфликтов при появлении команд с
        одинаковыми именами.

    .REMOTEHELPRUNSPACE <переменная_сеанса_PSSession>
        Задает сеанс, в котором содержится раздел справки. Введите
        переменную, которая содержит сеанс PSSession. Это ключевое
        слово используется командлетом Export-PSSession для поиска
        разделов справки для экспортируемых команд.

    .EXTERNALHELP <путь_к_XML-файлу_справки>
        Задает путь к файлу справки на основе XML для скрипта или
        функции.

        При работе с операционной системой Windows Vista или более
        поздними версиями Windows если указанный путь к XML-файлу
        содержит подкаталоги, определяемые культурой пользовательского
         интерфейса, Get-Help выполняет рекурсивный поиск XML-файла с
         именем скрипта или функции по подкаталогам в соответствии со
         стандартами резервного языка, установленными для Windows
         Vista, как это и происходит для всех разделов справки на
         основе XML.

        Дополнительные сведения о формате файлов справки для
        командлетов на основе XML см. в разделе "How to Write Cmdlet
        Help" (Как писать справку для командлетов) в библиотеке MSDN
        по адресу http://go.microsoft.com/fwlink/?LinkID=123415.


 АВТОМАТИЧЕСКИ СГЕНЕРИРОВАННОЕ СОДЕРЖИМОЕ
    Имя, синтаксис, список параметров, таблица атрибутов параметров,
    общие параметры и примечания автоматически генерируются
    командлетом Get-Help.

        Имя:
            Подраздел "Имя" раздела справки для функции заполняется
            именем функции из синтаксиса функции. Подраздел "Имя"
            раздела справки для скрипта заполняется именем файла
            скрипта. Для изменения имени или преобразования его в
            верхний реестр измените синтаксис функции или имя файла
            скрипта.

        Синтаксис:
            Подраздел "Синтаксис" раздела справки для функции
            генерируется в соответствии с информацией о синтаксисе
            функции или скрипта. Чтобы добавить подробную информацию
            в раздел справки "Синтаксис", например тип данных
            платформы .NET параметра, добавьте эту информацию в
            синтаксис. Если тип параметра не указан, по умолчанию
            используется значение типа "Объект".

        Список параметров:
            Список параметров в разделе справки генерируется на
            основании синтаксиса функции или скрипта, а также
            описаний, добавленных с помощью ключевых слов Parameter.
            Параметры функции отображаются в подразделе параметров
            раздела справки в том же порядке, в котором они указаны в
            синтаксисе функции или скрипта. Написание и реестр
            символов в именах параметров также основано на
            синтаксисе; на них не воздействует имя параметра,
            заданное ключевым словом Parameter.

        Общие параметры:
            Общие параметры добавляются в синтаксис и список
            параметров в разделе справки даже в том случае, если они
            не указывают никакого воздействия. Дополнительные
            сведения о типовых параметрах см. в разделе
            about_CommonParameters.

        Таблица атрибутов параметров:
            Командлет Get-Help генерирует таблицу атрибутов
            параметров, которая отображается при использовании
            параметров Full или Parameter командлета Get-Help.
            Значения атрибутов "Необходимый", "Позиция" и "Значение
            по умолчанию" основаны на синтаксисе функции или скрипта.

        Примечания:
            Подраздел "Примечания" раздела справки для функции
            автоматически генерируется в соответствии с именем
            функции или скрипта. Невозможно изменить содержимое этого
            раздела или воздействовать на него.



 ПРИМЕРЫ

    Пример 1. Справка для функции на основе комментариев

        В следующем примере в код функции включена справка на основе
        комментариев.

            function Add-Extension
            {
                param ([string]$Name,[string]$Extension = "txt")
                $name = $name + "." + $extension $name

            <#
            .SYNOPSIS
            Добавление расширения имени файла к переданному на вход имени.

            .DESCRIPTION
            Добавление расширения имени файла к переданному на вход
            имени. Принимает любые строки в качестве имени файла или
            расширения.

            .PARAMETER Name
            Задает имя файла.

            .PARAMETER Extension
            Задает расширение. По умолчанию используется расширение "Txt".

            .INPUTS
            Нет. Объекты не могут передаваться функции Add-Extension
            по конвейеру.

            .OUTPUTS
            System.String. Функция Add-Extension возвращает строку с
            расширением или именем файла.

            .ПРИМЕР
            C:\PS> extension -name "файл"
            файл.txt

            .ПРИМЕР
            C:\PS> extension -name "файл" -extension "doc"
            файл.doc

            .ПРИМЕР
            C:\PS> extension "файл" "doc"
            файл.doc

            .LINK
            Интернет-версия: http://www.fabrikam.com/extension.html

            .LINK
            Set-Item
            #>
            }



        Результаты выглядят следующим образом:

        C:\PS> get-help add-extension -full

        ИМЯ
            Add-Extension

        ОПИСАНИЕ
            Добавление расширения имени файла к переданному на вход имени.

        СИНТАКСИС
            Add-Extension [[-Name] <String>] [[-Extension] <String>]
            [<CommonParameters>]
        ОПИСАНИЕ
            Добавление расширения имени файла к переданному на вход
            имени. Принимает любые строки в качестве имени файла или
            расширения.

        ПАРАМЕТРЫ
           -Name
               Задает имя файла.

               Требуется?                    false
               Позиция?                      0
               Значение по умолчанию
               Принимать входные
               данные с конвейера?           false
               Принимать подстановочные знаки?

           -Extension
               Задает расширение. По умолчанию используется
               расширение "Txt".

               Требуется?                    false
               Позиция?                      1
               Значение по умолчанию
               Принимать входные данные
               с конвейера?                  false
               Принимать подстановочные знаки?

            <CommonParameters>
               Данный командлет поддерживает общие параметры:
               -Verbose, -Debug, ErrorAction, -ErrorVariable,
               -WarningAction, -WarningVariable, OutBuffer и
               -OutVariable. Чтобы получить дополнительные
                сведения, введите команду "get-help
                about_commonparameters".


        ВХОДНЫЕ ДАННЫЕ
            Нет. Объекты не могут передаваться функции Add-Extension
            по конвейеру.

        ВЫХОДНЫЕ ДАННЫЕ
            System.String. Функция Add-Extension возвращает строку с
            расширением или именем файла.

            -------------------------- ПРИМЕР 1 --------------------------
            C:\PS> extension -name "файл"
            файл.txt

            -------------------------- ПРИМЕР 2 --------------------------
            C:\PS> extension -name "файл" -extension "doc"
            файл.doc

            -------------------------- ПРИМЕР 3 --------------------------
            C:\PS> extension "файл" "doc"
            файл.doc

        ССЫЛКИ ПО ТЕМЕ
            Интернет-версия: http://www.fabrikam.com/extension.ht
            ml Set-Item



    Пример 2. Описание параметров в коде функции

        Этот пример похож на предыдущий за исключением того, что в
        нем описания параметров вставлены в код функции. Такой формат
        наиболее удобен при использовании кратких описаний.


        function Add-Extension
        {
            param
            (
                [string]
                # Задает имя файла.
                $name,

                [string]
                # Задает расширение. По умолчанию используется
                расширение "Txt".
                $extension = "txt"
            )
            $name = $name + "." + $extension
            $name

            <#
            .SYNOPSIS
            Добавление расширения имени файла к переданному на вход имени.

            .DESCRIPTION
            Добавление расширения имени файла к переданному на вход
            имени. Принимает любые строки в качестве имени файла или
            расширения.

            .INPUTS
            Нет. Объекты не могут передаваться функции Add-Extension
            по конвейеру.

            .OUTPUTS
            System.String. Функция Add-Extension возвращает строку с
            расширением или именем файла.

            .EXAMPLE
            C:\PS> extension -name "файл"
            файл.txt

            .EXAMPLE
            C:\PS> extension -name "файл" -extension "doc"
            файл.doc

            .EXAMPLE
            C:\PS> extension "файл" "doc"
            файл.doc

            .LINK
            Интернет-версия: http://www.fabrikam.com/extension.html

            .LINK
            Set-Item
            #>
        }




    Пример 3. Справка для скрипта на основе комментариев

        В следующем примере в код скрипта включена справка на основе
        комментариев.

        Обратите внимание на пустые строки между закрывающим
        элементом "#>" и оператором Param. Если в скрипте нет
        оператора Param, между последней строкой последнего
        комментария и первой строкой объявления первой функции должны
        присутствовать хотя бы две пустых строки. Без этих пустых
        строк Get-Help свяжет раздел справки с функцией, а не со скриптом.

           <#
           .SYNOPSIS
           Выполняет ежемесячное обновление данных.

           .DESCRIPTION
           Скрипт Update-Month.ps1 обновляет реестр, дополняя его
           новыми данными, созданными в течение прошедшего месяца, и
           генерирует отчет.

           .PARAMETER InputPath
           Задает путь к входному CSV-файлу.

           .PARAMETER OutputPath
           Задает имя и путь к выходному CSV-файлу. По умолчанию
           MonthlyUpdates.ps1 формирует имя в соответствии с датой и
           временем запуска и сохраняет выходные данные в локальном
           каталоге.

           .INPUTS
           Нет. Объекты не могут передаваться скрипту Update-Month.ps1
            по конвейеру.

           .OUTPUTS
           Нет. Update-Month.ps1 не формирует никаких выходных данных.

           .EXAMPLE
           C:\PS> .\Update-Month.ps1

           .EXAMPLE
           C:\PS> .\Update-Month.ps1 -inputpath C:\Data\January.csv

           .EXAMPLE
           C:\PS> .\Update-Month.ps1 -inputpath C:\Data\January.csv
           -outputPath C:\Reports\2009\January.csv
           #>

           param ([string]$InputPath, [string]$OutPutPath)

           function Get-Data { }
           ...


        Следующая команда возвращает справку к скрипту. Поскольку
        скрипт находится в каталоге, который не входит в переменную
        среды Path, в команде Get-Help, которая возвращает справку к
        скрипта, необходимо указать путь к скрипту.


            PS C:\ps-test> get-help .\update-month.ps1 -full

            NAME
                C:\ps-test\Update-Month.ps1

            SYNOPSIS
                Выполняет ежемесячное обновление данных.

            СИНТАКСИС
                C:\ps-test\Update-Month.ps1 [-InputPath] <String>
                [[-OutputPath] ]<String>] [<CommonParameters>]

            ОПИСАНИЕ
                Скрипт Update-Month.ps1 обновляет реестр, дополняя
                его новыми данными, созданными в течение прошедшего
                месяца, и генерирует отчет.

            ПАРАМЕТРЫ
               -InputPath
                   Задает путь к входному CSV-файлу.

                   Требуется?                    true
                   Позиция?                      0
                   Значение по умолчанию
                   Принимать входные данные
                   с конвейера?                  false
                   Принимать подстановочные знаки?

               -OutputPath
                   Задает имя и путь к выходному CSV-файлу. По умолчанию
                   MonthlyUpdates.ps1 формирует имя в соответствии с датой
                   и временем запуска и сохраняет выходные данные в
                   локальном каталоге.

                   Требуется?                    false
                   Позиция?                      1
                   Значение по умолчанию
                   Принимать входные данные
                   с конвейера?                  false
                   Принимать подстановочные знаки?

               <CommonParameters>
                   Данный командлет поддерживает общие параметры:
                   -Verbose, -Debug, ErrorAction, -ErrorVariable,
                   -WarningAction, -WarningVariable, OutBuffer и
                   -OutVariable. Чтобы получить дополнительные
                    сведения, введите команду "get-help
                    about_commonparameters".

            ВХОДНЫЕ ДАННЫЕ
                   Нет. Объекты не могут передаваться скрипту
                   Update-Month.ps1 по конвейеру.

            ВЫХОДНЫЕ ДАННЫЕ
                   Нет. Update-Month.ps1 не формирует никаких
                   выходных данных.


            -------------------------- ПРИМЕР 1 --------------------------

            C:\PS> .\Update-Month.ps1

            -------------------------- ПРИМЕР 2 --------------------------

            C:\PS> .\Update-Month.ps1 -inputpath C:\Data\January.csv

            -------------------------- ПРИМЕР 3 --------------------------

            C:\PS> .\Update-Month.ps1 -inputpath C:\Data\January.csv
            -outputPath
            C:\Reports\2009\January.csv

            ССЫЛКИ ПО ТЕМЕ



    Пример 4. Перенаправление в XML-файл

        Для функций и скриптов можно писать разделы справки на основе
        XML. Хотя справку на основе комментариев проще реализовывать,
        справка на основе XML необходима, если требуется более четкий
        контроль содержания справки или перевод разделов справки на
        несколько языков.

        В следующем примере показаны несколько первых строк скрипта
        Update-Month.ps1. В скрипте используется ключевое слово
        ExternalHelp, позволяющее указать путь к разделу справки для
        скрипта на основе XML.


            # .ExternalHelp C:\MyScripts\Update-Month-Help.xml


            param ([string]$InputPath, [string]$OutPutPath)

            function Get-Data { }
            ...



       В следующем примере показано использование ключевого слова
       ExternalHelp в функции.


            function Add-Extension
            {
                param ([string] $name, [string]$extension = "txt")
                $name = $name + "." + $extension $name

                # .ExternalHelp C:\ps-test\Add-Extension.xml
            }


    Пример 5. Перенаправление в другой раздел справки

        Ниже представлен фрагмент кода, представляющий собой начало
        встроенной функции Help в оболочке Windows PowerShell,
        который обеспечивает постраничный вывод справки на экран.
        Поскольку функция Help описывается в разделе справки для
        командлета Get-Help, в этой функции используются ключевые слова
        ForwardHelpTargetName и ForwardHelpCategory для перенаправления
        пользователя в раздел справки для командлета Get-Help.

            function help
            {

            <#
            .FORWARDHELPTARGETNAME Get-Help
            .FORWARDHELPCATEGORY Cmdlet
            #>
            [CmdletBinding(DefaultParameterSetName='AllUsersView')] param(
                [Parameter(Position=0, ValueFromPipelineByPropertyName
                =$true)] [System.String]
                ${Name},
                   ...


        Эта функция используется в следующей команде.

            C:\PS> get-help help

            ИМЯ
                Get-Help

            ОПИСАНИЕ
                Отображает сведения о командлетах и концепциях
                Windows PowerShell.
            ...


СМ. ТАКЖЕ
    about_Functions
    about_Functions_Advanced_Parameters
    about_Scripts
    "Написание справки для командлетов" (http://go.microsoft.com/fwlink/?LinkID=123415)
PS C:\> help .\new-cor.... .ps1 -showwindow
------------------------------------------
                                   вызвать метод переменной
$test.gettype()
                                  вызвать свойство переменной
$test.count
если это массив, то первый элемент
$test[0]
а последний элемент в массиве
$test[$test.count-1]
длина статуса в массиве
$test[10].status.tostring().length

                                тип переменной(правило, не изменяется)
[int]$test
даже если введем дробное значение, будет присваиваться только целая его часть, а строка выдаст предупреждение об ошибке
--------------------------------------------------------------
dir C:\windows|select-object -first 1|gm   /смотрим тип
dir C:\windows|select-object -first 1|foreach-object{$_.name.length} //считаем длину

                                                                                                       поставщики
Find-PackageProvider –Name "Gistprovider" | Install-PackageProvider -Verbose

PS C:\>Find-PackageProvider –Name "Nuget" -AllVersions
Install-PackageProvider -Name "Nuget" -RequiredVersion "2.8.5.216" -Force
Get-PackageProvider –ListAvailable
Import-PackageProvider –Name "Nuget" -RequiredVersion "2.8.5.201" -Verbose

   цикл
 #этот цикл выводит в обратном порядке нумерацию   от 1 до 31(удобен
#для выполнения операций со вложенными папками )цикл продолжается пока условия выполняются                                                                                                
[int]$index =31
while($index -GT 0)
{
$index ;
$index=$index-1;
}
                                                                         или  цикл do ....while
цикл выполняется, но проверка условий будет после выполнения
[int]$index =0
do
{
$index ;
$index=$index-1;
}
while($index -GT 0)   
                                                                         или  цикл do...until
цикл выполняется до проверки условий окончания цикла( выполняется пока условие ложно)
[int]$index =31
do
{
$index ;
$index=$index-1;
}
until($index -GT 0)   
                                                                         или  цикл For
cls
For(
[int]$index = 31;         #выполняется один раз в самом начале, до прокрутки цикла
$index -GT 0;             #условия продолжения цикла
$index = $index -1    #выполнение после каждого повторения
)
{
           $index             #полезная нагрузка в цикле
}


                                                                         или  цикл For
$slovar=dir "D:\необходимости\словари\тексты"
For(
[int]$i=0;                         #выполняется один раз в самом начале, до прокрутки цикла
$i -LT $slovar.Count;    #условия продолжения цикла
$i = $i + 1                      #выполнение после каждого повторения
)
{
	$slovar[$i].Name  #полезная нагрузка в цикле
}


                                                                        или  цикл For
cls
$slovar=dir "D:\необходимости\словари\тексты"
For(
[int]$i=0;                         #выполняется один раз в самом начале, до прокрутки цикла
$i -LT $slovar.Count;    #условия продолжения цикла
$i = $i + 1                      #выполнение после каждого повторения
)
{
	$slovar[$i].Name   #полезная нагрузка в цикле
}

Foreach($s in $slovar)
{
    $s.Name
}
 
 $s.Name
                                                                         или  цикл if
cls
[int]$test=3
$test
if($test -GT 3)
{
	write-host"Больше трех"
}
elseif($test -GT 1)
{
	write-host".........."
}
else
{
	write-host".............."
}
                                                                         или  цикл if

#в этой папке будем искать
$RootFolderName="C:\windows" 
# показать название каталога в корневой папке диска «с:»,
#в котором больше всего вложенных подкаталогов.
# это массив папок верхнего уровня. Будем их перебирать.
$RootC = Dir $RootFolderName -Directory

#	$RootC
$MaxCount = 0                         # тут будем запоминать максимальное найденное число податалогов
$MaxName = ""                       # тут будем запоминать название папки с максимальным числом подкаталогов
ForEach ($F in $RootC)         # перебираем все каталоги верхнего уровня
{
	$SubF = Dir  -Directory $F.FullName            # Получаем список вложенных папок
	if ($SubF.Count -gt $MaxCount)                  # Сравниваем число подпапок в текущем каталоге с папкой-"лидером"
    { # Если найден новый лидер гонки, запоминаем его параметры
    $MaxCount = $SubF.Count                         # Число подкаталогов у нового лидера
    $MaxName =$F.FullName                           # название нового лидера
    }
}
$MaxName                                                # После перебора всех папок в этой переменной будет название папки-лидера
----------------------------------------------------------------------------
скрипт выводит название каталога с самым большим числом файлов расширение которых мы указываем
#вводим название скрипта и параметры-путь-расширение файла в кавычках
#по умолчанию
[CmdletBinding()]
Param(
[Parameter(Mandatory=$True)]
[string]$RootFolderName, 
[string]$ext ="*"  
)
write-host("Каталог: " + $RootFolderName)
write-host("Расширение: " + $ext)
#в этой папке будем искать $RootFolderName="C:\windows" 
# показать название каталога в корневой папке диска «с:»,
#в котором больше всего вложенных подкаталогов.
# это массив папок верхнего уровня. Будем их перебирать.
$RootC = Dir $RootFolderName -Directory

#	$RootC
$MaxCount = 0                         # тут будем запоминать максимальное найденное число подкаталогов
$MaxName = ""                       # тут будем запоминать название папки с максимальным числом подкаталогов
ForEach ($F in $RootC)         # перебираем все каталоги верхнего уровня
{
	$SubF = Dir  -File ($F.FullName + "\*." + $ext)            # Получаем список вложенных папок
	if ($SubF.Count -gt $MaxCount)                  # Сравниваем число подпапок в текущем каталоге с папкой-"лидером"
    { # Если найден новый лидер гонки, запоминаем его параметры
    $MaxCount = $SubF.Count                         # Число подкаталогов у нового лидера
    $MaxName =$F.FullName                           # название нового лидера
    }
}
$MaxName                            # После перебора всех папок в этой переменной будет название папки-лидера
-------------------------------------------------------------
#скрипт для заданной папки создает в каждой из ее подпапок вложенную папку с названием "rezultat"
Param(
    [string]$NRoot ="N:\",
    [string]$NFolder="rezultat"
)

$Ndir= dir $NRoot -Directory
ForEach($N in $Ndir)
{
    New-Item -Name $NFolder -ItemType Directory -Path $Ndir.FullName
}
#скрипт для заданной папки создает в каждой из ее подпапок вложенную папку с названием "rezultat"
или конвейр выполняющий тоже решение
Dir $NRoot -Directory | ForEach-object CreateSudirectory $NFolder
--------------------------------------------------------------------
                                                    # обработка ошибок с выводом на  экран сообщения

[int]$a=0

Try
	{
	$a +1
	$a*2
	10/$a                              #скрипт остановлен, деление наноль
	$a-1                                # не исполняется, вывод на экран результатов только до остановки скрипта  
	Write-Host"Ошибок нет"
	}
Catch
	{
	Write-Host"Произошла случайная ошибка, скрипт остановлен, дальнейшего продолжения работы не будет"
	Write-Error"Произошла случайная ошибка"
	Write-Warning"Произошла случайная ошибка"
	}

----------------------------------------------
                                           ввод параметров в комстроке PowerShell 
Для запуска скрипта с вводимыми параметрами переходим  в папку сохранения скрипта.
Обязательно перед параметром ставим тире, после введения параметра -А ставим пробел и вводим значение 1,
при неправильном введении параметров работа скрипта завершается ошибкой
PS P:\скрипты_проект\power_scripts> .\Un.ps1 -A 1 -B 2 -Verbose

                                           обработка ошибок со сложным синтаксисом
#обработка ошибок со сложным синтаксисом
#число
#число
#параметр создания ключа, начинающегося с дефиса "-C", 
#"-C"аналог параметра -Directory или -recurse у командлета dir

[CmdletBinding( )]

Param(
[int]$A,
[int]$B,
[switch]$C
)

#cls
#при вводе параметра "-Verbose" вывод введеных значений
Write-Verbose ( "Параметр А: "+ $A)

#при вводе параметра "-Debug"вывод каждого шага скрипта с запрашиваемым
#разрешением "Y-да"
$A | Get-Member | Write-Debug

Write-Verbose ("Параметр В: "+ $B)
$B | Get-Member | Write-Debug
Write-Verbose ("Параметр C: "+ $C)

------------------------------------------------
                                                                   
                                        -----------------------------========================================================
dir "D:\необходимости\словари\тексты"|select-object -property fullname, extension, length

===========================================================================================================
=========================================================================================================================================================================================================================






------------------------------------------------
Форматирование чисел

Число в формате Decimal:
"{0:N2}" -f 123456789.012345
123 456 789,01
Число в формате Currency:
"{0:С2}" -f 123456789.012345
123 456 789,01 р.
Число в формате Percentage:
"{0:Р2}" -f 123456789.012345
12 345 678 901,23%
Число в формате Scientific:
"{0:Е2}" -f 123456789.012345
1,23Е+008
Число в формате Fixed Point:
"{0:F2}" -f 123456789.012345
123456789,01
Число в формате HEX:
"{0:Х0}" -f 123456789
75BCD15
-----------------------------------------
Число в формате Percentage:
"{0:Р2}" -f (0.25)
"{0:Р2}" -f ($a/100)
--------------------------------------------
в 16-ричную систему счисления
Число в формате HEX:
"{0:Х2}" -f ($a)




=========================================================================================================
                                                                                                                                Структура курса
                                                                                                             PowerShell Desired State Configuration
Структура DSC

Configuration CheckWebServer
{
Node Node01
{
WindowsFeature Resource01
{ ... }
File Resource02
{ ... }
Service Resource03
{ ... }
                   }
}
01	|Введение в DSC
02	| Конфигурация: создание и применение
03	| Ресурсы DSC
04	| Применение конфигурации для нескольких серверов
                                                          
                                                                 Модуль 1. Введение в PowerShell DSC
                                                                                  Содержание модуля
•	Desired State Configuration
•	Системные требования
•	Сравнение DSC и GPO
•	Конфигурационные скрипты, MOF-файлы, ресурсы
•	Применение DSC

Desired State Configuration
•	"Настройка требуемого состояния"  // Дословный перевод
•	Позволяет декларативно сконфигурировать систему
Мы создаем простой текстовый файл, в котором мы прописываем, как система должна быть настроена.
Если параметры установок на компьютере совпадают, то ничего не происходит, если обнаружены недостающие настройки или изменения ,то изменения будут  согласно прописанным нами в нашем файле настройкам.

Системные требования
•	Windows Management Framework 4.0
•	KB28883200
•	Microsoft .NET Framework 4.5

                                                                                                DSC и Групповые политики

Функция	                                                                                       Групповые политики	DSC
Хранение конфигурации	                                                           Файл GPO	          Конфигурационный скрипт/ MOF-файл
Указание целевых узлов	                    AD связана с OU, сайтами и т.д.	         Имя узлов указывается при конфигурации
Применение конфигурации	                   Клиентские компоненты ОС           Сценарии оболочки на стороне клиента (ресурсы)
Расширяемость	                                     Комплексное программирование	                                 Скрипты Windows PowerShell
Основная цель конфигурации	        Реестр                                      Все, до чего Windows PowerShell может "дотронуться"
Сохраняемость	                                       Настройки каждый раз применяются заново	                           Настройки постоянны
Число конфигурации на узел                   Столько GPO, сколько захотите                                                                                    Одна

-----------------------------------------------------------------
                                                                                      Уровни DSC

Конфигурационный скрипт
MOF-файл
Ресурсы
-------------------------------------------
Конфигурационный скрипт
•	Что нужно сконфигурировать
•	Как нужно сконфигурировать
•	Где нужно сконфигурировать
на основании Конфигурационного скрипта компилируется MOF-файл и с помощью Ресурсов, происходит развертка
DSC (Desired State Configuration)
--------------------------------------
MOF-файлы
•	Managed Object Format
•	Кросс-платформенный стандарт
Позволяет создать  Кросс-платформенную систему(Windows,линукс) управления конфигурации (Обычный текстовый файл, в котором указаны все требования по настройке)

Ресурсы DSC
•	это Специализированные модули PowerShell
•	Ресурсы DSC бывают Встроенные и пользовательские
---------------------------------------------------------
                                                                        Процесс DSC
                                                                        Разработка

Конфигурационный скрипт MyConfig.ps1
Компиляция
MOF-файл SERVER1.mof
Отправка
                                                                Развертывание
MOF-файл на целевом компьютере
Вызов
DSC Ресурсы специализированные модули Windows PowerShell

--------------------------
Применение конфигурации(их 2,или или)
•	Push
-	Конфигурационный скрипт должен быть перенесен на каждый из
компьютеров вручную
•	Pull
-	Проверка корректности конфигурации. Если клиент сконфигурирован не должным образом, конфигурация
запрашивается у Pull-сервера
-------------------------------------------------
                                                                               ДЕМОНСТРАЦИЯ
                                                                       Введение в PowerShell DSC
Windows Server 2012R2
PowerShell
-----------------------
как  мы будем отправлять MOF-файл на наш целевой компьютер

подключиться удаленно в меню выбираем
файл(File)
открываем вкладку
New Remote Powershell Tab
в форме вводим имя компьютера и учетная запись (имя пользователя-например администратор)
Computer            DSCO1
User name         Administrator
нажимаем 
connect
в новой вкладке указываем пароль к учетной записи
на консоли изменилость приглашение и произошло соединение ссервером
открываем папку с конфигурационым скриптом
тянем мышью файл IISWebsite.ps1 на консоль, и второй common.ps1 с заготовкой команд
IISWebsite.ps1

Configuration IISWebsite
{
            Node DSC01
                {
                     WindowsFeature IIS
                      {
                           Ensure ="Present”
                           Name= "Web-Server"
                      }
                     WindowsFeature ASP
                      {
                            Ensure ="Present”
                            Name ="Web-Asp-Net45”
                       }
                      File WebContent
                      {
                             Ensure ="Present”
                             Type ="Directory"
                             SourcePath "C :\Content\BakeryWebsite"
                             DestinationPath "С:\inetpub\wwwroot\"
                             Recurse =$true
                        }
             }
}IISWebsite


common.ps1

#Start configuration - create MOF file
Start-DscConfiguration -ComputerName DSC01 -Path IISWebsite -Wait -Verbose
Start-DscConfiguration -ComputerName DSC01 -Path ParamConfig -Verbose
#Check features availability
Get-WindowsFeature -ComputerName DSC01 -Name Web-ASP*
Get-WindowsFeature -Name W3SVC -ComputerName DSC01
#Remove content
Remove-Item \\DSC01\c$\inetpub\wwwroot\images -Force
#Control Configuration Drift
$session =New-CimSession -ComputerName DSC01 -Credential MVA\Administrator
Test-DscConfiguration

После запуска конфигурационного файла должна появиться папка IISWebsite
в файле common.ps1 в самом начале строки выделяем Get-WindowsFeature -ComputerName DSC01 -Name Web-ASP*
нажимаем на зел треугольник(F5)-запуск скрипта
видим , что сервер доступен, но не установлен(Available)
папка в документах на локальном компьютере тоже пуста

PS С :\Windows\System32\WindowsPowerShell\v1.0>
[DSC01]: PS C:\Users\Administrator.MVA\Documents> Get-WindowsFeature -ComputerName DSC01 -Name Web-ASP*
Display Name           
[ ] ASP
[ ] ASP.NET 3.5
[ ] ASP.NET 4.5
  
Name  
Web-ASP
Web-Asp-Net
Web-Asp-Net45

Install State
Available
Available
Available
[DSC01]: PS C:\Users\Administrator.MVA\Documents>

начнем компилировать файл полностью IISWebsite.ps1 жмем F5
...
Directory: С :\Users\Administrator.MVA\Documents\IISWebsite
Mode	LastWriteTiee Length Name
-a—	3/2/2015 11:17 AM	2386 DSCO1.mof
[DSC01]: PS C:\Users\Administrator.MVA\Documents>

папка в документах на локальном компьютере IISWebsite появилась, внутри файл DSCO1.mof(можно открыть блокнотом)
теперь запускаем команду из файла 
в файле common.ps1 в самом начале строки выделяем 
Start-DscConfiguration -ComputerName DSC01 -Path IISWebsite  -Wait-Verbose
нажимаем F5
теперь обнаружили удаленной папку с картинами сайта(знакомая случайная ошибка)

[DSC01]:	: PS C:\Users\Administrator.MVA\Docunients> Get-WindowsFeature -ComputerName DSCOl -Name Web-ASP*
Display Name		Name	              Install State
	[ ] ASP	                  Web-ASP	                   Available
	[ ] ASP.NET 3.5	Web-Asp-Net	Available
	[X] ASP.NET 4.5	Web-Asp-Net45	Installed
[DSCO1]:	: PS C:\Users\Administrator.MVA\Documents> Get-WindowsFeature -Name W3SVC -ComputerName DSCO1
запускаем тест
[DSC01]:	: PS C:\Users\Administrator.MVA\Documents> Test-DscConfiguration
False  //Произошло какое-то изменение относительно конфигурации MOF-файла
		
[DSCO1]:	: PS C:\Users\Administrator.MVA\Documents>	
для восстановления запускаем 
Start-DscConfiguration -ComputerName DSC01 -Path IISWebsite -Wait -Verbose
нажимаем F5
обновляем страницу сайта и видим, что папка с катинками восстановилась	

Преимущества DSC
•	Точная конфигурация компьютера
•	Предотвращение «дрифта» конфигурации(Восстановление)
•	Возможность одновременной конфигурации нескольких компьютеров

Полезные материалы
•	Курсы MVA
-	Расширенные возможности написания скриптов в PowerShell З.С
(Jump Start)
-	Модернизация инфраструктуры организации с помощью Windo
Server 2012 R2
-	Новые возможности Windows Server 2012 R2. Часть 2
•	Windows PowerShell Blog
•	Windows PowerShell на TechNet

---------------------------------------
                                                       Поиск текста в строках и файлах.

  следующая команда выполняет  поиск слова "variable" в концептуальных разделах справки:
          select-string -pattern variable -path $pshome\*.txt


PS C:\Windows\system32> help *select-string*
ИМЯ
    Select-String
ОПИСАНИЕ
    Находит текст в строках и файлах.
СИНТАКСИС
    Select-String [-Path] <string[]> [-Pattern] <string[]> [-AllMatches] [-CaseSensitive] [-Context <Int32[]>] [-Encoding <string>] [-Exclude <string[]>] [-Include <string[]>] [-List] [-NotMatch] [-Quiet] [-SimpleMatch] [<CommonParameters>]

    Select-String -InputObject <psobject> [-Pattern] <string[]> [-AllMatches] [-CaseSensitive] [-Context <Int32[]>] [-Encoding <string>] [-Exclude <string[]>] [-Include <string[]>] [-List] [-NotMatch] [-Quiet] [-SimpleMatch] [<CommonParameters>]


ОПИСАНИЕ
    Командлет Select-String осуществляет поиск текста и текстовых шаблонов во входных строках и файлах. Его можно использовать, как команду Grep в UNIX и Findstr в Windows.

    Работа командлета Select-String основана на текстовых строках. По умолчанию Select-String находит первое совпадение в каждой строке и отображает для каждого совпадения имя файла, номер строки и полный текст найденной строки.

    Однако можно сделать так, чтобы командлет искал несколько совпадений в строке, выводил текст до и после совпадения или выводил только логическое значение (true или false), указывающее, было ли найдено совпадение.

    Командлет Select-String использует поиск по регулярным выражениям, но он также позволяет находить простые совпадения, выполняя поиск введенного фрагмента текста.

    Командлет Select-String может выводить все найденные совпадения или останавливаться после первого совпадения для каждого входного файла. Кроме того, он может выводить весь текст, который не соответствует заданному шаблону.

    Можно также установить для командлета Select-String конкретную кодировку, например при поиске по файлам в кодировке Юникод.
ССЫЛКИ ПО ТЕМЕ
    Online version: http://go.microsoft.com/fwlink/?LinkID=113388
    about_Comparison_Operators
    about_Regular_Expressions
ЗАМЕЧАНИЯ
    Для просмотра примеров введите: "get-help Select-String -examples".
    Для получения дополнительных сведений введите: "get-help Select-String -detailed".
    Для получения технических сведений введите: "get-help Select-String -full".
--------------------------
PS C:\Windows\system32> get-help Select-String -examples
ИМЯ
    Select-String
ОПИСАНИЕ
    Находит текст в строках и файлах.
    -------------------------- ПРИМЕР 1 --------------------------
    C:\PS>"Hello","HELLO" | select-string -pattern "HELLO" -casesensitive
    Описание
    -----------
    Эта команда выполняет поиск с учетом регистра в тексте, переданном в команду Select-String по конвейеру.
    В результате Select-String находит только строку "HELLO", поскольку "Hello" не является совпадением.
    Поскольку каждый из заключенных в кавычки фрагментов считается отдельной строкой, без параметра -CaseSensitive командлет Select-String распознал бы в качестве совпадений оба фрагмента.
    -------------------------- ПРИМЕР 2 --------------------------
    C:\PS>select-string -path *.xml -pattern "the the"
    Описание
    -----------
    Эта команда ищет во всех XML-файлах в текущем каталоге строки, включающие слова "the the", и отображает их.
    -------------------------- ПРИМЕР 3 --------------------------
    C:\PS>select-string -path $pshome\en-US\*.txt -pattern "@"
    Описание
    -----------
    Эта команда ищет в файлах концептуальной справки Windows PowerShell (about_*.txt) сведения об использовании символа (@).
    Для указания пути в этой команде используется значение автоматической переменной $pshome, в которой хранится путь к каталогу установки Windows PowerShell. В данном примере команда осуществляет поиск по каталогу en-US, в
    котором содержатся файлы справки Windows PowerShell на английском (США) языке.
    -------------------------- ПРИМЕР 4 --------------------------
    C:\PS>function search-help
    {
        $pshelp = "$pshome\es\about_*.txt", "$pshome\en-US\*dll-help.xml"
        select-string -path $pshelp -pattern $args[0]
    }
   Описание
    -----------
    Эта простая функция использует командлет Select-String для поиска заданной строки в файлах справки Windows PowerShell. В данном примере функция осуществляет поиск по каталогу en-US, в котором содержатся файлы справки на английском (США) языке.
    Чтобы найти с помощью этой функции строку, например "psdrive", введите "search-help psdrive".

    Чтобы использовать эту функцию в произвольной консоли Windows PowerShell, замените путь на расположение файлов справки Windows PowerShell в конкретной системе, а затем скопируйте функцию в профиль Windows PowerShell.
    -------------------------- ПРИМЕР 5 --------------------------
    C:\PS>$events = get-eventlog -logname application -newest 100
    C:\PS> $events | select-string -inputobject {$_.message} -pattern "failed"
    Описание
    -----------
    В этом примере осуществляется поиск строки "failed" в 100 последних событиях журнала "Приложение" средства "Просмотр событий".
    Первая команда с помощью командлета Get-EventLog получает 100 последних записей из журнала событий "Приложение". После этого она сохраняет события в переменной $events.
    Вторая команда с помощью оператора конвейера (|) передает объекты из переменной $events в командлет Select-String. Для представления входных данных в переменной $events она использует параметр InputObject. Значение параметра InputObject равно значению свойства Message каждого передаваемого по конвейеру объекта. Текущий объект представляется символом $_.
    Когда событие поступает в конвейер, командлет Select-String ищет строку "failed" в свойстве Message этого события и отображает строки, содержащие совпадение.
    -------------------------- ПРИМЕР 6 --------------------------поиск
    C:\PS>get-childitem c:\windows\system32\* -include *.txt -recurse |
    select-string -pattern "Microsoft" -casesensitive
    Описание
    -----------
    Эта команда ищет во всех TXT-файлах, хранящихся в подкаталогах каталога C:\Windows\System32, строку "Microsoft". Параметр CaseSensitive указывает, что буква "M" в слове "Microsoft" должна быть прописной, а остальные буквы — строчными, чтобы командлет Select-String обнаружил совпадение.
    -------------------------- ПРИМЕР 7 --------------------------
    C:\PS>select-string -path process.txt -pattern idle, svchost -notmatch
    Описание
    -----------
    Эта команда находит в файле Process.txt строки, не содержащие слов "idle" и "svchost".
    -------------------------- ПРИМЕР 8 --------------------------
    C:\PS>$f = select-string -path audit.log -pattern "logon failed" -context 2, 3
    C:\PS> $f.count
    C:\PS> ($f)[0].context | format-list
    Описание
    -----------
    Первая команда ищет в файле Audit.Log фразу "logon failed". Она использует параметр Context, чтобы вывести 2 строки до совпадения и 3 строки после него.

    Вторая команда использует свойство Count массивов объектов для отображения количества найденных совпадений (в данном случае оно равно 2).

    Третья команда отображает строки, хранящиеся в свойстве Context объекта MatchInfo. Для указания первого совпадения (0 в массиве с отсчетом от нуля) используются квадратные скобки, а для отображения значения свойства Context в виде списка — командлет Format-List.

    Вывод состоит из двух объектов MatchInfo — по одному на каждое совпадение. Строки контекста сохраняются в свойстве Context объекта MatchInfo.
    -------------------------- ПРИМЕР 9 --------------------------
    C:\PS>$a = get-childitem $pshome\en-us\about*.help.txt | select-string -pattern transcript
    C:\PS> $b = get-childitem $pshome\en-us\about*.help.txt | select-string -pattern transcript -allmatches
    C:\PS> $a
    C:\Windows\system32\WindowsPowerShell\v1.0\en-us\about_Pssnapins.help.txt:39:       Start-Transcript and Stop-Transcript.
    C:\PS> $b
    C:\Windows\system32\WindowsPowerShell\v1.0\en-us\about_Pssnapins.help.txt:39:       Start-Transcript and Stop-Transcript.
   
 C:\PS>> $a.matches
    Groups   : {Transcript}
    Success  : True
    Captures : {Transcript}
    Index    : 13
    Length   : 10
    Value    : Transcript


    C:\PS> $b.matches
    Groups   : {Transcript}
    Success  : True
    Captures : {Transcript}
    Index    : 13
    Length   : 10
    Value    : Transcript

    Groups   : {Transcript}
    Success  : True
    Captures : {Transcript}
    Index    : 33
    Length   : 10
    Value    : Transcript
    Описание
    -----------
    В этом примере показано действие параметра AllMatches командлета Select-String. Параметр AllMatches позволяет находить все совпадения в строке, а не по одному совпадению.

    Первая команда в этом примере ищет вхождения слова "transcript" в файлах концептуальной справки Windows PowerShell (справка "about"). Вторая команда идентична первой за исключением того, что в ней используется параметр AllMatches.
    Вывод первой команды сохраняется в переменной $a. Вывод второй команды сохраняется в переменной $b.
    При выводе значений переменных по умолчанию они отображаются одинаково, как показано в примере вывода.
    Однако пятая и шестая команда отображают значение свойства Matches каждого из объектов. Свойство Matches для первой команды содержит только одно совпадение (т. е. один объект System.Text.RegularExpressions.Match), в то время как свойство Matches второй команды содержит объекты для обоих совпадений в строке.

=========================пример создания справочной документации====================
function New-CorpEmployee {
<#
.SYNOPSIS
This script coordinates the process of creating new employees.
.DESCRIPTION
This script creates new users in Active Directory. You specify
only the user logon name; the remaining information is queried
from the HR database. You must also specify the server where
the user's home folder should be created.
.PARAMETER UserName
The official logon name for the user, as in firstname-lastname.
This can accept pipeline input,	meaning you can take the CSV
file provided by HR and pipe it	to this command.
.PARAMETER HomeServer
The server name where the user's home folder will live. This
must be an existing home folder server, having a HOMES$ share.
.EXAMPLE
New-CorpEmployee -UserName John-Doe -HomeServer HOMESERVER1
This example creates a single new employee, including their AD
account and a home folder on H0MESERVER1.
.EXAMPLE
Import-CSV data-from-hr.csv | New-CorpEmployee -HomeServer HOMESERVER22
This example imports data from an HR-provided CSV file, that
contains a UserName column. Notice that the -HomeServer is still provided
manually, on the parameter.
.LINK
Connect-CorpHRServer
.LINK
Test-CorpHomeServer
.LINK
http://intanet/helpfiles/newcorpemployee.html
. INPUTS
Accepts one or more strings for -UserName, and a single string for -HomeServer
.OUTPUTS
This command produces no output

.NOTES
This uses information from the corporate HR server. That server is an Oracle
database, and so we use the Query-CorpHRServer command. It is responsible for
making the connection, and it knows how to query the data out of Oracle and turn
it into a useful object. The object it produces has properties which align to the
parameters of New-ADUser, making it a convenient way to query HR information
and create new users from it. 
This tool creates the AD account first, and then creates the user's home folder.
The command that creates home folders assumes that an AD account exists, and it
assigns permissions right away. It'll fail if the account doesn't exist at the time,
which is why we make sure to create the account first.



#>
 [CmdletBinding()]
Param(
            # User name parameter is mandatory, and accepts pipeline input

            [Parameter-(Mandatory=$True.ValueFromPipeline=$True)]
            [string[]]$UserName,
            [Parameter(Mandatory STrue)]
            [string]$HomeServer
 )
BEGIN {
<#
-----------------------------------------------------
              BEGIN BLOCK
-----------------------------------------------------
#>
         # make sure we can connect to the designated home folder server,
         # and throw an error if we cannot

        if (-not (Test-CorpHomeServer -ComputerName $HomeServer) ) {
        Write-Error "Home server $HomeServer failed connectivity test” -Category ConnectionError
        }
#	Instantiate a database connection to the corporate HR server
#	STANDARD 188.42
#	This connection remains open throughout the function of this command
#	and consumes only a single portion of memory, as it is reused throughout
#	the duration of this command. The connection is terminated upon the
#	conclusion of this command, unless this command exits with an error.
#	In that eventuality, the connection will eventually time out from the
#	database server and close automatically.

        

       $HRConnection = Connect-CorpHRServer
  }
 PROCESS {
           <#############################
                       FOR EACH ESER
            #############################>

          foreach ($user in $UserName) {

             #	query user's information from the HR server and
             #	use that to create a new AD user account. The
             #	object returns by Query-CorpHRServer has properties
             #	that correspond to the parameters of New-ADUser

         $UserDetails  -Query-CorpHRServer -UserName $UserName
         $UserDetails | New-ADUser

#================================================================    
          #  set up the user's home folder

         $UserName New-CorpUserHomeFolder -ComputerName $HomeServer
          
          #  end home folger setup
#==================================================================
      }
}
END {

          #shut down the HR data server connection
         $HRConneciton | Disconnect-CorpHRServer
        }
}
-------------------------
                                                  обновление версии powershell 2.0 до powershell 5.0 
осуществляется обычным установщиком обновлений для Windows по ссылке
http://www.microsoft.com/download/details.aspx?id=44070
или
http://go.microsoft.com/fwlink/?LinkID=512808
скачать пакет Win7-KB3134760-x86 для 32-разрядной или для 64-битной системы, закрыв все окна запустить инсталятор с правами администратора и впоследствии применив перезагрузку.
PS C:\Users\Irina_999_555> $PSVersionTable

Name                           Value
----                           -----
PSVersion                      5.0.10586.117
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.10586.117
CLRVersion                     4.0.30319.34209
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1

PS C:\Users\Irina_999_555>
===================================================
                                                Windows PowerShell 5.0 включает следующие новые возможности
===================================================
Оболочка PowerShell 5.0 обладает обратной совместимостью. Командлеты, поставщики модулей, 
 оснастки, скрипты, функции и профили, предназначенные для Windows
 В PowerShell 4.0, ОС Windows PowerShell 3.0 и ОС Windows PowerShell версии 2.0 вообще
 работает в Windows PowerShell с 5.0 без изменения.

Вызывать ее  в Windows 10 TP можно,  просто  написав  PowerShell  в меню  поиска, 
заменившего  пункт «Выполнить»  в  панели «Пуск». 

Узнать  версию установленной оболочки легко с  помощью следующей  команды: 

  PS C:\> $PSVersionTable.PSVersion 
----------------------------------------------- фреймворк OneGet------------------------------------------------
Второе  впечатляющее  нововведение — это фреймворк OneGet. Он  позволяет 
устанавливать  программы  из магазина Windows Store  и  партнеров Microsoft с  помощью 
менеджера Chocolatey  примерно так же,  как это делает любой  пакетный менеджер  в 
Linux — скачивая дистрибутивы  из  репозиториев.  Больше  никаких  ручных  поисков 
софта, загрузки установочных файлов через браузер, медитирования  во  время  их 
распаковки  и бесконечных  кликов «Далее»! Установка многих  программ  в Windows 
выполняется  в одну строку: 

  Install-Package ИмяПрограммы 

Ключ -Force, указанный  после  имени  программы,  подавляет  вывод запросов  на 
подтверждение действий. Однако если  введенное  название  не  идентифицирует 
программу уникально, а  приложения  и  плагины с таким  набором символов  находятся  на 
разных  ресурсах, то  предварительно следует  выполнить обнаружение  пакета  командой 
Find-Package. 

Если  пакета  нет  на удаленном узле  из списка доверенных  источников, то скачивание с 
другого сетевого  ресурса  потребуется  подтвердить

Установка Skype  из  PowerShell 
PS C:\> Find-Package Skype

Обычно  проще сразу добавить Chocolatey  в  качестве доверенного узла. Сделать это 
можно  при  помощи  команды  регистрации  нового  источника  программ  и обновлений: 

  Register-PackageSource -Name chocolatey -Provider PSModule -Trusted -Location  
  http://chocolatey .org/api/v2/ -Verbose 

      INFO 
      менеджер  пакетов Chocolatey  поддерживал свыше  2500  пакетов. Для  него есть  графическая оболочка ChocolateyGUI,  работающая подобно линуксовой Synaptic для APT.  
------------------------------------------------------
Основную мощь  PowerShell обеспечивают  командлеты — отдельные  классы  платформы 
.NET.  В  PowerShell 5.0  появилось  несколько  новых  командлетов, упрощающих 
выполнение типовых задач.   например, модуль Microsoft.PowerShell.Archive содержит  набор  командлетов для  работы 
с архивами  в формате ZIP, а  командлет ConvertFrom-String  позволяет  извлекать  и анализировать структурированные объекты  из текстовых строк. 
Для более удобной  работы с  ключами  и сертификатами были добавлены  командлеты 
Get-CmsMessage,  Protect-CmsMessage  и  Unprotect-CmsMessage. Они обеспечивают 
поддержку  криптографического синтаксиса согласно  RFC5652. 
Помимо добавления  новых  классов  платформы .NET,  в  пятой  версии  PowerShell были 
обновлены  и хорошо  известные.     например,  командлеты для управления элементами 
файловой системы (New-Item,  Remove-Item  и Get-ChildItem) теперь  поддерживают 
символьные ссылки. 
В  PS 5.0 значительно улучшились  и средства отладки сценариев. Новая функция 
отслеживания  подробно  протоколирует  работу скриптов. Увидеть ее  результаты можно 
в журналах событий Windows,  где теперь доступны детальные логи. 

Появилась  возможность с  помощью  набора  командлетов Get-Runspace,  Debug-Runspace, 
Get-RunspaceDebug,  Enable-RunspaceDebug  и  Disable-RunspaceDebug  выполнять отладку 
в любой области  памяти, а  не только  в заданной  по умолчанию. Теперь  PowerShell 
позволяет устанавливать  по  F9 точки останова  в  несохраненных  и активных сценариях. 
Кроме того, он  поддерживает  вложенную отладку,  необходимую для анализа дочерних 
процессов отдельно от  родительского. 

Есть  в  PS 5.0  и  ряд общих  изменений.  В  новой оболочке была  реализована  поддержка 
нескольких  версий одного модуля,  расположенных  в той же  папке. Требуемая  версия 
может указываться  в  командлетах Get-Module,  Import-Module  и  Remove-Module. 
Проверка  версии модуля  выполняется с  помощью  командлета Test-ModuleManifest. 

Изменился  и  принцип  работы с сетью за счет добавления уровней абстракции.  В модуле 
NetworkSwitch  появились  командлеты для  виртуализации сетевых  подключений.  Пока 
работать они будут только с сетевым оборудованием  партнерских фирм,  прошедшим 
сертификацию Microsoft. Сейчас  к  нему относятся только  коммутаторы  производства 
Cisco  и  Huawei,  но список явно  расширится  в ближайшее  время. 

Как  и  прежде, оболочка  PowerShell обеспечивает легкую читаемость  кода, характерную 
для  всех языков  высокого уровня. Она  работает  поверх общеязыковой  исполняющей 
среды (CLR),  которая  переводит  код  на общем  промежуточном языке (CIL, часто 
называемый ассемблером  виртуальной машины  платформы .NET)  в байт-код. 

  Новую  версию  PowerShell можно будет загрузить  в составе Windows Management 
Framework 5.0 с сайта Microsoft, а  в Windows 10 TP оболочка уже  интегрирована.  Ее 
апдейт  происходит через общий  центр обновлений. 
--------------------------------------------------------
Полный список  изменений  в  PowerShell v.5.0 (http://goo.gl/Nqo2mN) 
Работа менеджера OneGet  в  PowerShell (http://goo.gl/TqWDvM)  
-----------------------------------------------------------                   ---------------------------------------------
                                                                                   конвейры
dir "C:\windows"|get-member -membertype property   //все свойства system.io.fileinfo
dir "C:\windows"|select-object -property fullname,extension, length  //полное имя, расширение, длина

подсчет длины в килобайтах
dir "C:\windows"|select-object -property name, length, @{n="size in KB"; e={$_.length/1024}}
dir "C:\windows"|select-object -property name, length, @{n="size in KB"; e={$_.length/1024}}|sort-object -property "size in KB" -descending

подсчет-длина в мегабайтах
dir "C:\windows"|select-object -property name, length, @{n="size in MB";e={$PSItem.length/1024/1024}}

                                                      как добавить доступные в get-process|get-member свойства и вывести таблично

get-process|select-object -property Handles,NPM,PM,WS,VM,CPU,Id,SI,ProcessName,UserProcessorTime|ft

dir "C:\windows"|where-object length -gt 1000               //покажи файлы длиной больше 1000 байт из каталога "C:\windows"
dir "C:\windows"|where-object Extension -EQ ".log"
удалить все логи из каталога
dir "C:\windows"|Where-object Extension -EQ ".log"| ForEach-object{$_.Delete()}
dir "C:\windows"|where-object Extension -EQ ".exe"//покажи файлы из каталога с расширением похожим на ".exe"

из каталога выбери файлы".exe" посчитай мин,мах,среднее,об.сумму их длины в байтах
dir "C:\windows"|where-object Extension -like ".exe"| measure-object -property length -sum -maximum -minimum -average

dir "C:\windows"|where-object -FilterScript{$_.Extension -like".exe" -and $_.name -like "h*" -and $_.Length -ge 10000}

из каталога сгруппируй файлы по расширению
dir "C:\windows"|Group-object -property Extension 

сгруппируй по статусу службы
get-service|group status
get-service | sort status | format-Wide  -property name  -column 5  -groupby status 
get-service|sort status|FT name, status, canstop, canshutdown -autosize -groupby status -hidetableheaders

форматирование
получить службы, в виде таблицы с именными колонками и вывести имя справа
get-service|sort status|FT status, canstop, canshutdown, @{n="Name"; e={$_.name}; align="right"} -autosize

вывод в html
Get-Service | ConvertTo-Html|out-file "C:\Users\Irina_999_555\Desktop\командная строка\спискидляработы\службы.html"

Get-Service | ConvertTo-Html  -Title "Список служб" -PreContent  "<h1>Мои службы</h1>" |
out-file "C:\Users\Irina_999_555\Desktop\командная строка\спискидляработы\службы.html"
----------------------------------








-------------------------------------------------------------------------------------------------------------
                                                                                   посмотреть модель и серию биоса
PS C:\Windows\system32> Get-WmiObject Win32_BIOS -ComputerName 999IRINA555
Get-WmiObject -Class Win32_Bios | Format-List -Property

SMBIOSBIOSVersion : 6.00 PG
Manufacturer      : Phoenix Technologies, LTD
Name              : Phoenix - AwardBIOS v6.00PG
SerialNumber      :
Version           : _ASUS_ - 42302e31
                                                                                          ввод пароля в биос

Get-WmiObject Win32_BIOS -ComputerName 999IRINA555 -Credential (Get-Credential)
Get-Command -CommandType cmdlet | ? { @($_.ParameterSets | ? { $p = $_.Parameters | Select-Object -Expand Name; (($p -contains 'computername') -and ($p -contains 'credential'))}).Count -gt 0}


                                                                                          фишка-счетчик
PS C:\Windows\system32> Get-Counter

Timestamp                 CounterSamples
---------                 --------------
13.06.2016 13:44:09       \\999irina555\сетевой интерфейс(realtek rtl8139_810x family fast ethernet сетевой адаптер)\всего байт/с : 0
                          \\999irina555\сетевой интерфейс(teredo tunneling pseudo-interface)\всего байт/с :                          0
                          \\999irina555\сетевой интерфейс(isatap.{хххххххх-хххх-хххх-хххх-хххххххххххх})\всего байт/с :                          0
                          \\999irina555\сетевой интерфейс(isatap.{хххххххх-хххх-хххх-хххх-хххххххххххх})\всего байт/с :                          0
                          \\999irina555\процессор(_total)\% загруженности процессора :                    2,70270751121754
                          \\999irina555\память\% использования выделенной памяти :                       71,7521152270912
                          \\999irina555\память\ошибок кэш-памяти/с :                         0
--------------------------------------------------------------------------------------------------------------------------------------------
PS C:\Windows\system32>  Get-HotFix

Source        Description      HotFixID      InstalledBy          InstalledOn
------        -----------      --------      -----------          -----------

999IRINA555   Update           KB2670838     999Irina555\Irina... 10.01.2014 0:00:00
999IRINA555   Update           KB971033      999Irina555\Админ... 11.12.2012 0:00:00
999IRINA555   Update           KB958559      999Irina555\Irina... 10.01.2014 0:00:00
999IRINA555   Update           KB3134760     999Irina555\Irina...
999IRINA555   Security Update  KB2479943     999Irina555\Админ... 11.12.2012 0:00:00
999IRINA555   Security Update  KB2491683     999Irina555\Админ... 11.12.2012 0:00:00
-----------------------------------------------------------------------------------------------------
PS C:\Windows\system32> Get-WmiObject -Namespace "root/default" -List


   NameSpace: ROOT\default

Name                                Methods              Properties
----                                -------              ----------
CIM_Indication                      {}                   {CorrelatedIndications, IndicationFilterName, IndicationIdentifier, IndicationTime...}
CIM_ClassIndication                 {}                   {ClassDefinition, CorrelatedIndications, IndicationFilterName, IndicationIdentifier...}
CIM_ClassDeletion                   {}                   {ClassDefinition, CorrelatedIndications, IndicationFilterName, IndicationIdentifier...}
CIM_ClassCreation                   {}                   {ClassDefinition, CorrelatedIndications, IndicationFilterName, IndicationIdentifier...}
CIM_ClassModification               {}                   {ClassDefinition, CorrelatedIndications, IndicationFilterName, IndicationIdentifier...}
------------------------------------------------------------------------------------------
                                                                                             запрос к серверам
Get-WmiObject -Query "select * from win32_service where name='WinRM'" -ComputerName Server01, Server02 | Format-List -Property PSComputerName, Name, ExitCode, Name, ProcessID, StartMode, State, Status
 PSComputerName : SERVER01
 Name           : WinRM
 ExitCode       : 0
 Name           : WinRM
 ProcessID      : 844
 StartMode      : Auto
 State          : Running
 Status         : OK

 PSComputerName : SERVER02
 Name           : WinRM
 ExitCode       : 0
 Name           : WinRM
 ProcessID      : 932
 StartMode      : Auto
 State          : Running
 Status         : OK

---------------------------------------------------------------------------------------------------------------------------------
PS C:\Windows\system32> "*win*"| get-service

Status   Name               DisplayName
------   ----               -----------
Running  WinDefend          Защитник Windows
Stopped  WinHttpAutoProx... Служба автоматического обнаружения ...
Running  Winmgmt            Инструментарий управления Windows
Running  WinRM              Служба удаленного управления Window...
PS C:\Windows\system32>


PS C:\>get-service | sort-object -property @{Expression="Status";Descending=$true}, @{Expression="DisplayName";Descending=$false}
                                                   службы отсортированные по статусу и имени
PS C:\Windows\system32> Get-WmiObject -Class Win32_Service -ComputerName 127.0.0.1|sort-object State,name|ft

ExitCode Name                 ProcessId StartMode State   Status
-------- ----                 --------- --------- -----   ------
       0 AdobeARMservice           1680 Auto      Running OK
       0 Appinfo                           1088 Manual     Running OK
       0 AudioEndpointBuilder       932 Auto      Running OK
------------------------------------------------------------------------------------------
                                                                                   обработка ошибок приложений
Get-EventLog Application -EntryType Error -ComputerName 999IRINA555 storage1  //to type "System.Int64"
PS C:\Windows\system32> Get-EventLog Application -EntryType Error -ComputerName 999IRINA555

   Index Time          EntryType   Source                 InstanceID Message
   ----- ----          ---------   ------                 ---------- -------
  112708 июн 12 21:23  Error       SideBySide             3238068296 Ошибка создания контекста архивации
------------------------------------------------------------------------------------------------
PS C:\Windows\system32> Enter-PSSession

cmdlet Enter-PSSession at command pipeline position 1
Supply values for the following parameters:
ComputerName: 999IRINA555
--------------------------
PS C:\Windows\system32> winrm quickconfig
Служба WinRM уже выполняется на этом компьютере.
WSManFault
    Message
        ProviderFault
            WSManFault
                
PS C:\Windows\system32>
-----------------------------------------------
PS C:\Windows\system32>  Test-WSMan


wsmid           : http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd
ProtocolVersion : http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd
ProductVendor   : Microsoft Corporation
ProductVersion  : OS: 0.0.0 SP: 0.0 Stack: 3.0
---------------------------------------------------------------------------------

PS C:\Windows\system32> Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System LocalAccountTokenFilterPolicy 1 -Type DWord
PS C:\Windows\system32> Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System LocalAccountTokenFilterPolicy 1 -Type DWord
PS C:\Windows\system32> Start-Service WinRM
PS C:\Windows\system32> Set-ItemProperty HKLM:\System\CurrentControlSet\Control\Lsa ForceGuest 0
PS C:\Windows\system32> Set-Item WSMan:\localhost\Client\TrustedHosts –Value * -Force
PS C:\Windows\system32> Set-Item wsman:\localhost\client\trustedhosts * -Force
PS C:\Windows\system32> Set-Item wsman:\localhost\client\trustedhosts server_* -Force
PS C:\Windows\system32> Set-Item wsman:\localhost\client\trustedhosts 10.10.10.* -Force -Concatenate
PS C:\Windows\system32> Set-Item wsman:\localhost\client\trustedhosts 192.168.2.110 -Force -Concatenate
PS C:\Windows\system32> Dir wsman:\localhost\client


   WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Client

Type            Name                           SourceOfValue   Value
----            ----                           -------------   -----
System.String   NetworkDelayms                                 5000
System.String   URLPrefix                                      wsman
System.String   AllowUnencrypted                               false
Container       Auth
Container       DefaultPorts
System.String   TrustedHosts                                   server_*,10.10.10.*,192.168.2.110
PS C:\Windows\system32>
---------------------------------------------------------------------------------------------------------------------
PS C:\Windows\system32> Remove-Item WSMan:\localhost\Listener\* -Recurse -WhatIf
Remove-Item : Службе WS-Management не удается обработать запрос. Службе не удается найти ресурс, указанный URI-идентификатором ресурса и селекторами.
-----------------------------------------------
 Dir WSMan:\localhost\Listener –Recurse | Foreach-Object { $_.PSPath } | Where-Object { (Get-Item "$_.Port").Value -eq 5985 } | Remove-Item -WhatIf
PS C:\Windows\system32> Invoke-Command { $env:computername } -ComputerName 999IRINA555, localhost
----------------------------------------------------------------------------------------------------------------------------------------------



-------------------------------------------------------------               -------------------------------------------
                                                          Получение IP адреса с использованием DHCP 

Для настройки конфигурации сетевой карты в PowerShell используется набор 
командлетов модуля NetTCPIP 

 PS C:\> 
В самом простом случае чтобы настроить сетевую карту для получения 
IP адреса с использованием DHCP необходимо сначала выбрать 
необходимую сетевую карту, а потом настроить автоматическое получение 
как для IP конфигурации так и для DNS 

  $NetAdapter   Get-NetAdapter -Name  '*internal*' 
  $NetAdapter  | Set-NetIPInterface -Dhcp  
  $NetAdapter  | Set-DnsClientServerAddress 

                                                        Установка IP адреса для сетевого интерфейса 
Для работы с IP адресами существует 
набор команд NetIPAddress 

   Get-Command *NetIPAddress* 

Чтобы установить адрес статически опять же необходимо выбрать нужный 
сетевой адаптер и воспользоваться комадлетом New­NetIPAddress. 

   $NetAdapter   Get-NetAdapter -Name  '*internal*' 
   $NetAdapter  | New-NetIPAddress -IPAddress 
   $NetAdapter  | Set-DnsClientServerAddress 

Заметьте, если сетевой адаптер всего один, то параметр Name в командлете 
Get­NetAdapter становится не обязательным. 

                                                                              Удаление IP адреса 
  $NetAdapter   Get-NetAdapter -Name  '*internal*' 
 $NetAdapter  | Remove-NetIPAddress 
 $NetAdapter  | Set-DnsClientServerAddress 

Однако шлюз таким образом удалиться не получится: Чтобы удалить шлюз необходимо уже 
настраивать таблицу маршрутизации. 
Тут возможно два варианта, если знаешь адрес шлюза: 

   $NetAdapter  | Remove-NetRoute -NextHop  
Или если не знаешь адрес: 

  $NetAdapter  | Remove-NetRoute -DestinationPrefix 

Главное помнить что настройка айпиадреса, шлюза и параметров днс — это 
фактически настройка трех разных объектов. 
---------------------------------------------------------------------------
                                                                                        архивация и разархивация
-----------------------------------------------------------------
                                                                                                                     разархивация
expand-archive -path N:\pdf_cbopka\p2\книга4\дополнения\BootSpeedBook.zip 'N:\pdf_cbopka\p2\книга4\дополнения\'

                                                                                                               архивация
           #Упаковка папки в архив 
 Compress-Archive -LiteralPath C:\test\ -DestinationPath C:\archive\test2.zip 

         #Создание архива со всем содержимым папки 
  Compress-Archive -Path C:\test\* -DestinationPath C:\archive\test1.zip 


                                                                                              Powershell Guru

                                                   BEST PRACTICES POWERSHELL НА РУССКОМ ЯЗЫКЕ
                                                  Наиболее часто задаваемые вопросы по PowerShell.

PS C:\Users\Irina> (ex: ipconfig)
Источник	russian.powershell-guru.com



ACL
Active Directory
Alias
Arrays
Browsers
Certificates
Characters
CIM
Comments
COM Objects
Compare
Computer
Credentials
CSV
Culture
Date
Drives
Environment
Errors
Event Viewer
Files
Folders
Format Operator (-f)
Functions
GPO
GUI
Hardware	Hashtables
Help
History
Jobs
Keyboard
Loops
Math
Memory
Messages
Modules
Microsoft Excel
Microsoft Exchange
Microsoft Outlook
Microsoft SharePoint
Networking
Openfiles
Operators
Parameters
Password
Powershell ISE
Powershell v5
Printers
Processes
PSObject
Quest
Random
RDP	Regedit
Regex
Remote
Restore
Scheduled Tasks
Search
SCCM
Services
SMTP
Snapins
Sounds
Static .NET Methods
Strings
System
Try/Catch
Variables
Symantec Vault
Windows 2012
Windows Azure
Windows Forms
WMI
XML

                                                                                                                  System
                                                                                      Как определить мою версию PowerShell?


# via Powershell
$PSVersionTable.PSVersion.Major
 
# via Registry
(Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\PowerShell\1\PowerShellEngine').PowerShellVersion # Versions 1 and 2
(Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\PowerShell\3\PowerShellEngine').PowerShellVersion # Versions 3 and 4
 
# via Remote
Invoke-Command -ComputerName $computer -ScriptBlock { $PSVersionTable.PSVersion.Major }

                                               Как запустить другую версию Powershell в режиме обратной совместимости?
powershell.exe -Version 2.0

Как установить принудительное использование определённой версии PowerShell (3,0 и выше) в скрипте с помощью PowerShell?

#Requires -Version 3.0

                                                     Как предоставить скрипту права администратора с помощью PowerShell?

# Solution_решение 1
#Requires -RunAsAdministrator
 
# Solution_решение 2
[bool]((whoami.exe /all) -match 'S-1-16-12288')

                                                                    Как проверить параметры скрипта с помощью PowerShell?
help -Name .\Get-ExchangeEnvironmentReport.ps1 -Full

                                                               Как получить информацию о текущем пользователе с помощью PowerShell?
[Security.Principal.WindowsIdentity]::GetCurrent()

                                   Как создать, отредактировать и перезагрузить профиль с помощью PowerShell?

# Check if a profile exists
Test-Path -Path $PROFILE                                                  # Current User,Current Host  
Test-Path -Path $PROFILE.CurrentUserCurrentHost    # Current User,Current Host  
Test-Path -Path $PROFILE.CurrentUserAllHosts           # Current User,All Hosts     
Test-Path -Path $PROFILE.AllUsersCurrentHost           # All Users, Current Host    
Test-Path -Path $PROFILE.AllUsersAllHosts                  # All Users, All Hosts       
 
# Create a new profile for current user
New-Item -ItemType File -Force $PROFILE # CurrentUserCurrentHost
New-Item -ItemType File -Force $PROFILE.CurrentUserCurrentHost
New-Item -ItemType File -Force $PROFILE.CurrentUserAllHosts
 
# Edit
psEdit $PROFILE (only for ISE)
ise $PROFILE (only for ISE)
notepad.exe $PROFILE
 
# Reload (without restarting Powershell)
& $PROFILE
.$PROFILE
 
# List profiles
$PROFILE | Format-List * -Force


                                                   Как установить паузу на 5 секунд/минут в скрипте с помощью PowerShell?
Start-Sleep -Seconds 5
Start-Sleep -Seconds 300 # 5 minutes

                                                                    Как узнать время последней загрузки с помощью PowerShell?
(Get-CimInstance -ClassName win32_operatingsystem).LastBootUpTime

                                                                     Как получить ускорители типов с помощью PowerShell?

[PSObject].Assembly.GetType('System.Management.Automation.TypeAccelerators')::Get.GetEnumerator() |  Select-Object -Property @{Name='Key'; Expression={$_.Key}},@{name='Value'; Expression={$_.Value}} | Sort-Object -Property Key | Format-Table -AutoSize

                                               Как вывести список программ автозагрузки с помощью PowerShell?

Get-WmiObject -Class Win32_StartupCommand | Sort-Object -Property Caption | Format-Table -Property Caption, Command, User  -AutoSize

                                                         Как удалить приложение с помощью PowerShell?

$application = Get-WmiObject -Query "SELECT * FROM Win32_Product WHERE Name LIKE 'HP Recovery Manager'"
$application.Uninstall()

                                     Как сделать скриншот рабочего стола или активного окна с помощью PowerShell?

Take-ScreenShot -Screen -File 'C:\scripts\screenshot.png' -Imagetype JPEG
Repository : Take-ScreenShot

                                                     Как узнать количество сообщений для очередей MSMQ с помощью PowerShell?

Get-WmiObject -Class Win32_PerfRawData_MSMQ_MSMQQueue -ComputerName $computer | Format-Table -Property Name, MessagesInQueue -AutoSize

                                                                     Как установить исполнительную политику с помощью PowerShell?

# Restricted - No scripts can be run. Windows PowerShell can be used only in interactive mode.
Set-ExecutionPolicy -ExecutionPolicy Restricted
 
# AllSigned - Only scripts signed by a trusted publisher can be run.
Set-ExecutionPolicy -ExecutionPolicy AllSigned
 
# RemoteSigned - Downloaded scripts must be signed by a trusted publisher before they can be run.
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
 
# Unrestricted - No restrictions - All Windows PowerShell scripts can be run.
Set-ExecutionPolicy -ExecutionPolicy Unrestricted
                                                                                               Как создать ярлык с помощью PowerShell?

$shell = New-Object -ComObject WScript.Shell
$shortcut = $shell.Createshortcut("$HOME\Desktop\Procexp.lnk")
$shortcut.TargetPath = 'C:\SysinternalsSuite\procexp.exe'
$shortcut.Save()
                                                                       Как прикрепить или открепить программу в панели задач с помощью PowerShell?

$shell = New-Object -ComObject shell.application
$program = $shell.Namespace($env:windir).Parsename('notepad.exe')
$program.Invokeverb('TaskbarPin')
$program.Invokeverb('TaskbarUnpin')

                                                              Как открыть Windows Explorer с помощью PowerShell?

[Diagnostics.Process]::Start('explorer.exe')
Invoke-Item -Path C:\Windows\explorer.exe

                                                           Как вывести список драйверов устройств с помощью PowerShell?
Get-WmiObject -Class Win32_PnPSignedDriver
Get-WindowsDriver -Online -All
driverquery.exe

                                                                            Как создать GUID с помощью PowerShell?


# Empty GUID
[GUID]::Empty
00000000-0000-0000-0000-000000000000
 
# New GUID (lower case by default)
[GUID]::NewGuid()
7049b4a9-e4bc-4008-a683-067934bd39cf
 
# New GUID (upper case)
$guid = ([GUID]::NewGuid()).ToString().ToUpper()
DD7F5A7B-F46B-49D0-B8A1-D8D1360D2E27
 
# New GUID with a specific value
[GUID]('bc4ad3d3-d704-4bd0-843f-d607fbbc4cd7')
bc4ad3d3-d704-4bd0-843f-d607fbbc4cd7
 
# New GUID (Powershell v5)
New-Guid
cdcaa4d9-c85f-40d7-afd9-32f003afa130

                                        Как узнать расположение временного каталога текущего пользователя с помощью PowerShell?
[System.IO.Path]::GetTempPath()

                                                                 Как объединить общий и дочерний путь с помощью PowerShell?
Join-Path -Path C:\ -ChildPath \windows

                                                             Как вывести список всех команд “Get-*” с помощью PowerShell?
Get-Command -Verb Get

                                                       Как вывести список специальных системных папок с помощью PowerShell?

[System.Enum]::GetNames([System.Environment+SpecialFolder]) | ForEach-Object -Process { $_ + " [System.Environment]::GetFolderPath($_)" }

                                                               Как cмонтировать ISO/VHD файл с помощью PowerShell?

Mount-DiskImage 'D:\ISO\file.iso' # ISO
Mount-DiskImage 'D:\VHD\file.vhd' # VHD

                                                             Как узнать текущую версию .NET Framework с помощью PowerShell?

Get-ChildItem -Path 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP' -Recurse | Get-ItemProperty -Name Version -EA 0 | Where-Object -FilterScript { $_.PSChildName -match '^(?!S)\p{L}' } | Select-Object -Property PSChildName, Version

                                     Как проверить, установлена ли версия 4.5 .NET Framework, с помощью PowerShell?

(Get-ItemProperty -Path 'HKLM:\Software\Microsoft\NET Framework Setup\NDP\v4\Full' -EA 0).Version -like '4.5*'

                 Как начать и остановить расшифровку (для создания записи сессии Windows PowerShell) с помощью PowerShell?
Start-Transcript -Path 'C:\scripts\transcript.txt
Stop-Transcript

                                                               Как изменить текущий каталог на заданный с помощью PowerShell?
Set-Location -Path 'C:\scripts'

                                                                                       Как очистить экран с помощью PowerShell?
Clear-Host
cls # Alias

                                                                                               Как изменить разрешение экрана с помощью PowerShell?
Set-DisplayResolution -Width 1280 -Height 1024 -Force # Windows 2012

                                                         Как установить полноэкранный режим с помощью PowerShell?
mode.com 300

                                              Как узнать размеры (ширина и высота) изображения с помощью PowerShell?

$picture = New-Object -ComObject Wia.ImageFile
$picture.LoadFile('C:\screenshot.jpg')
 
[PSCustomObject] @{
    Width  = $picture.Width
    Height = $picture.Height
}
                                                     Как посмотреть ключ продукта Windows с помощью PowerShell?


function Get-WindowsKey 
{
    ## function to retrieve the Windows Product Key from any PC
    ## by Jakob Bindslet (jakob@bindslet.dk)
    param ($targets = '.')
    $hklm = 2147483650
    $regPath = 'Software\Microsoft\Windows NT\CurrentVersion'
    $regValue = 'DigitalProductId'
    Foreach ($target in $targets) 
    {
        $productKey = $null
        $win32os = $null
        $wmi = [WMIClass]"\\$target\root\default:stdRegProv"
        $data = $wmi.GetBinaryValue($hklm,$regPath,$regValue)
        $binArray = ($data.uValue)[52..66]
        $charsArray = 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'M', 'P', 'Q', 'R', 'T', 'V', 'W', 'X', 'Y', '2', '3', '4', '6', '7', '8', '9'
        ## decrypt base24 encoded binary data
        For ($i = 24; $i -ge 0; $i--) 
        {
            $k = 0
            For ($j = 14; $j -ge 0; $j--) 
            {
                $k = $k * 256 -bxor $binArray[$j]
                $binArray[$j] = [math]::truncate($k / 24)
                $k = $k % 24
            }
            $productKey = $charsArray[$k] + $productKey
            If (($i % 5 -eq 0) -and ($i -ne 0)) 
            {
                $productKey = '-' + $productKey
            }
        }
        $win32os = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $target
        $obj = New-Object -TypeName Object
        $obj | Add-Member -MemberType Noteproperty -Name Computer -Value $target
        $obj | Add-Member -MemberType Noteproperty -Name Caption -Value $win32os.Caption
        $obj | Add-Member -MemberType Noteproperty -Name CSDVersion -Value $win32os.CSDVersion
        $obj | Add-Member -MemberType Noteproperty -Name OSArch -Value $win32os.OSArchitecture
        $obj | Add-Member -MemberType Noteproperty -Name BuildNumber -Value $win32os.BuildNumber
        $obj | Add-Member -MemberType Noteproperty -Name RegisteredTo -Value $win32os.RegisteredUser
        $obj | Add-Member -MemberType Noteproperty -Name ProductID -Value $win32os.SerialNumber
        $obj | Add-Member -MemberType Noteproperty -Name ProductKey -Value $productKey
        $obj
    }
}
                                                                                                                                           Perfmon

                                                                        Как получить текущий “% Processor Time” (усредненное значение) в течение                                                                         последних 5 секунд (10 раз) с помощью PowerShell?

(Get-Counter '\Processor(_total)\% Processor Time' -SampleInterval 5 -MaxSamples 10).CounterSamples.CookedValue

                                                                                                                                      Assemblies

                                                                         Как загружать сборки библиотек с помощью PowerShell?


Add-Type -AssemblyName 'System.Windows.Forms'
 
Add-Type -Path 'C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Windows.Forms\v4.0_4.0.0.0__b77a5c561934e089\System.Windows.Forms.dll'
 
# Deprecated
[System.Reflection.Assembly]::LoadFrom('C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Windows.Forms\v4.0_4.0.0.0__b77a5c561934e089\System.Windows.Forms.dll')

                                                              Как проверить текущие сборки библиотек .NET, загруженные с помощью PowerShell?

# Check All
[System.AppDomain]::CurrentDomain.GetAssemblies() 
 
# Check specific one
[System.AppDomain]::CurrentDomain.GetAssemblies() | Where-Object -FilterScript { $_.FullName -like '*forms*' }

                                                                Как узнать расположение GAC (Global Assembly Cache) с помощью PowerShell?

(New-Object -TypeName Regex -ArgumentList '(?<=file:///)(.*)(?=\/GAC)', 'IgnoreCase').Match(([PSObject].Assembly.Evidence | Where-Object -FilterScript { $_.Value -ne $null }).Value).Value -replace '/', '\'
                                                                 
                                                                                                                     Clipboard

                                                                               Как скопировать результаты в буфер обмена с помощью PowerShell?

Get-Process | clip.exe

                                                                                Как получить содержимое буфера обмена с помощью PowerShell?
Add-Type -AssemblyName PresentationCore
[Windows.Clipboard]::GetText()

                                                                                                                         Hotfixes

                                                                               Как получить установленные обновления с помощью PowerShell?
Get-HotFix -ComputerName $computer

Как узнать, какие обновления были установлены до определенной даты, а какие после неё, с помощью PowerShell?

Get-HotFix | Where-Object -FilterScript { $_.InstalledOn -lt ([DateTime]'01/01/2015') } # Before 01/01/2015
Get-HotFix | Where-Object -FilterScript {$_.InstalledOn -gt ([DateTime]'01/01/2015')} # After 01/01/2015

                                                              Как проверить, установлено ли обновление, с помощью PowerShell?
Get-HotFix -Id KB2965142

                             Как узнать, какие обновления были установлены на удаленном компьютере, с помощью PowerShell?
Get-HotFix -ComputerName $computer

                                                                                                                               Pagefile

                                                                           Как получить информацию о файле подкачки с помощью PowerShell?
Get-WmiObject -Class Win32_PageFileusage | Select-Object -Property Name, CurrentUsage, AllocatedBaseSize, PeakUsage, InstallDate

                                                          Как узнать рекомендуемый размер (МБ) для файла подкачки с помощью PowerShell?
[Math]::Truncate(((Get-WmiObject -Class Win32_ComputerSystem).TotalPhysicalMemory) / 1MB) * 1.5

                                                        Как создать файл подкачки (4096 MB) на диске D: с помощью PowerShell?

Set-WmiInstance -Class Win32_PageFileSetting -Arguments @{
    Name        = 'D:\pagefile.sys'
    InitialSize = 4096
    MaximumSize = 4096
}
                                                                Как удалить файл подкачки на диске С: с помощью PowerShell?


$privileges = Get-WmiObject -Class Win32_computersystem -EnableAllPrivileges
$privileges.AutomaticManagedPagefile = $false
$privileges.Put()
$pagefile = Get-WmiObject -Query "select * from Win32_PageFileSetting where name='c:\\pagefile.sys'"
$pagefile.Delete() # Reboot required
Maintenance

                                                                 Как проверить фрагментацию диска с помощью PowerShell?

$drive = Get-WmiObject -Class Win32_Volume -Filter "DriveLetter = 'c:'" $defragReport = $drive.DefragAnalysis() $defragReport.DefragAnalysis
                                 
                                                       Как проверить свободное дисковое пространство с помощью PowerShell?


Get-WmiObject -Class Win32_logicaldisk | Format-Table -Property @{
    Name       = 'Drive'
    Expression = {$_.DeviceID}
}, @{
    Name       = 'Total size (GB)'
    Expression = {[decimal]('{0:N0}' -f($_.Size/1gb))}
}, @{
    Name       = 'Free space(GB)'
    Expression = {[decimal]('{0:N0}'-f($_.Freespace/1gb))}
}, @{
    Name       = 'Free (%)'
    Expression = {'{0,6:P0}' -f(($_.Freespace/1gb) / ($_.size/1gb))}
} -AutoSize

                                                                                                                        Up
                                                                                                                       Files

                                                                                  Как открыть файл с помощью PowerShell?
Invoke-Item -Path 'C:\scripts\file.txt'
.'C:\scripts\file.txt'

                                                                                    Как прочитать файл с помощью PowerShell?
Get-Content -Path 'C:\scripts\file.txt'
gc "C:\scripts\file.txt" # Alias

                                                                         Как перенаправить вывод в файл с помощью PowerShell?


'Line1', 'Line2', 'Line3' | Out-File -FilePath 'C:\scripts\file.txt' -Encoding ascii
'Line1', 'Line2', 'Line3' | Add-Content -Path file.txt
'Line1', 'Line2', 'Line3' > file.txt
Как узнать полное имя текущего файла скрипта с помощью PowerShell?
$MyInvocation.MyCommand.Path
                                                                как получить сведения от командлета и вывести в файл

 $a=get-childitem  администр|sort-object Length
 $a|Out-File -FilePath 'C:\Users\Irina\Desktop\а\ы\file1.txt'

                                                                          Как запаковать/zip файлы с помощью PowerShell?

### COMPRESS ONE FILE ###
 
# Powershell v5
Compress-Archive -Path $fileSource -DestinationPath $fileDestination
 
### COMPRESS ONE FOLDER ###
 
# Compress the folder 'R:\temp\zip\FolderToCompress' and created the file compressedFile.zip
Add-Type -AssemblyName 'System.IO.Compression.Filesystem'
[System.IO.Compression.ZipFile]::CreateFromDirectory($folderSource,$fileDestination)
 
# Powershell v5
Compress-Archive -Path $folderSource -DestinationPath $fileDestination

                                                                          Как распаковать/unzip файлы с помощью PowerShell?

### UNCOMPRESS ONE FILE ###
 
# Powershell v5
Expand-Archive -Path $fileSource -DestinationPath $folderDestination
 
### UNCOMPRESS ONE FOLDER ###
 
# Compress the folder 'R:\temp\zip\FolderToCompress' and created the file compressedFile.zip
Add-Type -AssemblyName 'System.IO.Compression.Filesystem'
[System.IO.Compression.ZipFile]::ExtractToDirectory($fileSource, $folderDestination)
Как посмотреть файлы, упакованные в ZIP архив, с помощью PowerShell?
Add-Type -AssemblyName 'System.IO.Compression.Filesystem'[System.IO.Compression.ZipFile]::OpenRead($fileZIP)

                                                         Как отобразить размер файла в КБ с помощью PowerShell?
(Get-ChildItem -Path .\winsrv.dll).Length /1KB
(Get-ChildItem -Path .\winsrv.dll).Length /1MB
(Get-ChildItem -Path .\winsrv.dll).Length /1GB

                                                       Как найти файлы больше или меньше 1 ГБ с помощью PowerShell?

# Larger than 1 GB
Get-ChildItem -Path C:\ -Recurse -ErrorVariable $errorsSearch | Where-Object -FilterScript {$_.Length -gt 1GB}
 
# Less than 1 GB
Get-ChildItem -Path C:\ -Recurse -ErrorVariable $errorsSearch | Where-Object -FilterScript {$_.Length -lt 1GB}

                                                        Как отобразить имя файла без расширения с помощью PowerShell?
[System.IO.Path]::GetFileNameWithoutExtension('C:\Windows\system32\calc.exe') # Return calc

                                                                         Как отобразить расширение файла с помощью PowerShell?
[System.IO.Path]::GetExtension('C:\scripts\file.txt') # Return .txt

                                                                                  Как узнать версию файла с помощью PowerShell?

(Get-Item -Path C:\Windows\System32\calc.exe).VersionInfo.FileVersion
[System.Diagnostics.FileVersionInfo]::GetVersionInfo('C:\Windows\system32\calc.exe').FileVersion

                                                                                     Как получить хэш файла с помощью PowerShell?
(Get-FileHash $file).Hash

                                                        Как узнать контрольную сумму MD5/SHA1 файла с помощью PowerShell?
Get-FileHash $file -Algorithm MD5
Get-FileHash $file -Algorithm SHA1

                                                                                  Как отобразить скрытые файлы с помощью PowerShell?

# Display only hidden files
Get-ChildItem -Hidden -File
 
# Display all files (including hidden files)
Get-ChildItem -Force -File

                                                                            Как проверить, имеет ли файл расширение, с помощью PowerShell?


[System.IO.Path]::HasExtension('C:\hiberfil.sys')

                                                                      Как установить свойство файла “Только чтение” с помощью PowerShell?
Set-ItemProperty -Path .\file.txt -Name IsReadOnly -Value $true

                                               Как изменить значение атрибута “Изменен” на “На прошлой неделе” с помощью PowerShell?
Set-ItemProperty -Path .\file.txt -Name LastWriteTime -Value ((Get-Date).AddDays(-7))
If not working, use Nirsoft tool: BulkFileChanger.

                                                                                              Как создать новый файл с помощью PowerShell?
New-Item -ItemType File -Path 'C:\scripts\file.txt' -Value 'FirstLine'

                                                                                          Как переименовать файл с помощью PowerShell?
Rename-Item -Path 'C:\scripts\file.txt' -NewName 'C:\scripts\powershellguru2.txt'

                                                  Как использовать пакетное переименование нескольких файлов с помощью PowerShell?
Get-ChildItem -Path C:\scripts\txt | Rename-Item -NewName { $_.Name -replace ' ', '_' }

                                                                        Как удалить файл с помощью PowerShell?
Remove-Item -Path 'C:\scripts\file.txt'

                                                              Как отобразить последние 10 строк файла с помощью PowerShell?
Get-Content -Path 'C:\scripts\log.txt' -Tail 10

                                                 Как разблокировать несколько файлов в папке с помощью PowerShell?
Get-ChildItem -Path 'C:\scripts\Modules' | Unblock-File

                                                                         Как удалить пустые строки из файла с помощью PowerShell?
(Get-Content -Path file.txt) | Where-Object -FilterScript {$_.Trim() -ne '' } | Set-Content -Path file.txt

                                                                            Как проверить, существует ли файл, с помощью PowerShell?


Test-Path -Path 'C:\Windows\notepad.exe' # Return True

                                                    Как найти последний/первый созданный в папке файл с помощью PowerShell?

Get-ChildItem | Sort-Object -Property CreationTime | Select-Object -Last 1 # Newest
Get-ChildItem | Sort-Object -Property CreationTime | Select-Object -First 1 # Oldest

                                                                           Как удалить одинаковые строки из файла с помощью PowerShell?

Get-Content -Path .\file.txt | Select-Object -Unique # Display
Get-Content -Path .\file.txt | Select-Object -Unique | Set-Content -Path .\testing.txt # Save

                                                Как найти файлы, созданные в папке более/менее 1 месяца назад, с помощью PowerShell?

$1MonthAgo = (Get-Date).AddMonths(-1)
Get-ChildItem | ?{$_.LastWriteTime -lt $1MonthAgo} | Select-Object LastWriteTime,Name,DirectoryName # More
Get-ChildItem | ?{$_.LastWriteTime -gt $1MonthAgo} | Select-Object LastWriteTime,Name,DirectoryName # Less

                                       Как найти файлы, созданные в папке более/менее 1 года назад, с помощью PowerShell?

$1YearAgo = (Get-Date).AddYears(-1)
Get-ChildItem | ?{$_.LastWriteTime -lt $1YearAgo} | Select-Object LastWriteTime,Name,DirectoryName # More
Get-ChildItem | ?{$_.LastWriteTime -gt $1YearAgo} | Select-Object LastWriteTime,Name,DirectoryName # Less

                                                              Как экспортировать значение переменной в файл с помощью PowerShell?
Set-Content -Path file.txt -Value $variable

                                                           Как подсчитать количество файлов (*.txt) в папке с помощью PowerShell?


[System.IO.Directory]::GetFiles('C:\scripts', '*.txt').Count
(Get-ChildItem -Path 'C:\scripts' -Filter *.txt).Count
(Get-ChildItem -Path 'C:\scripts' -Filter *.txt -Recurse).Count # Recursive

                                                                    Как найти строку внутри нескольких файлов с помощью PowerShell?
Select-String -Path 'C:\*.txt' -Pattern 'Irina'

                                                                    Как вывести первую/последнюю строку файла с помощью PowerShell?


'Line1', 'Line2', 'Line3' | Out-File -FilePath file.txt
 
# First Line
Get-Content -Path .\file.txt | Select-Object -First 1 # Returns Line1
(Get-Content -Path .\file.txt)[0] # Returns Line1
 
# Last Line
Get-Content -Path .\file.txt | Select-Object -Last 1 # Returns Line3
(Get-Content -Path .\file.txt)[-1] # Returns Line3

                                                                      Как отобразить заданную строку в файле с помощью PowerShell?


'Line1', 'Line2', 'Line3' | Out-File -FilePath file.txt
Get-Content -Path .\file.txt | Select-Object -Index 0 # Returns Line1
Get-Content -Path .\file.txt | Select-Object -Index 2 # Returns Line3
 
                                                                            Как подсчитать количество строк в файле с помощью PowerShell?


'Line1', 'Line2', 'Line3' | Out-File -FilePath file.txt
(Get-Content -Path .\file.txt | Measure-Object -Line).Lines # Returns 3
 
                                                     Как посчитать количество символов и слов в файле с помощью PowerShell?


'Irina', 'Renard', 'Irina Renard' | Out-File -FilePath file.txt
 
# Words (Return 4)
(Get-Content -Path .\file.txt | Measure-Object -Word).Words
 
# Characters (Return 23)
(Get-Content -Path .\file.txt | Measure-Object -Character).Characters
 
# Characters and ignore whitespaces (Return 22)
(Get-Content -Path .\file.txt | Measure-Object -Character -IgnoreWhiteSpace).Characters
 
                                                                             Как скачать файл с помощью PowerShell?
Invoke-WebRequest -Uri 'http://www.nirsoft.net/utils/searchmyfiles.zip' -OutFile 'C:\tools\searchmyfiles.zip'

                                                                         Как отобразить полный путь к файлу с помощью PowerShell?
Resolve-Path -Path .\script.ps1 # Return C:\Scripts\script.ps1

                                                                                                                                           Copy

                                                                                           Как скопировать один файл в папку с помощью PowerShell?
Copy-Item -Path 'C:\source\file.txt' -Destination 'C:\destination'

                                                                                       Как скопировать один файл сразу в несколько папок в PowerShell?

$destination = 'C:\destination\Folder1', 'C:\destination\Folder2'
$destination | Copy-Item -Path 'C:\source\file.txt' -Recurse -Destination {$_}

                                                                                                 Как скопировать несколько файлов в одну папку в PowerShell?
Get-ChildItem -Path 'C:\source' -Filter *.txt | Copy-Item -Destination 'C:\destination'

                                    Up, Active Directory, Domain & Forest,Computers, Groups, Organizational Unit (OU), Users, Domain & Forest

                                                         Как найти серверы глобального каталога в Active Directory с помощью PowerShell?
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs

                                                                                Как найти сайты в Active Directory с помощью PowerShell?
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites

                                                                          Как найти текущий контроллер домена с помощью PowerShell?


(Get-ADDomainController).HostName
 
# Solution_решение 1
$env:LOGONSERVER
 
# Solution_решение 2
[System.Environment]::GetEnvironmentVariable('logonserver')
 
# Solution_решение 3
nltest.exe /dsgetdc:domain.com

                                                                               Как найти все контроллеры в домене с помощью PowerShell?


# Solution_решение 1
(Get-ADDomainController -Filter *).Name
 
# Solution_решение 2
(Get-ADGroupMember 'Domain Controllers').Name
 
# Solution_решение 3
((Get-ADComputer -LDAPFilter '(&(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))')).Name
 
# Solution_решение 4
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).DomainControllers.Name

                                                                 Как найти неудачные AD репликации с помощью PowerShell?
Get-ADReplicationFailure dc02.domain.com # Windows 8 and 2012

                                              Как узнать время существования каталога в Active Directory с помощью PowerShell?

(Get-ADObject -Identity "cn=Directory Service,cn=Windows NT,cn=Services,$(([adsi]('LDAP://RootDSE')).configurationNamingContext)" -Properties tombstonelifetime).tombstonelifetime

                                      Как получить подробные сведения о лесе/домене в Active Directory с помощью PowerShell?


Get-ADDomain domain.com
Get-ADForest domain.com

                            Как посмотреть путь к контейнеру “Удаленные объекты” в Active Directory, с помощью PowerShell?
(Get-ADDomain).DeletedObjectsContainer

                                                        Как задействовать AD функцию корзины в Active Directory с помощью PowerShell?


Enable-ADOptionalFeature -Identity 'CN=Recycle Bin Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=domain,DC=com' -Scope ForestOrConfigurationSet -Target 'domain.com'

                                      Как восстановить AD аккаунт из корзины в Active Directory с помощью PowerShell?
Get-ADObject -Filter 'samaccountname -eq "powershellguru"' -IncludeDeletedObjects | Restore-ADObject

                                                                          Как найти роли FSMO с помощью PowerShell?


# Solution_решение 1
Get-ADForest | Format-List -Property SchemaMaster, DomainNamingMaster
Get-ADDomain | Format-List -Property PDCEmulator, RIDMaster, InfrastructureMaster
 
# Solution_решение 2
netdom query fsmo
 
# Solution_решение 3
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().SchemaRoleOwner
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().NamingRoleOwner
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().InfrastructureRoleOwner
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().RidRoleOwner


                                                            Как подключиться к определённому контроллеру домена с помощью PowerShell?
Get-ADUser -Identity $user -Server 'serverDC01'

                                                              Как получить текущий сервер подключения с помощью PowerShell?


($env:LOGONSERVER).Substring(2)
([System.Environment]::GetEnvironmentVariable('logonserver')).Substring(2)

                                                             Как выполнить “gpupdate” на компьютере с помощью PowerShell?
Invoke-GPUpdate -Computer $computer -Force -RandomDelayInMinutes 0 # Windows 2012


                                                                                                 Groups
                                                             Как создать новую группу в Active Directory с помощью PowerShell?


New-ADGroup -Name 'Powershell Guru' -SamAccountName powershellguru -GroupCategory Security -GroupScope Global -DisplayName 'Powershell Guru' -Path 'OU=MyOU,DC=domain,DC=com' -Description 'My account'

                                                              Как удалить группу в Active Directory с помощью PowerShell?
Remove-ADGroup -Identity 'PowershellGuru'

                                                   Как добавить пользователя в группу в Active Directory с помощью PowerShell?
Add-ADGroupMember "Powershell Guru" -Members powershellguru

                                                    Как удалить пользователя из группы в Active Directory с помощью PowerShell?
Remove-ADGroupMember 'Powershell Guru' -Members powershellguru

                                                  Как найти пустые группы (без участников) в Active Directory с помощью PowerShell?
Get-ADGroup -Filter * -Properties Members | Where-Object -FilterScript {-not $_.Members}

                                              Как посчитать пустые группы (без участников) в Active Directory с помощью PowerShell?
(Get-ADGroup -Filter * -Properties Members | Where-Object -FilterScript {-not $_.Members}).Count

                                                 Как узнать участников группы в Active Directory с помощью PowerShell?

# Solution_решение 1
(Get-ADGroupMember 'Powershell Guru').DistinguishedName
(Get-ADGroupMember 'Powershell Guru').Samaccountname
 
# Solution_решение 2
Get-ADGroup 'Powershell Guru' -Properties Members | Select-Object -Property Members -ExpandProperty Members | Sort-Object
 
# Solution_решение 3
function Get-ADGroupMemberFast
{
    [CmdletBinding()]
 
    Param
    (
        [Parameter(Mandatory = $true)]
        [string]$GroupName
    )
 
    $de = New-Object -TypeName System.DirectoryServices.DirectoryEntry
    $ds = New-Object -TypeName System.DirectoryServices.DirectorySearcher
    $ds.SearchRoot = $de
    $ds.Filter = "(cn=$group)"
    $null = $ds.PropertiesToLoad.Add('member')
    $result = $ds.FindOne()
 
    if($result)
    {
        $account = $result.GetDirectoryEntry()
        $account.Properties['member'] | ForEach-Object -Process {$_}
    }
}
 
Get-ADGroupMemberFast -GroupName 'Powershell Guru'

                                      Как узнать участников группы (в т.ч. и рекурсивных) в Active Directory с помощью PowerShell?


(Get-ADGroupMember 'Powershell Guru' -Recursive).DistinguishedName
(Get-ADGroupMember 'Powershell Guru' -Recursive).Samaccountname

                Как подсчитать количество членов группы с/без рекурсивных членов в Active Directory с помощью PowerShell?


(Get-ADGroupMember 'Powershell Guru' | Select-Object -ExpandProperty Samaccountname).Count
(Get-ADGroupMember 'Powershell Guru' -Recursive | Select-Object -ExpandProperty Samaccountname).Count

                                                                                                                 Users
                                                  Как использовать маски в фильтре “Get-ADUser” в Active Directory с помощью PowerShell?

# Filter
(Get-ADUser -SearchBase 'OU=myOU,DC=domain,DC=com' -Filter {name -like '*vip*'} -Properties Name).Name
 
# LDAPFilter
(Get-ADUser -SearchBase 'OU=myOU,DC=domain,DC=com' -LDAPFilter '(name=*vip*)' -Properties Name).Name
 
# With a variable
$user = '*vip*'
(Get-ADUser -SearchBase 'OU=myOU,DC=domain,DC=com' -Filter {name -like $user} -Properties Name).Name

                                       Как переместить пользователя в другую OU в Active Directory с помощью PowerShell?
Move-ADObject -Identity $dn -TargetPath 'OU=myOU,DC=domain,DC=com'

                                      Как найти весь MemberOf (включая вложения) для пользователя с помощью PowerShell?
Get-ADGroup -LDAPFilter "(member:1.2.840.113556.1.4.1941:=$($dn))"

                                    Как получить MemberOf (кратко/усеченно) для пользователя с помощью PowerShell?
(Get-ADUser -Identity $user -Properties MemberOf).MemberOf | ForEach-Object -Process {($_ -split ',')[0].Substring(3)} | Sort-Object

                                          Как изменить Name (FullName), (DisplayName), GivenName (FirstName) и Surname (LastName) для учётной записи пользователя в Active Directory с помощью PowerShell?


Set-ADUser $samAccountName -DisplayName 'DisplayName' -GivenName 'Irina' -Surname 'Renard' -DisplayName 'Irina Renard'
Rename-ADObject $dn -NewName 'Irina Renard' #FullName

Как изменить Description, Office и (Tele)phone number для учётной записи пользователя в Active Directory с помощью PowerShell?
Set-ADUser $samAccountName -Description 'IT Consultant' -Office 'Building B' -OfficePhone '12345'

                                              Как установить дату срока действия на “31.12.2016” или на “Никогда” для учётной записи пользователя в Active Directory, с помощью PowerShell?


# 31/12/2015
Set-ADAccountExpiration $samAccountName -DateTime '01/01/2017'
 
# Never
Clear-ADAccountExpiration $samAccountName

                            Как разблокировать учётную запись пользователя в Active Directory с помощью PowerShell?
Unlock-ADAccount $samAccountName

                     Как включить/отключить учётную запись пользователя в Active Directory с помощью PowerShell?


Disable-ADAccount $samAccountName
Enable-ADAccount $samAccountName

                            Как удалить учётную запись пользователя в Active Directory с помощью PowerShell?
Remove-ADUser $samAccountName

                  Как сбросить пароль для одной учётной записи пользователя в Active Directory с помощью PowerShell?


# Solution_решение 1 : ask password
$password = Read-Host -Prompt 'New Password' -AsSecureString
 
# Solution_решение 2 : specify password
$password = ConvertTo-SecureString -String 'Q>9xYMw<3?' -AsPlainText -Force
 
Get-ADUser -Filter "samaccountname -like 'helpdeskagent*'" | Set-ADAccountPassword -NewPassword $newpwd -Reset -PassThru | Set-ADuser -ChangePasswordAtLogon $true

             Как сбросить пароль для нескольких учётных записей пользователей в Active Directory с помощью PowerShell?

# Solution_решение 1 : ask password
$password = Read-Host -Prompt 'New Password' -AsSecureString
 
# Solution_решение 2 : specify password
$password = ConvertTo-SecureString -String 'Q>9xYMw<3?' -AsPlainText -Force
 
Get-ADUser -Filter "samaccountname -like 'helpdeskagent*'" | Set-ADAccountPassword -NewPassword $newpwd -Reset -PassThru | Set-ADuser -ChangePasswordAtLogon $true

                                        Как найти владельца файла в Active Directory с помощью PowerShell?


$user = New-Object -TypeName System.Security.Principal.NTAccount -ArgumentList (Get-Acl -Path 'userFile.txt').Owner
$sid = $user.Translate([System.Security.Principal.SecurityIdentifier]).Value
Get-ADUser $sid
                      
                                  Как найти OU (Organizational Unit) для пользователя в Active Directory с помощью PowerShell?
[regex]::match("$((Get-ADUser -Identity $user -Properties DistinguishedName).DistinguishedName)",'(?=OU=)(.*\n?)').value

                                      Как найти неактивные учётные записи пользователей в Active Directory с помощью PowerShell?

Search-ADAccount -AccountDisabled
Get-ADUser -Filter {Enabled -ne $true}

                                Как найти просроченые учётные записи пользователей в Active Directory с помощью PowerShell?
Search-ADAccount -AccountExpired

                  Как найти заблокированные учётные записи пользователей в Active Directory с помощью PowerShell?
Search-ADAccount -LockedOut

                                               Как найти SID учётной записи пользователя в Active Directory с помощью PowerShell?
(Get-ADUser -Identity $user -Properties SID).SID.Value

                                                   Как преобразовать имя пользователя в SID в Active Directory с помощью PowerShell?

$user = New-Object -TypeName System.Security.Principal.NTAccount -ArgumentList ('DOMAIN', 'user')
$SID = ($user.Translate([System.Security.Principal.SecurityIdentifier])).Value

                                                       Как преобразовать SID в имя пользователя в Active Directory с помощью PowerShell?


$SID = New-Object -TypeName System.Security.Principal.SecurityIdentifier -ArgumentList ('SID')
$user = ($SID.Translate( [System.Security.Principal.NTAccount])).Value

                                  Как разделить различающееся имя учётной записи пользователя с Active Directory с помощью PowerShell?


$dn = 'CN=RENARD Irina,OU=Irina,DC=domain,DC=com'
$dn.Split(',')[0] # Returns "CN=RENARD Irina"
$dn.Split(',')[0].Split('=')[1] # Returns "RENARD Irina"

                                         Как узнать дату создания/изменения учётной записи пользователя с Active Directory с помощью PowerShell?
Get-ADUser -Identity $user -Properties whenChanged, whenCreated | Format-List -Property whenChanged, whenCreated

                                      Как отобразить дополнительные и обязательные свойства для класса “User” в Active Directory с помощью PowerShell?

$schema = [DirectoryServices.ActiveDirectory.ActiveDirectorySchema]::GetCurrentSchema()
$schema.FindClass('user').mandatoryproperties | Format-Table
$schema.FindClass('user').optionalproperties | Format-Table

                             Как получить LDAP путь для пользователя в Active Directory с помощью PowerShell?

$searcher = New-Object -TypeName DirectoryServices.DirectorySearcher -ArgumentList ([ADSI]'')
$searcher.Filter = "(&(objectClass=user)(sAMAccountName= $user))"
$searcher = $searcher.FindOne()
$pathLDAP = $searcher.Path

                                                           Как изменить CN (Canonical Name) для пользователя в Active Directory с помощью PowerShell?

Rename-ADObject $((Get-ADUser -Identity $user -Properties DistinguishedName).DistinguishedName) -NewName 'Irina Renard'

              Как найти родительский элемент Organizational unit (OU) пользователя в Active Directory с помощью PowerShell?


$dn = (Get-ADUser -Identity $user -Properties DistinguishedName).DistinguishedName
$parent = $dn.Split(',',2)[1]

                                    Как посмотреть владельца учётной записи в Active Directory с помощью PowerShell?

$dn = (Get-ADUser -Identity $user -Properties DistinguishedName).DistinguishedName
$owner = (Get-Acl -Path "AD:$dn").Owner

                             Как конвертировать атрибут PwdLastSet для пользователя в Active Directory с помощью PowerShell?


# Solution_решение 1
[DateTime]::FromFileTime((Get-ADUser -Identity $user -Properties pwdLastSet).pwdLastSet)
 
# Solution_решение 2
w32tm /ntte 130787549514737594

                                                                                                           Computers
                       Как протестировать безопасный канал между локальным компьютером и доменом с помощью PowerShell?
Test-ComputerSecureChannel

                        Как восстановить безопасный канал между локальным компьютером и доменом с помощью PowerShell?
Test-ComputerSecureChannel -Repair

                          Как отключить учётную запись компьютера в Active Directory с помощью PowerShell?
Disable-ADAccount $computer

                      Как найти компьютеры с определённой операционной системой в Active Directory с помощью PowerShell?


Get-ADComputer -Filter 'OperatingSystem -eq "CentOS"'
Get-ADComputer -Filter 'OperatingSystem -eq "GNU/Linux"'
Get-ADComputer -Filter 'OperatingSystem -eq "Linux"'
Get-ADComputer -Filter 'OperatingSystem -eq "Mac OS X"'
Get-ADComputer -Filter 'OperatingSystem -eq "OnTap"'
Get-ADComputer -Filter 'OperatingSystem -eq "Red Hat Enterprise Linux Server"'
Get-ADComputer -Filter 'OperatingSystem -eq "redhat-linux-gnu"'
Get-ADComputer -Filter 'OperatingSystem -eq "Samba"'
Get-ADComputer -Filter 'OperatingSystem -eq "Ubuntu"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows NT"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows 2000 Professional"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows 2000 Server"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows XP Professional"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Server 2003"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Vista™ Business"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Vista™ Enterprise"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Vista™ Entreprise"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows 7 Enterprise"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows 7 Professional"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows 7 Ultimate"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Server 2008 R2 Enterprise"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Server 2008 R2 Standard"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Server® 2008 Enterprise"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows 8 Enterprise"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows 8.1 Enterprise"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Server 2012 R2 Standard"'
Get-ADComputer -Filter 'OperatingSystem -eq "Windows Server 2012 Standard"'

                                                                                                    Organizational Unit (OU)
                                                       Как создать Organizational Unit (OU) в Active Directory с помощью PowerShell?
New-ADOrganizationalUnit -Name 'Irina' -Path 'DC=domain,DC=com'

                               Как получить информацию об Organizational Unit (OU) в Active Directory с помощью PowerShell?
Get-ADOrganizationalUnit 'OU=Irina,DC=domain,DC=com' -Properties *

                                   Как изменить описание Organizational Unit (OU) в Active Directory с помощью PowerShell?
Set-ADOrganizationalUnit 'OU=Irina,DC=domain,DC=com' -Description 'My description'

                                Как включить/отключить защиту Organizational Unit (OU) от случайного удаления в Active Directory, 
                                с помощью PowerShell?


# Protection ON
Set-ADOrganizationalUnit 'OU=Irina,DC=domain,DC=com' -ProtectedFromAccidentalDeletion $true
 
# Protection OFF
Set-ADOrganizationalUnit 'OU=Irina,DC=domain,DC=com' -ProtectedFromAccidentalDeletion $false

                                                Как разрешить случайное удаление для всех 
                                                Organizational Unit (OU) в Active Directory, с помощью PowerShell?

Get-ADOrganizationalUnit -Filter * -Property ProtectedFromAccidentalDeletion | Where-Object -FilterScript { $_.ProtectedFromAccidentalDeletion -eq $false } | Set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $true

                                                   Как удалить Organizational Unit (OU), защищенный от случайного удаления,
                                                   в Active Directory с помощью PowerShell?

Set-ADOrganizationalUnit 'OU=Irina,DC=domain,DC=com' -ProtectedFromAccidentalDeletion $false
Remove-ADOrganizationalUnit 'OU=Irina,DC=domain,DC=com'
       
        Как преобразовать DistinguishedName Organizational Unit (OU) в CanonicalName в Active Directory с помощью PowerShell?

$parent = $dn.Split(',',2)[1]
$parent = (Get-ADOrganizationalUnit $parent -Properties CanonicalName).CanonicalName

                                                            Как перечислить пустые Organizational Unit (OU) с помощью PowerShell?

# Solution_решение 1
Get-ADOrganizationalUnit -Filter * -Property 'msDS-Approx-Immed-Subordinates' | Where-Object -FilterScript {$_.'msDS-Approx-Immed-Subordinates' -eq 0}
 
# Solution_решение 2
([adsisearcher]'(objectclass=organizationalunit)').FindAll() | Where-Object -FilterScript { (([adsi]$_.Path).PSbase.Children | Measure-Object).Count -eq 0 }

                                                                          Как узнать менеджера группы с помощью PowerShell?
(Get-ADGroup $dn -Properties Managedby).Managedby

                                                         Up, Regex (Regular Expression)

                               Как извлечь IP-адрес v4 (80.80.228.8) с помощью Regex, используя PowerShell?
$example = 'The IP address is 192.168.0.100 '
$ip = [regex]::match($example,'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b').value

                       Как извлечь MAC-адрес (C0-D9-62-39-61-2D) с разделителем “-” с помощью Regex, используя PowerShell?
$example = 'The MAC address is C0-D9-62-39-61-2D'
$mac = [regex]::match($example,'([0-9A-F]{2}[-]){5}([0-9A-F]{2})').value

                   Как извлечь MAC-адрес (C0:D9:62:39:61:2D) с разделителем “:” с помощью Regex, используя PowerShell?
$example = 'The MAC address is C0:D9:62:39:61:2D'
$mac = [regex]::match($example,'((\d|([a-f]|[A-F])){2}:){5}(\d|([a-f]|[A-F])){2}').value

                                           Как извлечь дату (10/02/2015) с помощью Regex, используя PowerShell?
$example = 'The date is 10/02/2015'
$date = [regex]::match($example,'(\d{2}\/\d{2}\/\d{4})').value

                                Как извлечь URL-адрес (www.powershell-guru.com) с помощью Regex, используя PowerShell?
$example = 'The URL is www.powershell-guru.com'
$url = [regex]::match($example,'[a-z]+[:.].*?(?=\s)').value

                           Как извлечь адрес электронной почты (user@domain.com) с помощью Regex, используя PowerShell?
$example = 'The email is user@domain.com'
$email = [regex]::match($example,'(?i)\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b').value

                                             Как извлечь “guru” из строки примера с помощью Regex, используя PowerShell?
$example = 'www.powershell-guru.com'
[regex]::match($example,'(?<=-)(.*\n?)(?=.com)').value

                                                 Как извлечь “guru.com” из строки примера с помощью Regex, используя PowerShell?
$example = 'www.powershell-guru.com'
[regex]::match($example,'(?<=-)(.*\n?)(?<=.)').value

                           Как извлечь “powershell-guru.com” из строки примера с помощью Regex, используя PowerShell?
$example = 'www.powershell-guru.com'
[regex]::match($example,'(?<=www.)(.*\n?)').value

                                         Как извлечь “123” из строки примера с помощью Regex, используя PowerShell?
$example = 'Powershell123'
[regex]::match($example,'(\d+)').value

                                         Как извлечь “$” (знак доллара) из строки примера с помощью Regex, используя PowerShell?
$example = 'Powershell`$123'
[regex]::match($example,'(\$)').value

                                        Как заменить символ (*.com) другим (*.fr) в строке с помощью Regex, используя PowerShell?
$example = 'www.powershell-guru.com'
[regex]::Replace($example, '.com','.fr')

                                                           Как экранировать строку с помощью Regex, используя PowerShell?
[regex]::Escape('\\server\share')

                                                                                          Up, Memory
                                       Как форсировать уборку мусора сборщиком мусора с помощью PowerShell?
[System.GC]::Collect()
[System.GC]::WaitForPendingFinalizers()

                                      Как узнать количество оперативной памяти компьютера с помощью PowerShell?


# Solution_решение 1
Get-CimInstance -ClassName 'cim_physicalmemory' | ForEach-Object -Process {$_.Capacity /1GB}
 
# Solution_решение 2
(Get-WmiObject -Class Win32_ComputerSystem).TotalPhysicalMemory /1GB
 
# Solution_решение 3
(systeminfo.exe | Select-String -Pattern 'Total Physical Memory:').ToString().Split(':')[1].Trim()

                                                     Up, Date
                                                Как узнать текущую дату с помощью PowerShell?
Get-Date
[Datetime]::Now

                                      Как отобразить дату в различных форматах с помощью PowerShell?

### DATETIME ###
Get-Date -Format D             : Tuesday, June 30, 2015
Get-Date -Format f             : Tuesday, June 30, 2015 3:22 PM
Get-Date -Format F             : Tuesday, June 30, 2015 3:22:58 PM
Get-Date -Format g             : 6/30/2015 3:23 PM 
Get-Date -Format G             : 6/30/2015 3:23:30 PM

Get-Date -DisplayHint Date     : Tuesday, June 30, 2015
Get-Date -DisplayHint DateTime : Tuesday, June 30, 2015 3:31:21 PM

### DATE ###

Get-Date -Format d             : 6/30/2015                                                                                                                                                                     
Get-Date -Format yyyyMMdd      : 20150630

Get-Date -UFormat '%d%m%Y'     : 30062015
Get-Date -UFormat '%m%d%Y'     : 06302015
Get-Date -UFormat '%Y%m%d'     : 20150630

Get-Date -UFormat '%d.%m.%Y'   : 30.06.2015
Get-Date -UFormat '%m.%d.%Y'   : 06.30.2015
Get-Date -UFormat '%Y.%m.%d'   : 2015.06.30

Get-Date -UFormat '%d-%m-%Y'   : 30-06-2015
Get-Date -UFormat '%m-%d-%Y'   : 06-30-2015
Get-Date -UFormat '%Y-%m-%d'   : 2015-06-30

Get-Date -UFormat '%d/%m/%Y'   : 30/06/2015
Get-Date -UFormat '%m/%d/%Y'   : 06/30/2015
Get-Date -UFormat '%Y/%m/%d'   : 2015/06/30

### HOUR ###
Get-Date -Format t             : 3:23 PM                                                                                                                                                                          
Get-Date -Format T             : 3:23:30 PM 
Get-Date -Format HH            : 15 (Hour)
Get-Date -Format mm            : 28 (Minute)
Get-Date -Format ss            : 30 (Seconds)
Get-Date -DisplayHint Time     : 3:23:30 PM

### DAY ###
Get-Date -Format dddd          : Tuesday
Get-Date -Format ddd           : Tue
Get-Date -Format dd            : 30

### MONTH ###
Get-Date -Format MMMM          : June
Get-Date -Format MMM           : Jun
Get-Date -Format MM            : 06

### YEAR ###
Get-Date -Format yyyy          : 2015

                                                  Как преобразовать дату (DateTime) в дату (String) с помощью PowerShell?

# Solution_решение 1
$datetimeToString = '{0:MM/dd/yy}' -f (Get-Date '07/15/2015')
 
# Solution_решение 2
$datetimeToString = (Get-Date '07/15/2015').ToShortDateString()
 
# Check
 
$datetimeToString
07/15/15
 
$datetimeToString.GetType().Name
String

                                                  Как преобразовать дату (String) в дату (DateTime) с помощью PowerShell?


# Solution_решение 1
$stringToDatetime = '07/15/2015' | Get-Date
$stringToDatetime = '07-15-2015' | Get-Date
 
# Solution_решение 2
[Datetime]::ParseExact('07/15/2015', 'MM/dd/yyyy', $null)
 
# Solution_решение 3
$stringToDatetime = [Datetime]'7/15/2015'
 
# Check
 
$stringToDatetime
Wednesday, July 15, 2015 12:00:00 AM
 
$stringToDatetime.GetType().Name
Datetime

                     Как рассчитать разницу (количество дней, часов, минут или секунд) между двумя датами с помощью PowerShell?
(New-TimeSpan -Start $dateStart -End $dateEnd).Days
(New-TimeSpan -Start $dateStart -End $dateEnd).Hours
(New-TimeSpan -Start $dateStart -End $dateEnd).Minutes
(New-TimeSpan -Start $dateStart -End $dateEnd).Seconds

                                                                         Как сравнить две даты с помощью PowerShell?
(Get-Date 2015-01-01) -lt (Get-Date 2015-01-30) # True
(Get-Date 2015-01-01) -gt (Get-Date 2015-01-30) # False

                                                    Как отсортировать массив дат в формате DateTime с помощью PowerShell?
$arrayDate | Sort-Object -Property {$_ -as [Datetime]}

                                                           Как запустить и остановить секундомер с помощью PowerShell?
$chrono = [Diagnostics.Stopwatch]::StartNew()
$chrono.Stop()
$chrono

                                                              Как узнать текущий день недели с помощью PowerShell?
(Get-Date).DayOfWeek #Sunday

                                                                      Как узнать вчерашнюю дату с помощью PowerShell?
(Get-Date).AddDays(-1)

                                                    Как узнать количество дней в месяце (в феврале 2015 г.) с помощью PowerShell?
[DateTime]::DaysInMonth(2015, 2)

                                                                    Как узнать високосный ли год с помощью PowerShell?
[DateTime]::IsLeapYear(2016)

                                                             Как перечислить часовые пояса с помощью PowerShell?
[System.TimeZoneInfo]::GetSystemTimeZones()

                                                                                                Up, Networking

                    Как закодировать и декодировать URL (в формате ASCII) с помощью PowerShell?


# Encode
$url = 'http://www.powershell-guru.com'
$encoded = [System.Web.HttpUtility]::UrlEncode($url)
 
# Decode
$decoded = [System.Web.HttpUtility]::UrlDecode($encoded) 
 
# Encoded : http%3a%2f%2fwww.powershell-guru.com
# Decoded : http://www.powershell-guru.com

                                                    Какие эквиваленты родным сетевым командам в PowerShell?


# ipconfig
Get-NetIPConfiguration
Get-NetIPAddress
 
# ping 
Test-NetConnection 
 
# tracert
Test-NetConnection -TraceRoute
 
# route
Get-NetRoute
 
# nslookup
Resolve-DnsName # Windows 8.1 & Windows 2012
([System.Net.Dns]::GetHostEntry($IP)).Hostname # IP > PC
([System.Net.Dns]::GetHostAddresses($computer)).IPAddressToString # PC > IP     //локальный комп

                                                                         Как получить IP-адреса с помощью PowerShell?

Get-NetIPAddress                                    # Windows 8.1 & Windows 2012
Get-NetIPConfiguration                        # Windows 8.1 & Windows 2012
([System.Net.Dns]::GetHostAddresses($computer)).IPAddressToString  //2,0-5,0

                                                                                    Как отключить IP адрес V6 (IPv6) с помощью PowerShell?
New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters' -Name 'DisabledComponents' -Value '0xFFFFFFFF' -PropertyType"DWORD"                                                        # Reboot required

                                                                  Как проверить валидность IP-адреса v4 (IPv4) с помощью PowerShell?
if([ipaddress]'10.0.0.1'){'validated'}
if([ipaddress]'192.168.56.1'){'validated'}

                                                                              Как найти внешний IP-адрес с помощью PowerShell?


# Solution_решение 1
(Invoke-WebRequest -Uri 'myexternalip.com/raw').Content
(iwr -Uri 'myexternalip.com/raw').Content # Alias
 
# Solution_решение 2
$webClient = New-Object -TypeName System.Net.WebClient
$webClient.DownloadString('http://myexternalip.com/raw')
 
# Solution_решение 3
while ($true)
{
    Write-Output -InputObject "$(Get-Date) - $((Invoke-WebRequest -Uri 'http://myexternalip.com/raw' -Method Get).Content)"
    Start-Sleep -Seconds 300
}
                                                                      Как узнать имя хоста по IP-адресу с помощью PowerShell?
([System.Net.Dns]::GetHostEntry($IP)).Hostname

                                                                        Как найти IP-адрес по имени хоста с помощью PowerShell?
([System.Net.Dns]::GetHostAddresses($computer)).IPAddressToString

                                                             Как узнать полное доменное имя из имени хоста с помощью PowerShell?
[System.Net.Dns]::GetHostByName($computer).HostName

                                                           Как узнать конфигурацию сети (IP, подсети, шлюз и DNS) с помощью PowerShell?


Get-WmiObject -Class Win32_NetworkAdapterConfiguration | Format-Table -Property Description, IpAddress, IPSubnet, DefaultIPGateway, DNSServerSearchOrder
                                                                                
                                                                        Как узнать MAC адрес с помощью PowerShell?

Get-CimInstance win32_networkadapterconfiguration | Select-Object -Property Description, Macaddress
Get-WmiObject -Class win32_networkadapterconfiguration | Select-Object -Property Description, Macaddress

                                                                    Как проверить связь с компьютером с помощью PowerShell?

# Solution_решение 1
Test-Connection -ComputerName $computer -Quiet # Returns True / False
 
# Solution_решение 2
$ping = New-Object -TypeName System.Net.Networkinformation.Ping
$ping.Send($computer)
                                                 Как проверить, подключен ли компьютер к интернету, с помощью PowerShell?


[Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]'{DCB00C01-570F-4A9B-8D69-199FDBA5723B}')).IsConnectedToInternet

                                                          Как узнать, кому принадлежит сайт, с помощью PowerShell?

$whois = New-WebServiceProxy 'http://www.webservicex.net/whois.asmx?WSDL'
$whois.GetWhoIs('powershell-guru.com')

                                             Как получить информацию о публичном IP адресе (Геолокация) с помощью PowerShell?


$externalIP = (Invoke-WebRequest -Uri 'myexternalip.com/raw').Content
$detailsIP = ([xml](Invoke-WebRequest -Uri "http://freegeoip.net/xml/$externalIP" -UseBasicParsing).Content).Response
                                           
                                          Как проверить, открыт/закрыт ли порт, с помощью PowerShell?
New-Object -TypeName Net.Sockets.TcpClient -ArgumentList $computer, 135

                                       Как выполнить команду “tracert” с помощью PowerShell?
Test-NetConnection www.google.com -TraceRoute

                                     Как исправить профиль подключения домашней сети с помощью PowerShell?
Get-NetAdapter | Format-Table -Property Name, InterfaceDescription, ifIndex -AutoSize # Windows 8.1
Set-NetConnectionProfile -InterfaceIndex 6 -NetworkCategory Private

                                            Как посмотреть соединения по TCP портам с помощью PowerShell?
netstat.exe -ano
Get-NetTCPConnection #Windows 8 and 2012

                                                             Как укоротить длинный URL с помощью PowerShell?
$url = 'www.powershell-guru.com'
$tiny = Invoke-RestMethod -Uri "http://tinyurl.com/api-create.php?url=$url"

                                                    Как узнать настройки прокси-сервера с помощью PowerShell?
Get-ItemProperty -Path HKCU:"Software\Microsoft\Windows\CurrentVersion\Internet Settings"

                                                                                                                     DNS

                                             Как проверить кэш DNS на локальном компьютере с помощью PowerShell?
ipconfig.exe /displaydns
Get-DnsClientCache                                               #Windows 8 and 2012

                                               Как очистить кэш DNS на локальном компьютере с помощью PowerShell?
ipconfig.exe /flushdns
Start-Process -FilePath ipconfig -ArgumentList /flushdns -WindowStyle Hidden
Clear-DnsClientCache #Windows 8 and 2012

                                                      Как очистить кэш DNS на удалённых компьютерах с помощью PowerShell?
Invoke-Command -ScriptBlock {Clear-DnsClientCache} -ComputerName computer01, computer02

                                                         Как прочитать файл “hosts” с помощью PowerShell?
Get-Content -Path 'C:\Windows\system32\drivers\etc\hosts'

                                                                  Up, Password

                                                  
                                                        Как создать случайный пароль с помощью PowerShell?

[Reflection.Assembly]::LoadWithPartialName('System.Web')
[System.Web.Security.Membership]::GeneratePassword(30,2)

                         Как изменить локальный пароль администратора на удалённом сервере с помощью PowerShell?
$admin = [ADSI]('WinNT://server01/administrator,user')
$admin.SetPassword($password)
$admin.SetInfo()

                           Как узнать срок действия пароля учётной записи в Active Directory с помощью PowerShell?

# Solution_решение 1
[DateTime]::FromFileTime((Get-ADUser -Identity $user -Properties 'msDS-UserPasswordExpiryTimeComputed').'msDS-UserPasswordExpiryTimeComputed')
 
# Solution_решение 2
Get-Date -Date ((Get-ADUser -Identity $user -Properties 'msDS-UserPasswordExpiryTimeComputed' | Select-Object -Property @{
            Name       = 'ExpiryDate'
            Expression = {[DateTime]::FromFileTime($_.'msDS-UserPasswordExpiryTimeComputed')}
}).ExpiryDate)-Format 'F'

                                                                      Up, Printers

                                                          Как посмотреть список принтеров для конкретного сервера с помощью PowerShell?
Get-WmiObject -Query 'Select * From Win32_Printer' -ComputerName $computer

                                                         Как перечислить все порты для конкретного сервера с помощью PowerShell?
Get-WmiObject -Class Win32_TCPIPPrinterPort -Namespace 'root\CIMV2' -ComputerName $computer

                                                          Как изменить комментарий/расположение принтера с помощью PowerShell?

$printer = Get-WmiObject -Class win32_printer -Filter "Name='HP Deskjet 1050 J410 series'"
$printer.Location = 'Germany - Trier'
$printer.Comment = 'Printer - Irina'
$printer.Put()
                                                              Как очистить очередь печати принтера с помощью PowerShell?

$printer = Get-WmiObject -Class win32_printer -Filter "Name='HP Deskjet 1050 J410 series'"
$printer.CancelAllJobs()

                                                  Как напечатать тестовую страницу на принтере с помощью PowerShell?
$printer = Get-WmiObject -Class win32_printer -Filter "Name='HP Deskjet 1050 J410 series'"
$printer.PrintTestPage()

                                                   Как посмотреть очереди печати для принтеров с помощью PowerShell?


Get-WmiObject -Class Win32_PerfFormattedData_Spooler_PrintQueue | Select-Object -Property Name, @{
    Expression = {$_.jobs}
    Label      = 'Current Jobs'
} | Format-Table -AutoSize

                                                                  Up, Regedit, Read

                                                         Как посмотреть список файлов реестра с помощью PowerShell?
Get-ChildItem -Path Registry::

                                                      Как получить значения реестра и типы этих значений с помощью PowerShell?

function Get-RegistryValue
{
    Param
    (
        [Parameter(Mandatory = $true)]
        [string]$RegistryKey
    )
 
    $key = Get-Item -Path "Registry::$RegistryKey"
    $key.GetValueNames() | Sort-Object | ForEach-Object -Process {
 
        $name = $_
        $type = $key.GetValueKind($name)
 
        switch ($type) 
        { 
            'String'      {'REG_SZ'} 
            'Binary'      {'REG_BINARY'} 
            'Dword'       {'REG_DWORD'}
            'Qword'       {'REG_QWORD'}
            'MultiString' {'REG_MULTI_SZ'}
            'ExpandString'{'REG_EXPAND_SZ'}
            Default       {$null}
        }
 
        [PSCustomObject]@{
            Name = $name
            Type = $type
            Data = $key.GetValue($name)
        }
 
    }
}
                                                                       Как посмотреть подразделы ключей реестра с помощью PowerShell?

#HKEY_CLASSES_ROOT
New-PSDrive -PSProvider Registry -Root HKEY_CLASSES_ROOT -Name HKCR
Get-ChildItem -Path 'HKCR:\'
 
#HKEY_CURRENT_USER
Get-ChildItem -Path 'HKCU:\Software'
Get-ChildItem -Path Registry::HKEY_CURRENT_USER
 
#HKEY_LOCAL_MACHINE
Get-ChildItem -Path 'HKLM:\SYSTEM'
Get-ChildItem -Path Registry::HKEY_LOCAL_MACHINE
 
#HKEY_USERS
New-PSDrive -PSProvider Registry -Root HKEY_USERS -Name HKU
Get-ChildItem -Path 'HKU:\'
 
#HKEY_CURRENT_CONFIG
New-PSDrive -PSProvider Registry -Root HKEY_CURRENT_CONFIG -Name HKCC
Get-ChildItem -Path 'HKCC:\'
                                  
                                       Как посмотреть подразделы ключей реестра, используя рекурсивный метод, с помощью PowerShell?
Get-ChildItem -Path 'HKLM:\SYSTEM' -Recurse -ErrorAction SilentlyContinue

                                        Как найти подразделы с определённым именем с помощью PowerShell?
Get-ChildItem -Path 'HKLM:\SOFTWARE' -Include *Plugin* -Recurse -ErrorAction SilentlyContinue

                                         Как вернуть только имя подразделов реестра с помощью PowerShell?
(Get-ChildItem -Path 'HKLM:\SYSTEM').Name # Return HKEY_LOCAL_MACHINE\SYSTEM\ControlSet
Get-ChildItem -Path 'HKLM:\SYSTEM' -Name # Return ControlSet

                                         Как перечислить значения реестра с помощью PowerShell?
Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion'

                                        Как прочитать определённое значение реестра с помощью PowerShell?
(Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').ProductName

                                  Как прочитать определённое значение реестра на удалённом компьютере с помощью PowerShell?

$hostname = $computer
$openRegedit = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $hostname)
$openKey = $openRegedit.OpenSubKey('SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion')
$keyValue = $openKey.GetValue('ProductName')
$keyValue
Write

                                         Как создать новый раздел реестра с помощью PowerShell?
New-Item -Path 'HKCU:\Software\MyApplication'

                                         Как создать значение реестра с помощью PowerShell?
New-ItemProperty -Path 'HKCU:\Software\MyApplication' -Name 'Version' -Value '1.0'

                                      Как изменить существующее значение реестра с помощью PowerShell?
Set-ItemProperty -Path 'HKCU:\Software\MyApplication' -Name 'Version' -Value '2.0'

                                                                      Delete

                                                  Как удалить значения реестра с помощью PowerShell?
Remove-ItemProperty -Path 'HKCU:\Software\MyApplication' -Name 'Version'

                                                    Как удалить ключ реестра с помощью PowerShell?
Remove-Item -Path 'HKCU:\Software\MyApplication' -Force

                                                                                     Test

                              Как проверить, существует ли раздел реестра, с помощью PowerShell?
Test-Path -Path 'HKCU:\Software\MyApplication'

                                     Как проверить, содержит ли реестр значение, используя PowerShell?
(Get-Item -Path 'HKCU:\Software\MyApplication').GetValueNames() -contains 'Version'

                                                                                         Up,Strings

                                                        Как удалить пробелы из начала строки с помощью PowerShell?
$string = ' PowershellGuru'
$string = $string.TrimStart()

                                             Как удалить пробелы в конце строки с помощью PowerShell?
$string = 'PowershellGuru '
$string = $string.TrimEnd()

                                         Как удалить пробелы в начале и в конце строки с помощью PowerShell?
$string = ' PowershellGuru '
$string = $string.Trim()

                               Как преобразовать символы в строке в символы верхнего регистра с помощью PowerShell?
$string = 'powershellguru'
$string = $string.ToUpper()

                                 Как преобразовать символы в строке в символы нижнего регистра с помощью PowerShell?
$string = 'POWERSHELLGURU'
$string = $string.ToLower()

                                       Как выбрать подстроку “Powershell” из строки “PowershellGuru” с помощью PowerShell?
$string.Substring(0,10)

                                       Как выбрать подстроку “Guru” из строки “PowershellGuru” с помощью PowerShell?
$string.Substring(10)

                                      Как выбрать номер “123” из “Powershell123Guru” с помощью PowerShell?
$string = 'Powershell123Guru'
[regex]::match($string,'(\d+)').value

                                     Как получить индекс подстроки “Guru” в строке “PowershellGuru” с помощью PowerShell?
$string.IndexOf('Guru') # 10

                                    Как узнать является ли строка пустой с помощью PowerShell?
$string = $null
$string = ''
[string]::IsNullOrEmpty($string)

                             Как узнать, является ли строка пустой, либо состоящей лишь из пробелов, с помощью PowerShell?
$string = $null
$string = ''
$string = ' '
[string]::IsNullOrWhiteSpace($string)

                             Как проверить, содержит ли строка определённые символы, с помощью PowerShell?
$string = 'PowershellGuru'
$string.Contains('s')
[regex]::match($string,'s').Success

                            Как узнать длину строки с помощью PowerShell?
$string.Length

                           Как объединить две строки с помощью PowerShell?


# Solution_решение 1
$string1 + $string2
 
# Solution_решение 2
$string1 = 'Powershell'
$string2 = 'Guru'
[string]::Concat($string1,$string2)

                                          Как проверить наличие одной или нескольких скобок “[ ]” в строке с помощью PowerShell?
$string = '[PowershellGuru]'
$string -match '\[' # Only 1
$string -match '\[(.*)\]' # Several

                         Как проверить наличие одной или нескольких круглых скобок “( )” в строке с помощью PowerShell?
$string = '(PowershellGuru)'
$string -match '\(' # Only 1
$string -match '\((.*)\)' # Several

                          Как проверить наличие одной или нескольких фигурных скобок “{ }” в строке с помощью PowerShell?
$string = '{PowershellGuru}'
$string -match '\{' # Only 1
$string -match '\{(.*)\}' # Several

                             Как проверить наличие одной или нескольких скобок “< >” в строке с помощью PowerShell?
$string = ''
$string -match '\<' # Only 1
$string -match "\<(.*)\>" # Several

                                                  Как проверить наличие строчных букв (abc) в строке с помощью PowerShell?
$string = 'POWERSHELLGURU'
$string -cmatch "^[a-z]*$" #False

                                             Как проверить наличие прописных букв (ABC) в строке с помощью PowerShell?
$string = 'powershellguru'
$string -cmatch "^[A-Z]*$" #False

                                        Как проверить наличие “[p” (p строчная) в строке с помощью PowerShell?
$string = '[powershellGuru]'
$string -cmatch '\[[a-z]\w+' #True

                                      Как проверить наличие “[P” (P прописная) в строке с помощью PowerShell?
$string = '[PowershellGuru]'
$string -cmatch '\[[A-Z]\w+' #True

                                                    Как заменить одну строку другой с помощью PowerShell?
$a = 'Line A'
$b = 'Line B'
$a = $a -replace $a, $b

                                    Как преобразовать операцию деления в строку (в процентах) с помощью PowerShell?
(1/2).ToString('P')

                                           Как сортировать строки, содержащие цифры, с помощью PowerShell?


'string-10', 'string-2', 'string-23', 'string-30' | Sort-Object -Property {$_ -replace '[\d]'}, {$_ -replace '[a-zA-Z\p{P}]'-as [int]}

                                     Как выбрать последнее слово в предложении с помощью PowerShell?
$sentence = 'My name is Irina Renard'
$sentence.Split(' ')[-1] # Returns Renard

                          Как выбрать самое длинное слово в предложении с помощью PowerShell?
$sentence = 'My name is Irina Renard'
$sentence.Split(' ') | Sort-Object -Property Length | Select-Object -Last 1 # Returns Renard

                     Как подсчитать, сколько раз строка встречается в предложении, с помощью Powershell?
$sentence = 'Irina Irina Irina renard'
[regex]::Matches($sentence, 'Irina').Count # Returns 3

                                Как скопировать каждый символ в строке в массив символов с помощью PowerShell?

PowerShell

$name = 'Irina'
$name.ToCharArray()
i
r
i
n
a

                                             Как преобразовать первую букву строки в прописную с помощью PowerShell?

$name = 'Irina'
$name.Substring(0,1).ToUpper() + $name.Substring(1)
                                         
                                            Как добавить в строку (слева или справа) с помощью Powershell?


# With whitespaces
$padRight = 'Irina'.PadRight(25)
$padLeft  = 'Irina'.PadLeft(25)
 
# With characters
$padRight = 'Irina'.PadRight(25,'.') # Return Irina....................
$padLeft  = 'Irina'.PadLeft(25,'.')  # Return ....................Irina

                                               Как закодировать и декодировать строку в Base64 с помощью Powershell?


# Encode
$string = [System.Text.Encoding]::UTF8.GetBytes('Irina')
$encoded = [System.Convert]::ToBase64String($string)
 
# Decode
$string  = [System.Convert]::FromBase64String($encoded)
$decoded = [System.Text.Encoding]::UTF8.GetString($string)
 
# Encoded : c3RldmU=
# Decoded : Irina
                  
                             Как преобразовать число в двоичную систему исчисления и наоборот с помощью PowerShell?


# Base 10 to Base 2
[System.Convert]::ToString(255,2)
 
# Base 2 to Base 10
[System.Convert]::ToInt32('11111111',2)
                               Как преобразовать число в шестнадцатеричную систему исчисления и наоборот с помощью PowerShell?
# Base 10 to Base 16      (число в десятичной,в какую систему переводить-16)
PS C:\Windows\system32> [System.Convert]::ToString(425,16)
1a9
# Base 16 to Base 10 ('число в шестнадцатеричной', в какую систему переводить-10)
PS C:\Windows\system32> [System.Convert]::ToInt32('1a9',16)
425

                                                          Как вернуть имя только последней папки пути с помощью PowerShell?


$path = 'C:\Folder1\Folder2\Folder3\file.txt'
Split-Path -Path (Split-Path -Path $path -Parent) -Leaf # Return Folder3

                                                   Как вернуть имя только последнего элемента пути с помощью PowerShell?


$path = 'C:\Folder1\Folder2\Folder3\file.txt'
Split-Path -Path $path -Leaf # Return file.txt

                                                                               Up, Math

                                                           Как перечислить методы класса System.Math с помощью PowerShell?
[System.Math] | Get-Member -Static -MemberType Method

                                                         Как вернуть абсолютное значение с помощью PowerShell?
[Math]::Abs(-12) #Returns 12
[Math]::Abs(-12.5) # Returns 12.5

                                            Как вычислить угол, синус которого имеет определенное значение, с помощью PowerShell?
[Math]::ASin(1) #Returns 1,5707963267949

                                            Как округлить число в большую сторону с помощью PowerShell?
[Math]::Ceiling(1.4)                                #Returns 2
[Math]::Ceiling(1.9)                                #Returns 2

                                         Как округлить число в меньшую сторону с помощью PowerShell?
[Math]::Floor(1.4)                           #Returns 1
[Math]::Floor(1.9)                          #Returns 1

                             Как вычислить простой логарифм заданного числа (по основанию e), с помощью PowerShell?
[Math]::Log(4) #Returns 1,38629436111989

                                   Как вычислить десятичный логарифм заданного числа с помощью PowerShell?
[Math]::Log10(4) #Returns 0,602059991327962

                                                          Как вернуть максимум из двух значений с помощью PowerShell?
[Math]::Max(2,4)                          #Returns 4
[Math]::Max(-2,-4)                         #Returns -2

                                                          Как вернуть минимум из двух значений с помощью PowerShell?
[Math]::Min(2,4)                    #Returns 2
[Math]::Max(-2,-4)                #Returns -4

                                               Как получить число, возведённое в указанную степень, с помощью PowerShell?
[Math]::Pow(2,4)                   # (основание степени, степень )Returns 16

                                     Как округлить десятичное значение до ближайшего целого значения с помощью PowerShell?
[Math]::Round(3.111,2)                #Returns 3,11
[Math]::Round(3.999,2)                 #Returns 4

                                          Как получить целое с округлением до меньшего по модулю с помощью PowerShell?
[Math]::Truncate(3.111) #Returns 3
[Math]::Truncate(3.999) #Returns 3

                                           Как получить квадратный корень заданного числа с помощью PowerShell?
[Math]::Sqrt(16)                          #Returns 4

                                                Как получить значение числа PI с помощью PowerShell?
[Math]::Pi                           #Returns 3,14159265358979

                                                   Как вычислить основание натурального логарифма (числа “е”) с помощью PowerShell?
[Math]::E                                                                              #Returns 2,71828182845905

                                               Как определить, является ли число чётным или нечётным, с помощью PowerShell?
PS C:\Windows\system32> $number=45
PS C:\Windows\system32> [bool]($number%2)
True
PS C:\Windows\system32> $number=44
PS C:\Windows\system32> [bool]($number%2)
False

                                                                                                   Up,Hashtables

                                                             Как создать пустую хэш-таблицу с помощью PowerShell?
$hashtable = @{}
$hashtable = New-Object -TypeName System.Collections.Hashtable

                                                 Как создать хэш-таблицу с элементами с помощью PowerShell?


$hashtable = @{
    'Key1' = 'Value1'
    'Key2' = 'Value2'
    'Key3' = 'Value3'
}
                                                     Как создать хэш-таблицу отсортированных по ключу/имени элементов (упорядоченных по  алфавиту), используя PowerShell?


$hashtable = [ordered]@{
    'Key1' = 'Value1'
    'Key2' = 'Value2'
    'Key3' = 'Value3'
}
 
$hashtable | Get-Member # System.Collections.Specialized.OrderedDictionary

                                                    Как добавить элементы (ключ-значение) в хэш-таблицу с помощью PowerShell?
$hashtable.Add('Key4', 'Value4')

                                                 Как получить конкретное значение из хэш-таблицы с помощью PowerShell?


# Returns only Value
$hashtable.Key1
$hashtable['Key1']
$hashtable.Item('Key1')
 
# Returns Key and Value
 $hashtable.GetEnumerator() | Where-Object{$_.Name -eq 'Key1'}

                                                       Как получить минимальное значение из хэш-таблицы с помощью PowerShell?

$hashtable = @{
    'Key1' = '1'
    'Key2' = '2'
    'Key3' = '3'
}
 
$hashtable.GetEnumerator() | Sort-Object -Property Value | Select-Object -First 1
$hashtable.GetEnumerator() | Sort-Object -Property Value -Descending | Select-Object -Last 1
              
                                                    Как получить максимальное значение из хэш-таблицы с помощью PowerShell?


$hashtable = @{
    'Key1' = '1'
    'Key2' = '2'
    'Key3' = '3'
}
 
$hashtable.GetEnumerator() | Sort-Object -Property Value -Descending | Select-Object -First 1
$hashtable.GetEnumerator() | Sort-Object -Property Value | Select-Object -Last 1

                                                        Как изменить элементы в хэш-таблице с помощью PowerShell?
$hashtable.Set_Item('Key1', 'Value1Updated')

                                                       Как удалить элементы хэш-таблицы с помощью PowerShell?
$hashtable.Remove('Key1')

                                                     Как очистить хэш-таблицу с помощью PowerShell?
$hashtable.Clear()

                                    Как проверить наличие определенного ключа/значения в хэш-таблице с помощью PowerShell?
$hashtable.ContainsKey('Key3')
$hashtable.ContainsValue('Value3')

                                 Как сортировать элементы по ключу/значению в хэш-таблице с помощью PowerShell?
$hashtable.GetEnumerator() | Sort-Object -Property Name
$hashtable.GetEnumerator() | Sort-Object -Property Value -Descending

                                                                                                   Up,Arrays
                                                                         Как объявить массив с помощью PowerShell?
$array = @()
$array = [System.Collections.ArrayList]@()

                                                             Как объявить массив с элементами с помощью PowerShell?
$array = @('A', 'B', 'C')
$array = 'A', 'B', 'C'
$array = 'a,b,c'.Split(',')
$array = .{$args} a b c
$array = echo a b c

                                                          Как добавить элементы в массив с помощью PowerShell?
$array += 'D'
[void]$array.Add('D')

                                                         Как изменить элемент в массиве с помощью PowerShell?
$array[0] = 'Z'                                                    # 1st item[0]

                                                         Как проверить размер массива с помощью PowerShell?
$array = 'A', 'B', 'C'
$array.Length                                                                          # Returns 3

              Как получить один элемент массива/несколько элементов/все элементы массива с помощью PowerShell?
$array = @('A', 'B', 'C')
$array[0]                                            # One item (A)
$array[0] + $array[2]                        # Several items (A,C)
$array                                                 # All items (A,B,C)

                                                                          Как удалить пустые элементы в массиве с помощью PowerShell?
$array = @('A', 'B', 'C', '')
$array = $array.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | Sort-Object                   # A,B,C

                                                             Как проверить, существует ли элемент в массиве, с помощью PowerShell?
$array = @('A', 'B', 'C')
'A' | ForEach-Object -Process {$array.Contains($_)}                                 # Returns True
'D' | ForEach-Object -Process {$array.Contains($_)}                                # Returns False

                                                      Как узнать порядковый номер элемента в массиве с помощью PowerShell?
$array = @('A', 'B', 'C')
[array]::IndexOf($array,'A')                                                 # Returns 0

                                                                  Как изменить порядок элементов в массиве с помощью PowerShell?
$array = @('A', 'B', 'C')
[array]::Reverse($array)                           # C,B,A

                                                                Как вернуть случайный элемент массива с помощью PowerShell?
$array | Get-Random

                                              Как отсортировать массив по возрастанию/убыванию с помощью PowerShell?
$array = @('A', 'B', 'C')
$array | Sort-Object                                           # A,B,C
$array | Sort-Object -Descending                    # C,B,A

                                            Как подсчитать количество элементов в массиве с помощью PowerShell?
$array.Count

                                                Как объединить два массива с помощью PowerShell?
$array1 = 'A', 'B', 'C'
$array2 = 'D', 'E', 'F'
$array3 = $array1 + $array2                                                      # A,B,C,D,E,F

                                          Как найти повторяющиеся элементы массива с помощью PowerShell?
$array = 'A', 'B', 'C', 'C'
($array | Group-Object | Where-Object -FilterScript {$_.Count -gt 1}).Values                         # Returns C

                                         Как удалить повторяющиеся элементы из массива с помощью PowerShell?
$array = 'A', 'B', 'C', 'C'
$array = $array | Select-Object -Unique
$array                                                                                               # Returns A,B,C

                                                             Как создать массив с элементами, начинающимися 
                                                             с определенного префикса (“user01”, “user02”, …, “user10”), с помощью PowerShell?
$array = 1..10 | ForEach-Object -Process { "user$_" }

                                                                                                                Up, ACL

                                              Как перечислить все ACL пользователя AD с помощью PowerShell?
(Get-Acl -Path "AD:\$dn").Access

                                                 Как перечислить все ACL-папки с помощью PowerShell?
(Get-Acl -Path C:\scripts).Access

                                                    Как перечислить конкретные разрешения ACL (пользователей или группы)
                                                    пользователя AD с помощью PowerShell?


((Get-Acl -Path "AD:\$dn").Access | Select-Object -Property IdentityReference | Where-Object -FilterScript {$_.IdentityReference -match 'Admin'} | Get-Unique | ForEach-Object -Process {$_.IdentityReference}).Value

Up, Variables

                                                      Каковы наиболее распространённые типы данных в PowerShell?


[bool]$variable = $true
[byte]$variable = ('0x10')
[char]$variable = 0x260E
[datetime]$variable = Get-Date
[decimal]$variable = 1.89
[single]$variable = 1.89
[double]$variable = 1.89
[guid]$variable = 'b19b2a2e-ce1b-4b62-844f-ac8829ffbe8f'
[int16]$variable = -32767
[int32]$variable = -2147483647
[int64]$variable = -9223372036854775807
[string]$variable = 'Irina'
[uint16]$variable = 32767
[uint32]$variable = 2147483647
[uint64]$variable = 9223372036854775807

                                                    Как найти минимальное и максимальное значения некоторых типов 
                                                    переменных с помощью PowerShell?


[int] (integer)
 
# int16 : MIN:-32768 MAX:32767
'MIN:{1:D} MAX:{0:D}' -f [int16]::MaxValue, [int16]::MinValue
 
# int32 : MIN:-2147483648 MAX:2147483647
'MIN:{1:D} MAX:{0:D}' -f [int32]::MaxValue, [int32]::MinValue
 
# int64 : MIN:-9223372036854775808 MAX:9223372036854775807
'MIN:{1:D} MAX:{0:D}' -f [int64]::MaxValue, [int64]::MinValue
 
[uint] (u = unsigned, only positive numbers)
 
# int16 : MAX:65535
'MAX:{0:D}' -f [uint16]::MaxValue
 
# int32 : MAX:4294967295
'MAX:{0:D}' -f [uint32]::MaxValue
 
# int64 : MAX:18446744073709551615
'MAX:{0:D}' -f [uint64]::MaxValue
                                      
                                                        Как проверить тип данных с помощью PowerShell?


32 -is [int]
$true -is [bool]
'a' -is [string]

                                                         Как создать переменную Here-String с помощью PowerShell?

# Without variable
$hereString = @"
My first name is Irina
My last name is Renard
"@
 
# With variable
$firstName = 'Irina'
$lastName = 'Renard'
$hereString = @"
My first name is ${firstName}
My last name is ${lastName}
"@

                                                         Как создать переменную с помощью PowerShell?
$powershellGuru = 'Hello'

                                                          Как создать постоянную переменную с помощью PowerShell?
Set-Variable -Name powershellGuru -Value 2015 -Option Constant

                                              Как создать глобальную переменную с помощью PowerShell?
$Global:powershellGuru = 'Hello' # Note : creating global variables is not recommended

                                                 Как прочитать значение переменной с помощью PowerShell?
$powershellGuru = 'Hello' # Create
$powershellGuru # Read
Get-Variable -Name powershellGuru -ValueOnly # Read

                                                        Как проверить тип переменной с помощью PowerShell?
$powershellGuru.GetType()

                          Как найти переменные в глобальной области видимости с помощью PowerShell?
Get-Variable -Scope Global

                                Как получить конкретные переменные по имени с помощью PowerShell?
Get-Variable -Include *Preference -Exclude W*

                                Как присвоить переменной определенный тип данных с помощью PowerShell?
[int64]$variable = 100
[string]$variable = 'PowershellGuru'

                               Как создать несколько переменных с одним и тем же значением с помощью PowerShell?
$a = $b = $c = $d = $e = 0

                                                               Какой алиас у переменной “$_” в PowerShell?
Get-Process | Where-Object -FilterScript {$_.Handles -gt 1000} # Using $_
Get-Process | Where-Object -FilterScript {$PSItem.Handles -gt 1000} # Using $PSItem (since version 3)

                    Как удалить все переменные с именем, начинающимся с “count”, с помощью PowerShell?
Remove-Variable -Name count*

                                   Как задать переменную среды с помощью PowerShell?
Get-ChildItem -Path Env:

                                 Как получить переменную среды Path с помощью PowerShell?
($env:Path) -replace(';', "`n")
[Environment]::GetEnvironmentVariable('Path') -replace(';', "`n")

                    Как добавить новый путь (например: C:\SysinternalsSuite) к переменной среды Path с помощью PowerShell?
$env:Path += ';C:\SysinternalsSuite'
$env:Path = $env:Path + ';C:\SysinternalsSuite'

                    Как объединить переменные в Powershell?
$a = 'Powershell'
$b = '- Guru'
$c = $a + $b

                      Как использовать ErrorVariable с помощью PowerShell?
Get-Process -Name abcde -ErrorAction SilentlyContinue -ErrorVariable AccessDenied
$AccessDenied | Select-Object -Property Exception
$AccessDenied | Select-Object -Property TargetObject

                 Как включить/отключить эквивалент “Option Explicit” 
                (VBScript: требуется объявленная переменная) с помощью PowerShell?


#Enable
Set-PSDebug -Strict
$a #The variable '$a' cannot be retrieved because it has not been set.
 
# Disable
Set-PSDebug -Off
$a #No error displayed

                                                                       Up, Static .NET Methods

                                       Как создать статические члены данных с помощью PowerShell?
[DateTime] | Get-Member -Static

                                                                     Up, Sounds

                                     Как проиграть звуковой сигнал “beep” с помощью PowerShell?
[System.Console]::Beep()

                                      Как проиграть звуковой сигнал “Asterisk” с помощью PowerShell?
[System.Media.SystemSounds]::Asterisk.Play()

                                    Как проиграть звуковой сигнал “exclamation” с помощью PowerShell?
[System.Media.SystemSounds]::Exclamation.Play()

                                     Как получить список доступных звуков с помощью PowerShell?
[System.Media.SystemSounds] | Get-Member -Static

                                    Как проиграть .WAV-файлы с помощью PowerShell?
$soundPlayer = New-Object -TypeName System.Media.SoundPlayer -ArgumentList "$env:windir\Media\Ringout.wav"
$soundPlayer.Play()
или
$soundPlayer.PlayLooping()
$soundPlayer.Stop()

                                                    Как прослушать набранный текст с помощью PowerShell?
Add-Type  -AssemblyName System.Speech
$speech = New-Object -TypeName System.Speech.Synthesis.SpeechSynthesizer
$speech.Speak('Hello PowershellGuru')

                                                                                               Up, XML

                                          Как прочитать XML-файл с помощью PowerShell?
[xml]$sitemap = Get-Content -Path .\sitemap.xml
$sitemap.urlset.url

                                      Как экспортировать данные в XML-файл с помощью PowerShell?
Get-Process | Export-Clixml -Path C:\scripts\processes.xml

                                           Как импортировать данные из CLIXML файла с помощью PowerShell?
$importProcesses = Import-Clixml -Path C:\scripts\processes.xml

                                                                                                        Up, GUI

                                Как создать GUI (Windows Forms) с помощью PowerShell?

Add-Type -AssemblyName System.Windows.Forms
$form = New-Object -TypeName system.Windows.Forms.Form
$label = New-Object -TypeName System.Windows.Forms.Label
$label.Text = 'PowershellGuru'
$label.AutoSize = $true
$label.Location = New-Object -TypeName Drawing.Point -ArgumentList 5, 10
$button = New-Object -TypeName Windows.Forms.Button
$button.Text = 'OK'
$button.Location = New-Object -TypeName Drawing.Point -ArgumentList 5, 30
$form.Controls.Add($label)
$form.Controls.Add($button)
$form.ShowDialog()

                                                                                                 Up, Characters

                                       Как преобразовать значение (в кодировке ASCII) в символ с помощью PowerShell?
[char]64

                               Как преобразовать символ в значение (в кодировке ASCII) с помощью PowerShell?
[int][char]'@'

PS C:\Windows\system32> [int][char]'@'
64
PS C:\Windows\system32> [int][char]'ъ'
1098
PS C:\Windows\system32> [int][char]'а'
1072
PS C:\Windows\system32> [int][char]'А'
1040
PS C:\Windows\system32> [int][char]'я'
1103
PS C:\Windows\system32> [int][char]'Я'
1071
PS C:\Windows\system32> [int][char]'a'
97
PS C:\Windows\system32> [int][char]'z'
122
PS C:\Windows\system32> [int][char]'A'
65
PS C:\Windows\system32> [int][char]'Z'
90
PS C:\Windows\system32> [int][char]'<'
60
PS C:\Windows\system32> [int][char]'>'
62
PS C:\Windows\system32>

                                                            Как сгенерировать английский алфавит с помощью PowerShell?
латиница(англ-прописные)
[char[]](97..122)

латиница(англ-строчные)
PS C:\Windows\system32> [char[]](65..90)

русский(строчные)
PS C:\Windows\system32> [char[]](1040..1071)

русский (прописные)
PS C:\Windows\system32> [char[]](1072..1103)

                                                                                                    Up,Compare

Как сравнить 2 массива с помощью PowerShell?


$a = @(1, 2, 3)
$b = @(2, 3)
Compare-Object -ReferenceObject $a -DifferenceObject $b -IncludeEqual | Where-Object -FilterScript {$_.SideIndicator -eq '<='} # Returns 1
Compare-Object -ReferenceObject $a -DifferenceObject $b -IncludeEqual | Where-Object -FilterScript {$_.SideIndicator -ne '=='} # Returns 1
Compare-Object -ReferenceObject $a -DifferenceObject $b -IncludeEqual | Where-Object -FilterScript {$_.SideIndicator -eq '=='} # Returns 2 and 3

                                              Как сравнить 2 процесса с помощью PowerShell?


$process1 = Get-Process -Id 8248
$process2 = Get-Process -Id 376
Compare-Object -ReferenceObject $process1 -DifferenceObject $process2 -Property Handles, NPM, PM, WS, VM, CPU

                                           Up,Microsoft Exchange

          Как получить список мобильных устройств, синхронизированных с почтой пользователя, с помощью PowerShell?
Get-ActiveSyncDeviceStatistics

                      Как предоставить пользователю полный доступ к почтовому ящику с помощью PowerShell?
Add-MailboxPermission -Identity $dn -User 'DOMAIN\powershellguru' -AccessRights 'FullAccess'

                          Как аннулировать полный доступ пользователя к почтовому ящику с помощью PowerShell?
Remove-MailboxPermission -Identity $dn -User 'DOMAIN\powershellguru' -AccessRights 'FullAccess' -InheritanceType 'All'

                                            Как разрешить пользователю использовать “Send As” с помощью PowerShell?
Add-ADPermission -Identity $dn -User 'DOMAIN\powershellguru' -ExtendedRights 'Send-As'

                               Как запретить пользователю использовать “Send As” с помощью PowerShell?

Remove-ADPermission -Identity $dn -User 'DOMAIN\powershellguru' -ExtendedRights 'Send-As' -InheritanceType 'All' -ChildObjectTypes $null -InheritedObjectTypes $null -Properties $null

                                Как найти фильтры (правила) входящей почты почтового ящика с помощью PowerShell?
Get-InboxRule -Mailbox 'Powershell.Guru'

                                     Как получить SMTP-адреса пользователей, 
                                     которые имеют OWA (Outlook Web Access) с помощью PowerShell?
Get-CASMailbox -Filter{OWAEnabled -eq $true} | Select-Object -Property Name, PrimarySMTPAddress

                                                                                 Exchange 2007

                                Как задать предпосылки(prerequisites) для Exchange Server 2007 
                            Hub Transport, Mailbox (MBX) и Client Access Server (CAS) с помощью PowerShell?

ServerManagerCmd -i RSAT-ADDS
ServerManagerCmd -i PowerShell Web-Server Web-ISAPI-Ext Web-Metabase Web-Lgcy-Mgmt-Console Web-Basic-Auth Web-Digest-Auth Web-Windows-Auth Web-Dyn-Compression RPC-over-HTTP-proxy

                                                                                   Exchange 2010

Как задать prerequisites для Exchange Server 2010 Hub Transport, Mailbox (MBX) и Client Access Server (CAS) с помощью PowerShell?


Import-Module -Name ServerManager
Add-WindowsFeature NET-Framework, RSAT-ADDS, Web-Server, Web-Basic-Auth, Web-Windows-Auth, Web-Metabase, Web-Net-Ext, Web-Lgcy-Mgmt-Console, WAS-Process-Model, RSAT-Web-Server, Web-ISAPI-Ext, Web-Digest-Auth, Web-Dyn-Compression, NET-HTTP-Activation, RPC-
Over-HTTP-Proxy -Restart

                                                                                          Exchange 2013

Как задать предпосылки для Exchange Server 2013, Mailbox (MBX) и Client Access Server (CAS) с помощью PowerShell?


Install-WindowsFeature AS-HTTP-Activation, Desktop-Experience, NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgm
t-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation

                       Как задать предпосылки для Exchange Server 2013 и Client Access Server (CAS) с помощью PowerShell?


Install-WindowsFeature AS-HTTP-Activation, Desktop-Experience, NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-
Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation

                                                                            Up, Microsoft Excel

Как экспортировать и выровнять столбцы в Excel файле с помощью PowerShell?

# Output File
$file = 'C:\export.xlsx'
 
# Create Excel COM Object
$excel = New-Object -ComObject Excel.Application
 
# Make the Excel windows visible
$excel.Visible = $true
 
# Add Workbook
$workbook = $excel.Workbooks.Add()
 
# Add Worksheet
$sheet1 = $workbook.worksheets.item(1)
$sheet1.Name = 'Users'
 
$row = 1
$column = 0
 
# Headers
 
$sheet1.cells.Item($row,1) = 'FirstName'
$sheet1.cells.Item($row,2) = 'LastName'
$sheet1.cells.Item($row,3) = 'SamAccountName'
$sheet1.cells.Item($row,4) = 'Department'
$sheet1.cells.Item($row,5) = 'Last Logon'
$sheet1.cells.Item($row,6) = 'PasswordLastSet'
 
# Set Bold for Line1 and Colum 1 to 6
 
for ($column = 1; $column -le 6; $column++)
{
    # Bold
    $sheet1.cells.Item($row,$column).Font.Bold= $true
 
    # Italic
    $sheet1.cells.Item($row,$column).Font.Italic= $true
 
    # Underline
    $sheet1.cells.Item($row,$column).Font.Underline= $true
 
    # Size
    $sheet1.Cells.Item($row,$column).Font.Size = 12
 
    # Font
    $sheet1.Cells.Item($row,$column).Font.Name = 'Calibri'
 
    # Color Font
    $sheet1.Cells.Item($row,$column).Font.ColorIndex = 3
 
    # Background color
    $sheet1.Cells.Item($row,$column).Interior.ColorIndex = 6
}
 
# Autofit all columns
$null = $sheet1.Columns.Autofit()  
 
# Save the workbook
$workbook.SaveAs($file)
 
# Close the workbook
$workbook.Close($true)
 
# Quit Excel
$excel.Quit()
 
# Release COM Object
[void][Runtime.Interopservices.Marshal]::ReleaseComObject($excel)


                                     Как проверить установленную версию Microsoft Office с помощью PowerShell?
$excel = New-Object -ComObject Excel.Application
$excel.Version

                                                                                                  Up, Errors

Как очистить системную переменную “Error” с помощью PowerShell?
$Error.Clear()

                                                     Как получить последнюю ошибку исключения с помощью PowerShell?


($Error[0].Exception.GetType().FullName 
$Error[0] | Format-List * -Force

                                                   Как перечислить все типы исключений с помощью PowerShell?


([System.AppDomain]::CurrentDomain.GetAssemblies() | ForEach-Object -Process {
        try {
            $_.GetExportedTypes() | Where-Object -FilterScript {$_.Fullname -match 'Exception'}
        }
        catch {}
}).FullName | Sort-Object

                                                                                             Up, PSObject

                                                  Как создать пользовательские объекты с помощью PowerShell?

[PSCustomObject] @{
    Date     = Get-Date -Format d
    Computer = [System.Environment]::MachineName
    Username = ([Security.Principal.WindowsIdentity]::GetCurrent()).Name
} | Format-List

                                                                                               Up, Openfiles

                                                             Как перечислить открытые файлы с помощью PowerShell?


openfiles.exe /u $user /p $password /query /s $ip /fo CSV | Select-String -Pattern $keyword | ConvertFrom-Csv -Header 'ID', 'User', 'Windows', 'Path' | Format-Table -AutoSize
Get-SmbOpenFile #Windows 8 and 2012

                                                                                                       Up,Search

                                                                           Как найти файлы с помощью PowerShell?


# Solution_решение 1
Get-ChildItem -File
 
# Solution_решение 2
$files = [System.IO.Directory]::GetFiles($path, '*',[System.IO.SearchOption]::AllDirectories)
$files = [System.IO.Directory]::EnumerateFiles($path, '*',[System.IO.SearchOption]::AllDirectories)

                                                                                        Как найти папки с помощью PowerShell?


# Solution_решение 1
Get-ChildItem -Directory
 
# Solution_решение 2
$folders = [System.IO.Directory]::GetDirectories($path, '*.*',[System.IO.SearchOption]::AllDirectories)
$folders = [System.IO.Directory]::EnumerateDirectories($path, '*',[System.IO.SearchOption]::AllDirectories)

                                                                                                                    Up, Operators

                                                           Каковы арифметические операторы в PowerShell?
+, -, *, /, %, -shl, -shr

                                                            Каковы операторы присваивания в PowerShell?
++, --, =, +=, -=, *=, /=, %=

                                                           Каковы операторы сравнения в PowerShell?
-eq, -ne, -gt, -ge, -lt, -le, -replace, -match, -notmatch, -contains, -notcontains, -like, -notlike, -in, -notin

                                                           Каковы логические операторы в PowerShell?
-and, -or, -xor, -not, !

                                                          Каковы операторы перенаправления в PowerShell?
>, >>, 2>, 2>, and 2>&1

                                                         Каковы битовые операторы в PowerShell?
-band, -bor, -bxor, -bnot, -shl, -shr

                                                                          Up, Microsoft Outlook
                                                      Как получить доступ к пространству имен в API Outlook, с помощью PowerShell?


Add-Type -AssemblyName 'Microsoft.Office.Interop.Outlook'
 
# Outlook 2013
Add-Type -AssemblyName ('Microsoft.Office.Interop.Outlook, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')
 
# Outlook 2010
Add-Type -AssemblyName ('Microsoft.Office.Interop.Outlook, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')
 
# Outlook 2007
Add-Type -AssemblyName ('Microsoft.Office.Interop.Outlook, Version=12.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')
 
$outlook = New-Object -ComObject Outlook.Application
$namespace = $outlook.GetNameSpace('MAPI')

                                                                                    Up, Microsoft SharePoint
                                                         Как добавить оснастку SharePoint с помощью PowerShell?
Add-PSSnapin -Name 'Microsoft.SharePoint.PowerShell'

                                                        Как найти список всех заданий таймера с помощью PowerShell?
Get-SPTimerJob

                                                                                      Up, Symantec Vault
                                                         Как добавить оснастку Vault с помощью PowerShell?
Add-PSSnapin -Name 'Symantec.EnterpriseVault.PowerShell.Snapin'

                                                                                         Up, Comments
                                                 Как создать комментарий к строке с помощью PowerShell?
# Line

                                                   Как закомментировать блок строк с помощью PowerShell?
<#
    Line 1
    Line 2
#>

                                                                                               Up, Processes

                                             Как найти запущенные процессы с помощью PowerShell?
Get-Process
[System.Diagnostics.Process]::GetProcesses()

                                                   Как открыть блокнот с помощью PowerShell?
Start-Process -FilePath notepad
[System.Diagnostics.Process]::Start('Notepad')
([WMICLASS]'root\cimv2:win32_process').Create('Notepad')

                                         Как принудительно остановить запущенный процесс с помощью PowerShell?


# Solution_решение 1
Stop-Process -Name notepad (-Force)
Stop-Process -Id 3120
 
# Solution_решение 2
$notepad = Get-Process -Name notepad
$notepad.Kill()
                                                  Как найти владельца процесса с помощью PowerShell?


(Get-WmiObject -Class win32_process | Where-Object -FilterScript {$_.ProcessName -eq 'notepad.exe'}).GetOwner() | Format-Table -Property Domain, User
Как получить путь процесса с помощью PowerShell?
(Get-Command notepad.exe).Path

                                                                                                          Up, Services
                                                        Как получить список всех служб с помощью PowerShell?
Get-Service
Get-WmiObject -Class Win32_Service | Format-Table -AutoSize

                                                    Как запустить службу (например: TeamViewer) с помощью PowerShell?
Get-Service -Name TeamViewer
Get-Service -DisplayName 'TeamViewer 10'
Get-Service -Name TeamViewer | Format-List -Property *
Get-WmiObject -Class Win32_Service -Filter "Name='TeamViewer'"

                                             Как запустить определённую службу на удалённом компьютере с помощью PowerShell?
Get-Service -Name TeamViewer -ComputerName $computer
Get-Service -DisplayName 'TeamViewer 10' -ComputerName $computer

                                                 Как посмотреть все запущенные/остановленные службы с помощью PowerShell?
Get-Service | Where-Object -FilterScript {$_.Status -eq 'Running'}
Get-WmiObject -Class Win32_Service -Filter "state='running'"
Get-Service | Where-Object -FilterScript {$_.status -eq 'Stopped'}
Get-WmiObject -Class Win32_Service -Filter "state='stopped'"

                          Как посмотреть все запускаемые автоматически/вручную/остановленные службы с помощью PowerShell?
Get-WmiObject -Class Win32_Service -Filter "startmode='manual'"
Get-WmiObject -Class Win32_Service -Filter "startmode='auto'"
Get-WmiObject -Class Win32_Service -Filter "startmode='disabled'"

                                                                    Как запустить службу с помощью PowerShell?
Start-Service -Name TeamViewer
Start-Service -DisplayName 'TeamViewer 10'

                                                                  Как остановить службу с помощью PowerShell?
Stop-Service -Name TeamViewer
Stop-Service -DisplayName 'TeamViewer 10'

                                                              Как перезапустить службу с помощью PowerShell?
Restart-Service -Name TeamViewer
Restart-Service -DisplayName 'TeamViewer 10'

                      Как получить список служб, которые могут быть приостановлены, с помощью PowerShell?
Get-Service | Where-Object -FilterScript {$_.CanPauseAndContinue -eq $true}

                            Как получить список служб с отображением “CompanyName” и “Filepath” с помощью PowerShell?


Get-WmiObject -Class win32_service | Select-Object -Property Name, DisplayName, @{
    Name       = 'Filepath'
    Expression = { $_.pathname.Split('-')[0].Split('/')[0].replace('"', '') }
} | Select-Object -Property Name, DisplayName, filepath, @{
    Name       = 'CompanyName'
    Expression = {(Get-ChildItem -Path $_.filepath | Select-Object -ExpandProperty versioninfo).CompanyName}
}
                                          Как приостановить работу службы помощью PowerShell?
Suspend-Service -Name TapiSrv
Suspend-Service -DisplayName 'Telephony'

                                            Как возобновить работу службы с помощью PowerShell?
Resume-Service -Name TapiSrv
Resume-Service -DisplayName 'Telephony'

                                            Как создать новую службу с помощью PowerShell?
New-Service -Name 'PowershellGuru' -BinaryPathName 'C:\WINDOWS\System32\svchost.exe -k netsvcs'

                                            Как удалить службу с помощью PowerShell?
(Get-WmiObject -Class win32_service -Filter "name='PowershellGuru'").Delete()

                                                                                  Up,History
                                 Как получить список команд, использованных в текущей сессии, с помощью PowerShell?
Get-History

                                Как очистить историю команд, использованных в текущей сессии, с помощью PowerShell?
Clear-History

                                 Как использовать предыдущую команду в текущей сессии с помощью PowerShell?
Invoke-History -Id 33

                                  Как экспортировать/импортировать историю команд в текущей сессии с помощью PowerShell?


# Export
Get-History | Export-Clixml -Path 'C:\scripts\History_PowershellGuru_Commands.xml'
 
# Import
Import-Clixml -Path 'C:\scripts\History_PowershellGuru_Commands.xml' | Add-History

                                                                                           Up, Event Viewer

Как найти событие 10 с датой после 15/02/2015 в журнале приложения в окне просмотра событий с помощью PowerShell?

# Solution_решение 1
Get-WinEvent -ComputerName $computer -FilterHashtable @{
    Logname      = 'Application'
    Providername = 'Microsoft-Windows-WMI'
    Id           = 10
    StartTime    = [DateTime]'02/15/2015 08:00:00 am'
}
 
# Solution_решение 2
Get-EventLog -LogName Application -Source 'Microsoft-Windows-WMI' -After 15/02/2015 -ComputerName $computer | Where-Object -FilterScript {$_.EventID -eq 10}
 
                                            Как изменить результаты (например: перевести SID из UserId в Username и 
                                            удалить доменное имя из MachineName) в окне                                             просмотра событий с помощью PowerShell?


# Original
Get-WinEvent -LogName 'Microsoft-Windows-AppLocker/EXE and DLL' | Select-Object -Property Id, MachineName, UserId
 
# Modified
Get-WinEvent -LogName 'Microsoft-Windows-AppLocker/EXE and DLL' | Select-Object -Property Id, @{
    Name       = 'MachineName'
    Expression = {$_.MachineName -replace '.domain.com', ''}
}, @{
    Name       = 'UserId'
    Expression = {((New-Object -TypeName System.Security.Principal.SecurityIdentifier -ArgumentList ($_.
    UserId)).Translate([System.Security.Principal.NTAccount])).Value}
}

                                                              Как записать событие с ID 65535 в системном журнале, 
                                                              используя “Service Control Manager”, с помощью PowerShell?

Write-EventLog -LogName System -Source 'Service Control Manager' -EventId 65535 -Message 'PowershellGuru'

                                                                          Как очистить журнал событий системы с помощью PowerShell?
Clear-EventLog -LogName System

                                                                                                       Up, Culture
                                                      Как получить текущие региональные настройки системы с помощью PowerShell?
Get-Culture | Format-List -Property *
[System.Threading.Thread]::CurrentThread

                          Как перечислить все имеющиеся региональные настройки системы
                          (EN-US, FR-FR, DE-DE, ES-ES, …) с помощью PowerShell?

[System.Globalization.CultureInfo]::GetCultures('InstalledWin32Cultures') | Sort-Object -Property DisplayName

                      Как запустить “Get-Date” с немецкими региональными настройками с помощью PowerShell?

[System.Threading.Thread]::CurrentThread.CurrentCulture = [System.Globalization.CultureInfo]'de-DE'
Get-Date

                     Как запустить “Get-Date” с испанскими региональными настройками с помощью PowerShell?

[System.Threading.Thread]::CurrentThread.CurrentCulture = [System.Globalization.CultureInfo]'es-ES'
Get-Date

                                                                                                              Up, CSV
                                                         Как экспортировать файл в CSV с помощью PowerShell?
Get-Service | Export-Csv -Path 'C:\scripts\services.csv'

                                                         Как импортировать файл из CSV с помощью PowerShell?
Import-Csv -Path 'C:\scripts\services.csv'

                                                 Как импортировать файл из CSV, используя Foreach, с помощью PowerShell?


$file = Import-Csv -Path 'C:\scripts\services.csv'
 
foreach ($service in $file)
{
    $service.Name
}

                                                                                                      Up, Random
                                                     Как сгенерировать случайное число от 1 до 10 с помощью PowerShell?


# Solution_решение 1
Get-Random -Minimum 1 -Maximum 10
 
# Solution_решение 2
$random = New-Object -TypeName System.Random
$random.Next(1,10)
                                                        Как создать строку из массива с помощью PowerShell?
$array = 'power', 'shell', 'guru'
Get-Random $array

                                                             Как получить случайный процесс с помощью PowerShell?
Get-Process | Get-Random

                                                           Как сгенерировать случайное имя файла с помощью PowerShell?
[System.IO.Path]::GetRandomFileName()

                                                             Up, Jobs
                                                           Как начать новое фоновое задание в текущем сеансе с помощью PowerShell?
Start-Job -ScriptBlock {Get-Process}

                                                         Как получить все задания в текущем сеансе с помощью PowerShell?
Get-Job

                                   Как получить результаты конкретного задания в текущей сессии с помощью PowerShell?
Receive-Job -Id 2

                                          Как удалить задание в текущей сессии с помощью PowerShell?
Remove-Job -Id 2

                                              Как остановить задание в текущей сессии с помощью PowerShell?
Stop-Job -Id 2

Как дождаться выполнения фонового задания в текущей сессии с помощью PowerShell?
Wait-Job -Id 2

                                                                                       Up, Folders
                                                            Как создать новую папку с помощью PowerShell?
решение1
New-Item -ItemType directory -Path 'C:\scripts\Folder'

решение2
#скрипт для заданной папки создает в каждой из ее подпапок вложенную папку с названием "rezultat"
Param(
    [string]$NRoot ="N:\",
    [string]$NFolder="rezultat"
)

$Ndir= dir $NRoot -Directory
ForEach($N in $Ndir)
{
    New-Item -Name $NFolder -ItemType Directory -Path $Ndir.FullName
}
решение3
#скрипт для заданной папки создает в каждой из ее подпапок вложенную папку с названием "rezultat"
или конвейр выполняющий тоже решение
Dir $NRoot -Directory | ForEach-object CreateSudirectory $NFolder

                                                                          как создаем папку с текстовым файлом по указанному пути
new-item -path . -name testfile1.txt -itemtype "file" -value "This is a text string."

                                                                    Как переименовать папку с помощью PowerShell?
Rename-Item -Path 'C:\scripts\Folder' -NewName 'C:\scripts\Folder_Renamed'

                                                           Как скопировать папку в другое место с помощью PowerShell?
Copy-Item -Path 'C:\scripts\Folder1' -Destination 'C:\scripts\Folder2'

                                                                  Как удалить папку с помощью PowerShell?
Remove-Item -Path 'C:\scripts\Folder'

                                                       Как найти пустые папки с помощью PowerShell?


Get-ChildItem -Path C:\scripts -Recurse -Directory | Where-Object -FilterScript {$_.GetFiles().Count -eq 0} | Select-Object -Property FullName

                         Как узнать размер папки (включая размер вложенных папок) в КБ/МБ/ГБ с помощью PowerShell?

# KB 
(Get-ChildItem -Path 'C:\scripts' -Recurse -Force | Measure-Object -Property Length -Sum ).Sum /1KB # 1024,28966140747
'{0:N2}' -f ((Get-ChildItem -Path 'C:\scripts' -Recurse -Force | Measure-Object -Property Length -Sum ).Sum /1KB) # 1.024,29
 
# MB
(Get-ChildItem -Path 'C:\scripts' -Recurse -Force | Measure-Object -Property Length -Sum ).Sum /1MB # 1024,28966140747
'{0:N2}' -f ((Get-ChildItem -Path 'C:\scripts' -Recurse -Force | Measure-Object -Property Length -Sum ).Sum /1MB) # 1.024,29
 
# GB
(Get-ChildItem -Path 'C:\scripts' -Recurse -Force | Measure-Object -Property Length -Sum ).Sum /1GB # 1024,28966140747
'{0:N2}' -f ((Get-ChildItem -Path 'C:\scripts' -Recurse -Force | Measure-Object -Property Length -Sum ).Sum /1GB) # 1.024,29

                                                                                            Up, RDP
                                              Как перечислить RDP-сессии с помощью PowerShell?


# Solution_решение 1
Import-Module -Name Remotedesktopservices
Get-RDUserSession
 
# Solution_решение 2
qwinsta.exe /server:$computer

                                                                            Up, Scheduled Tasks
                                         Как перечислить задания, запланированные на компьютере, с помощью PowerShell?

# Solution_решение 1
$schedule = New-Object -ComObject Schedule.Service
$schedule.Connect()
$defragTasks = $schedule.GetFolder('\Microsoft\Windows\Defrag').Gettasks(0)
$defaultTasks = $schedule.GetFolder('\').Gettasks(0)
 
# Solution_решение 2
schtasks.exe
 
# Solution_решение 3
Get-ScheduledTask #Windows 8 and 2012

                                                                                  Up, COM Objects
                                         Как перечислить COM-объекты на компьютере с помощью PowerShell?

Get-ChildItem HKLM:\Software\Classes -EA 0 | Where-Object -FilterScript`
{($_.PSChildName -match '^\w+\.\w+$') -and (Get-ItemProperty "$($_.PSPath)\CLSID" -ea 0)} `
| Select-Object -ExpandProperty PSChildName

                                                          Как освободить COM-объект с помощью PowerShell?
$null = [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel)

                                                     Up, GPO
                                                  Как импортировать модуль групповой политики с помощью PowerShell?
Import-Module -Name GroupPolicy

                                               Как посмотреть имя и ID объекта групповой политики с помощью PowerShell?
Get-GPO -All | Sort-Object -Property DisplayName | Format-Table -Property DisplayName, Id

                                             Как подсчитать количество объектов групповой политики с помощью PowerShell?
(Get-GPO -All).Count

                                           Как сделать резервную копию всех объектов групповой политики с помощью PowerShell?
Backup-Gpo -All -Path $path

                                           Как восстановить все объекты групповой политики с помощью PowerShell?
Restore-GPO -All -Path $path

                     Как сделать резервную копию определённых объектов групповой политики с помощью PowerShell?
Backup-GPO -Name 'Create App Shortcut' -Path $path

                             Как восстановить конкретный объект групповой политики с помощью PowerShell?
Restore-GPO -Name 'Create App Shortcut' -Path $path

                                                                                                 Up, Hardware
                                         Как получить информацию о материнской плате с помощью PowerShell?
Get-WmiObject -Class Win32_BaseBoard -ComputerName $computer

                                                        Как получить информацию о процессоре с помощью PowerShell?

# Solution_решение 1
 Get-WmiObject -Class Win32_Processor -ComputerName $computer
 
Caption           : Intel64 Family 6 Model 69 Stepping 1
DeviceID          : CPU0
Manufacturer      : GenuineIntel
MaxClockSpeed     : 2601
Name              : Intel(R) Core(TM) i7-4510U CPU @ 2.00GHz
SocketDesignation : U3E1
 
# Solution_решение 2
 $env:PROCESSOR_ARCHITECTURE
AMD64
 
$env:PROCESSOR_IDENTIFIER
Intel64 Family 6 Model 69 Stepping 1, GenuineIntel
 
$env:PROCESSOR_LEVEL
6
 
$env:PROCESSOR_REVISION
4501

                                           Как получить информацию об оперативной памяти с помощью PowerShell?
Get-WmiObject -Class Win32_PhysicalMemory -ComputerName $computer

                                            Как получить информацию о USB-устройствах с помощью PowerShell?
Get-WmiObject -Class Win32_USBControllerDevice -ComputerName $computer

                                                                        Up, Computer
                                          Как перезагрузить/перезапустить компьютер с помощью PowerShell?


# Solution_решение 1
Restart-Computer -ComputerName $computer
 
# Solution_решение 2
%windir%\System32\shutdown.exe -r
 
# Solution_решение 3 (Several computers)
$servers = 'server01', 'server02', 'server03'
Restart-Computer -ComputerName $servers -Force

                                                          Как выключить компьютера с помощью PowerShell?


# Solution_решение 1
Stop-Computer -ComputerName $computer
 
# Solution_решение 2
%windir%\System32\shutdown.exe -s
  
# Solution_решение 3 (Several computers)
$servers = 'server01', 'server02', 'server03'
Stop-Computer -ComputerName $servers -Force

                                                          Как приостановить работу компьютера с помощью PowerShell?

# Solution_решение 1
[System.Windows.Forms.Application]::SetSuspendState('Suspend', $false, $true)
 
# Solution_решение 2
%windir%\System32\rundll32.exe powrprof.dll, SetSuspendState Standby
                                            
                                                     Как перевести компьютер в спящий режим с помощью PowerShell?


# Solution_решение 1
[System.Windows.Forms.Application]::SetSuspendState('Hibernate', $false, $true)
 
# Solution_решение 2
%windir%\System32\rundll32.exe powrprof.dll, SetSuspendState Hibernate

                                                          Как выйти из своей учётной записи с помощью PowerShell?
(Get-WmiObject -Class win32_operatingsystem -ComputerName $computer).Win32Shutdown(0)

                                                                   Как заблокировать компьютер с помощью PowerShell?
%windir%\System32\rundll32.exe user32.dll, LockWorkStation

                                                        Как переименовать компьютер с помощью PowerShell?
Rename-Computer -NewName 'PowershellGuru'

                                                Как добавить компьютер к домену в Active Directory с помощью PowerShell?
Add-Computer -DomainName 'PowershellGuru'

                                                  Как добавить компьютер в рабочую группу с помощью PowerShell?
Add-Computer -WorkgroupName 'PowershellGuru'

                                                                                Up, Certificates
                                            Как перечислить сертификаты с помощью PowerShell?
Get-ChildItem -Path cert: -Recurse

                                               Как создать самостоятельно подписанный SSL сертификат с помощью PowerShell?
New-SelfSignedCertificate -DnsName www.powershell-guru.com -CertStoreLocation cert:\LocalMachine\My

                                                                                    Up,Browsers
                                              Как очистить кэш/журнал Internet Explorer с помощью PowerShell?


# Delete all
rundll32.exe InetCpl.cpl, ClearMyTracksByProcess 255
 
# Custom
rundll32.exe InetCpl.cpl, ClearMyTracksByProcess 1 #History
rundll32.exe InetCpl.cpl, ClearMyTracksByProcess 2 #Cookies
rundll32.exe InetCpl.cpl, ClearMyTracksByProcess 8 #Temporary Internet Files
rundll32.exe InetCpl.cpl, ClearMyTracksByProcess 16 #Form Data
rundll32.exe InetCpl.cpl, ClearMyTracksByProcess 32 #Passwords

                                                                                                Up, Credentials
                                             Как узнать (спросить) и использовать учётные данные с помощью PowerShell?
$credentials = Get-Credential -Message 'Admin Credentials' -UserName 'Domain\PowershellGuru'
$user = $credentials.GetNetworkCredential().Username
$password = $credentials.GetNetworkCredential().Password

                                                                                              Up, Powershell ISE

                              Как отобразить члены встроенной переменной $psISE с помощью PowerShell ISE?
$psISE | Get-Member

                   Как восстановить открытые файлы (вкладки) при следующем запуске с помощью PowerShell ISE?
Get-Process -Name powershell*ise | Stop-Process

                   Как использовать регионы (блоки для сворачивания/разворачивания) с помощью PowerShell ISE?
#region region1
#endregion region1

                              Как использовать автозавершение с помощью PowerShell ISE?
Get-Service | Select-Object -Property (Control + Space) # Auto-completion after -Property

                                                        Как изменить размер буфера в PowerShell ISE?


$window = $host.UI.RawUI
$size = $window.BufferSize
$size.Height = 3000
$size.Width = 400
$window.BufferSize = $size
 
(Get-Host).UI.RawUI.BufferSize | Format-List
Keyboard shorcuts

                                                          Как свернуть/развернуть все с помощью PowerShell ISE?
CTRL + M

                                                             Как запустить скрипт с помощью PowerShell ISE?
F5

                                           Как запустить отдельные строки скрипта с помощью PowerShell ISE?
Highlight the line(s) and press F8

                                   Как показать или скрыть панель/оболочку скрипта с помощью PowerShell ISE?
CTRL + R

                                                Как увеличить/уменьшить масштаб с помощью PowerShell ISE?
CTRL + PLUS SIGN # ZOOM IN
CTRL + MINUS SIGN # ZOOM OUT

                                                  Как открыть удалнную вкладку PowerShell с помощью PowerShell ISE?
CTRL + Shift + R

                                                            Как перейти к строке с номером X с помощью PowerShell ISE?
CTRL + G

                                                           Как комментировать несколько строк с помощью PowerShell ISE?
1) Put cursor at the beginning of the line
2) Press Alt + Shift + Up/Down Arrow keys (to select the block)
3) Press "#" to add comments
4) Press "Del" to remove comments

                                                  Как открыть новую вкладку с помощью PowerShell ISE?
ise file.ps1

Snippet

                                                          Как создать фрагмент с помощью PowerShell ISE?


New-IseSnippet -Title FolderSize -Description 'Size of a folder' -Text "(Get-ChildItem $folder-Recurse -Force | Measure-Object -Property Length -Sum ).Sum/1MB"
# File created : C:\Users\Administrator\Documents\WindowsPowerShell\Snippets\FolderSize.snippets.ps1xml

                                         Как посмотреть пути фрагментов (PS1XML файлов) с помощью PowerShell?
Get-IseSnippet

                                      Как удалить определённые фрагменты (начиная с F *) с помощью PowerShell ISE?
Get-ChildItem (Join-Path -Path (Split-Path $profile) -ChildPath 'Snippets') -Filter F* | Remove-Item

                                            Как удалить все фрагменты, созданные с помощью PowerShell ISE?
Get-IseSnippet | Remove-Item

                                                                    Как вставить фрагмент с помощью PowerShell ISE?
CTRL + J

                                                                                              Up,Drives

                                       Как перечислить диски с помощью PowerShell?
[System.IO.DriveInfo]::Getdrives()
Get-PSDrive
Get-WmiObject -Class Win32_LogicalDisk

                                            Как получить информацию о заданном диске (F:) с помощью PowerShell?
Get-PSDrive | ?{$_.Root -eq "F:\"} | Format-List

                                                                                                Up,Remote

             Как запустить команду (например: Get-Process) на удалённом компьютере с помощью PowerShell?
Invoke-Command -ComputerName $computer -Credential 'Domain\powershellguru' -ScriptBlock {Get-Process}

                                        Как подключиться к удалённому компьютеру с помощью PowerShell?
Enable-PSRemoting -Force
Enter-PSSession -ComputerName FQDN -Credential DOMAIN\user
Exit-PSSession # To quit the session

Как запустить скрипт (расположённый на локальном компьютере) на удалённом компьютере с помощью PowerShell?
Invoke-Command -ComputerName $computer -Credential 'Domain\powershellguru' -FilePath 'C:\scripts\script.ps1'

                                                                                                        Up,Messages
                                                              Как написать сообщение с помощью PowerShell?
Write-Output -InputObject 'PowershellGuru'

                              Как написать сообщение текстом определённого цвета (зелёный), с помощью PowerShell?
Write-Host -Object 'PowershellGuru' -ForegroundColor Green

                        Как написать сообщение с фоном определённого цвета (зелёный), с помощью PowerShell?
Write-Host -Object 'PowershellGuru' -BackgroundColor Green

                                         Как отобразить все консольные цвета с помощью PowerShell?
[Enum]::GetValues([System.ConsoleColor]) | ForEach-Object -Process {Write-Host -Object $_ -ForegroundColor $_}

PS C:\Windows\system32> [Enum]::GetValues([System.ConsoleColor]) | ForEach-Object -Process {Write-Host -Object $_ -ForegroundColor $_}
Black
DarkBlue
DarkGreen
DarkCyan
DarkRed
DarkMagenta
DarkYellow
Gray
DarkGray
Blue
Green
Cyan
Red
Magenta
Yellow
White
PS C:\Windows\system32>


                                       Как написать два сообщения одной строкой с помощью PowerShell?
Write-Host -Object 'Powershell' -NoNewline;Write-Host -Object 'Guru'

                                                 Как включить/отключить подробные сообщения с помощью PowerShell?

### Global (affects all verbose messages) ###
 # Displays the verbose message and an error message and then stops executing
$VerbosePreference = 'Stop'
 
# Displays the verbose message and then displays a prompt that asks you whether you want to continue
$VerbosePreference = 'Inquire'
 
# Displays the verbose message and then continues with execution.
$VerbosePreference = 'Continue'
 
# Does not display the verbose message. Continues executing. (Default)
$VerbosePreference = 'SilentlyContinue'       
 
### Individual (applies only for this cmdlet and can be used to override the preference variable) ###
 $VerbosePreference = 'SilentlyContinue'
Write-Verbose -Message 'Verbose Message' -Verbose


                                                          Как отобразить подробное сообщение с помощью PowerShell?
Write-Verbose -Message 'Processing users'

                                 Как включить/отключить отладочные сообщения с помощью PowerShell?


### Global (affects all debugging messages) ###
# Displays the debug message and stops executing. Writes an error to the console.
$DebugPreference = 'Stop'
 
# Displays the debug message and asks you whether you want to continue.
$DebugPreference = 'Inquire'
 
# Displays the debug message and continues with execution.
$DebugPreference = 'Continue'
 
# The debug message is not displayed and execution continues without interruption (Default).
$DebugPreference = 'SilentlyContinue'
 
### Individual (applies only for this cmdlet and can be used to override the preference variable) ###
 
$DebugPreference = 'SilentlyContinue'
Write-Debug -Message 'Debug Message' -Debug

                                                   Как отобразить отладочное сообщение с помощью PowerShell?
Write-Debug -Message 'Exiting Foreach'

                                           Как включить/отключить предупреждения с помощью PowerShell?

### Global (affects all warning messages) ###
 # Displays the warning message and an error message and then stops executing.
$WarningPreference = 'Stop'
 
# Displays the warning message and then prompts for permission to continue.
$WarningPreference = 'Inquire'
 
# Displays the warning message and then continues executing. (Default).
$WarningPreference = 'Continue'
 
# Does not display the warning message. Continues executing.
$WarningPreference = 'SilentlyContinue'
 
### Individual (applies only for this cmdlet and can be used to override the preference variable) ###
 
$WarningPreference = 'SilentlyContinue'
Write-Warning -Message 'Warning Message' -WarningAction Stop

                                                Как отобразить предупреждение с помощью PowerShell?
Write-Warning -Message 'Read-only file'

                                                                                              Up, Try / Catch

                                                                 Как обработать ошибки с помощью PowerShell?

try 
	{
    	Get-ADUser -Identity AccountNotExist -ErrorAction Stop
	}
catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException]
	{
    	Write-Warning -Message 'Account not found'
	}
finally
	{
    	# Optional
	}

или
                                                                   обработка ошибок с выводом на  экран сообщения

[int]$a=0

Try
	{
	$a +1
	$a*2
	10/$a                              #скрипт остановлен, деление наноль
	$a-1                                # не исполняется, вывод на экран результатов только до остановки скрипта  
	Write-Host"Ошибок нет"
	}
Catch
	{
	Write-Host"Произошла случайная ошибка, скрипт остановлен, дальнейшего продолжения работы не будет"
	Write-Error"Произошла случайная ошибка"
	Write-Warning"Произошла случайная ошибка"
	}


                                        Как получить номер строки с ошибкой с помощью PowerShell?


$_.InvocationInfo.ScriptLineNumber
 
Example:
 
try
{
    1/0
}
catch [DivideByZeroException]
{
    Write-Warning -Message 'Divide by zero exception'
    "Line : $($_.InvocationInfo.ScriptLineNumber)"# Returns Line 3
}

                                                                                                                        Up, SMTP

                                                                Как отправить электронное письмо с помощью PowerShell?


$parameters = @{ 
    From        = 'sender@domain.com'
    To          = 'recipient01@domain.com'
    Bcc         = 'recipient02@domain.com'
    Subject     = 'Meeting' 
    Body        = 'Please find the attached file'
    Attachments = 'C:\plannings\meeting.xls'
    Dno         = 'OnFailure,OnSuccess'
    Priority    = 'High'
    SmtpServer  = 'smtp.domain.com'
} 
 
Send-MailMessage @parameters

                                                                                                                          Up,Modules

                                                               Как отобразить расположение модулей с помощью PowerShell?
$env:PSModulePath -split ';'
[Environment]::GetEnvironmentVariable('PSModulePath') -split ';'

                                                Как проверить версию модуля с помощью PowerShell?
(Get-Module -Name activedirectory).Version

                                 Как перечислить загруженные модули текущего сеанса с помощью PowerShell?
Get-Module

                                  Как перечислить доступные, но не загруженные модули с помощью PowerShell?
Get-Module -ListAvailable

                                            Как получить список доступных команд модуля с помощью PowerShell?
Get-Command -Module activedirectory

                                                Как импортировать модуль в текущий сеанс с помощью PowerShell?

Import-Module -Name Activedirectory
Import-Module -Name 'C:\PowerShellAccessControl\PowerShellAccessControl.psd1' # PSD1 : module manifest file (optional but recommended to provide more information)
Import-Module -Name 'C:\PowerShellAccessControl\PowerShellAccessControl.psm1' # PSM1 : module file

                                                                       Как перезагрузить модуль с помощью PowerShell?
Import-Module -Name 'C:\PowerShellAccessControl\PowerShellAccessControl.psd1' -Force

                                          Как удалить конкретный модуль с помощью PowerShell?
Remove-Module -Name activedirectory

                                           Как удалить все модули с помощью PowerShell?
Get-Module | Remove-Module

                 Как отключить загрузку диска, выбранного по умолчанию, модуля ActiveDirectory, с помощью PowerShell?
$Env:ADPS_LoadDefaultDrive = 0

                                                   Как отключить автоматическую загрузку модулей с помощью PowerShell?
$PSModuleAutoloadingPreference = 'none'

                                                   Как установить модуль Active Directory с помощью PowerShell?
Add-WindowsFeature RSAT-AD-PowerShell

                                                                                             Up, Snapins
                                                Как перечислить оснастки текущего сеанса с помощью PowerShell?
Get-PSSnapin
                       
                             Как перечислить зарегистрированные оснастки с помощью PowerShell?
Get-PSSnapin -Registered

                      Как получить список доступных команд оснастки с помощью PowerShell?
Get-Command | Where-Object -FilterScript {$_.PSSnapin.Name -eq 'Quest.ActiveRoles.ADManagement'}

                                                Как добавить оснастку в текущем сеансе с помощью PowerShell?
Add-PSSnapin -Name 'Quest.ActiveRoles.ADManagement'

                                          Как удалить оснастку из текущего сеанса с помощью PowerShell?
Remove-PSSnapin -Name 'Quest.ActiveRoles.ADManagement'

                                                         Как удалить все оснастки с помощью PowerShell?
Get-PSSnapin | Remove-PSSnapin

                                                                            Up, Quest

                                            Как добавить оснастку Quest с помощью PowerShell?
Add-PSSnapin -Name 'Quest.ActiveRoles.ADManagement'

    Как перечислить группы, к которым принадлежит пользователь, с помощью оснастки Quest, используя PowerShell?
(Get-QADUser -Identity $user -IncludedProperties MemberOf).MemberOf

                            Как перечислить вложенные группы, к которым принадлежит пользователь, 
                               с помощью оснастки Quest, используя PowerShell?
(Get-QADUser -Identity $user -IncludedProperties NestedMemberOf).NestedMemberOf

Как перечислить все группы, к которым принадлежит пользователь, с помощью оснастки Quest, используя PowerShell?
(Get-QADUser -Identity $user -IncludedProperties AllMemberOf).AllMemberOf

                                                                                             Up,Functions

                                                        Как создать простую функцию с помощью PowerShell?


function Test-ExtensionFile
{
    Param
    (
        [string]$Path
    )
 
    [System.IO.Path]::HasExtension($Path)
}
 
Test-ExtensionFile -Path 'C:\Windows\notepad.exe'

                          Как создать обязательный параметр в функции с помощью PowerShell?


function Test-ExtensionFile
{
    Param
    (
        [Parameter(Mandatory = $true)]
        [string]$Path
    )
 
    [System.IO.Path]::HasExtension($Path)
}
 
Test-ExtensionFile -Path 'C:\Windows\notepad.exe'

                             Как создать справочное сообщение для обязательного параметра в функции с помощью PowerShell?


function Test-ExtensionFile
{
    Param
    (
        [Parameter(Mandatory = $true, HelpMessage = 'Enter the path of a file')]
        [string]$Path
    )
 
    [System.IO.Path]::HasExtension($Path)
}
 
Test-ExtensionFile -Path 'C:\Windows\notepad.exe'

                                            Как добавить переключаемый параметр в функции с помощью PowerShell?


function Test-ExtensionFile
{
    Param
    (
        [Parameter(Mandatory = $true)]
        [string]$Path,
 
        [switch]$Extension
    )
 
    [System.IO.Path]::HasExtension($Path)
 
    if ($PSBoundParameters.ContainsKey('Extension'))
    {
        Write-Output -InputObject "Extension : $([System.IO.Path]::GetExtension($Path))"
    }
}
 
Test-ExtensionFile -Path 'C:\Windows\notepad.exe' -Extension


                                                                                                            Up, Loops
                                                                           Как создать цикл “For” с помощью PowerShell?


for ($i = 1; $i -le 10; $i++)
{ 
    if ($i -eq 5)
    {
        #  With "Continue" keyword, the loop continues but skips just this iteration
        Continue
    }
 
    if ($i -eq 7)
    {
        #  With "Break" keyword, the loop is aborted
        Break
    }
 
    $i
}
 
# Output
 
1
2
3
4
6
                                                                      Как создать цикл “ForEach” с помощью PowerShell?


$array = 1, 2, 3, 4, 5
$array | ForEach-Object -Process {$_}

                                                                      Как создать цикл “Do Until” с помощью PowerShell?


$x = 5
 
do
{
    $x
    $x--
}
until ($x -eq 0)

                                                               Как создать цикл “Do While” с помощью PowerShell?


$x = 5
 
do
{
    $x
    $x--
}
while ($x -eq 0)
 
                                                                 Как создать цикл “While” с помощью PowerShell?


$i = 5
 
while ($x -ne 0)
{
    $i
    $i--
}

                                     Как создать бессчётный/бесконечный цикл с помощью PowerShell?


# Solution_решение 1
 
while ($true)
{
    Test-Connection -ComputerName 'powershell-guru.com' -Quiet
}
 
# Solution_решение 2
 
for ( ; ; )
{ 
    Test-Connection -ComputerName 'powershell-guru.com' -Quiet   
}

                                                                                                        Up, Keyboard

                                 Как получить список языков для текущей учётной записи пользователя с помощью PowerShell?
Get-WinUserLanguageList                                             #Windows 8 / 2012

                         Как установить языковую раскладку для текущей учётной записи пользователя с помощью PowerShell?
Set-WinUserLanguageList -LanguageList de-DE                                                 #Windows 8 / 2012

                                                 Как получить текущий KeyboardLayoutID с помощью PowerShell?
(Get-Culture).KeyboardLayoutId

                                                          Как включить кнопку “Num Lock” при запуске с помощью PowerShell?
New-PSDrive -PSProvider Registry -Root HKEY_USERS -Name HKU
Set-ItemProperty -Path 'HKU:\.DEFAULT\Control Panel\Keyboard' -Name 'InitialKeyboardIndicators' -Value '2'

                                                                                                 Up, Environment
                                                Как активировать командную строку для этого процесса с помощью PowerShell?
[Environment]::CommandLine

                                                                   Как найти текущий каталог с помощью PowerShell?
[System.Environment]::CurrentDirectory
($pwd).Path

                     Как проверить, является ли разрядность операционной системы 64-битной, с помощью PowerShell?
[System.Environment]::Is64BitOperatingSystem

                                 Как проверить, является ли разрядность процесса 64-битной, с помощью PowerShell?
[Environment]::Is64BitProcess

                                                  Как узнать текущее имя компьютера с помощью PowerShell?


# Solution_решение 1
[System.Environment]::MachineName
 
# Solution_решение 2
$env:computername
 
# Solution_решение 3
(Get-CimInstance CIM_ComputerSystem).Name
 
# Solution_решение 4
(Get-WmiObject -Class Win32_ComputerSystem).Name

                         Как проверить текущую версию операционной системы (Platform и Service Pack) с помощью PowerShell?
[Environment]::OSVersion | Format-List

                                      Как подсчитать количество процессоров с помощью PowerShell?
[Environment]::ProcessorCount

                                           Как узнать путь к системной папке с помощью PowerShell?
[Environment]::SystemDirectory

                                  Как узнать сколько байт содержит страница операционной системы помощью PowerShell?
[Environment]::SystemPageSize

                                                           Как узнать время работы системы с помощью PowerShell?
[Timespan]::FromMilliseconds([Environment]::TickCount)

                                              Как получить доменное имя текущего пользователя с помощью PowerShell?
$env:USERDOMAIN
[Environment]::UserDomainName

     Как узнать, исполняется ли текущий процесс в пользовательском интерактивном режиме, с помощью PowerShell?
[Environment]::UserInteractive

                                               Как получить имя текущего пользователя с помощью PowerShell?
$env:USERNAME
[Environment]::UserName

                                                                                                          Up, Parameters

                                                                Как попросить подтверждение (-Confirm параметр) до того, 
                                                              как операция будет обработана (например: удалить все файлы                                                                CSV в папке), с помощью PowerShell?
Remove-Item -Path 'C:\scripts\*.csv' -Confirm:$true
# Are you sure you want to perform this action? Performing the operation "Remove File" on target "C:\scripts\report.csv"

                                            Как имитировать (-WhatIf параметр) определённую операцию
                                                     (например: удалить все файлы CSV в папке) с помощью PowerShell?
Get-ChildItem -Path 'C:\scripts\*.csv' | Remove-Item -WhatIf
# What if: Performing the operation "Remove File" on target "C:\scripts\report.csv"

                                        Как включить/отключить подтверждение всех команд с помощью PowerShell?
$ConfirmPreference = "High"                               # (By default)
$ConfirmPreference = "None"                                         # Disable

                       Как включить/отключить “WhatIf” для всех команд с помощью PowerShell?
$ConfirmPreference = 'High'                               # (By default)
$ConfirmPreference = 'None' # Disable

                                  Как увидеть результаты (параметр -PassThru) команды (в фоновом режиме) с помощью PowerShell?
Start-Process -FilePath notepad                                                                # No output on screen
Start-Process -FilePath notepad -PassThru                                             # Output on screen

                                                                                                   Up, Windows 2012
                                                                                              Best Practices Analyzer

             Как просмотреть список ролей, поддерживаемых Best Practices Analyzer (BPA), с помощью PowerShell?
Get-BpaModel | Format-Table -AutoSize

Как начать сканирование Best Practices Analyzer (BPA) для конкретной модели (например: Microsoft/Windows/WSUS) с помощью PowerShell?
Invoke-BpaModel -BestPracticesModelId Microsoft/Windows/WSUS

Как просмотреть результаты последних сканирований Best Practices Analyzer (BPA) для конкретной модели (например: Microsoft/Windows/WSUS) с помощью PowerShell?
Get-BpaResult -BestPracticesModelId Microsoft/Windows/WSUS

                                                                                                                                 Firewall

Как получить информацию о профилях брандмауэра (доменных, приватных или публичных) с помощью PowerShell?
Get-NetFirewallProfile -Name Domain
Get-NetFirewallProfile -Name Private
Get-NetFirewallProfile -Name Public

Как посмотреть правила определенного профиля брандмауэра (доменного, приватного или публичного) с помощью PowerShell?
Get-NetFirewallProfile -Name Domain | Get-NetFirewallRule | Format-Table
Get-NetFirewallProfile -Name Private | Get-NetFirewallRule | Format-Table
Get-NetFirewallProfile -Name Public | Get-NetFirewallRule | Format-Table

                                                                                               Hyper-V

Как установить роль Hyper-V с помощью PowerShell?
Install-WindowsFeature -Name Hyper-V -IncludeManagementTools -Restart

                                                                                     PowerShell Web Access

Как установить “PowerShell Web Access” с помощью PowerShell?
Install-WindowsFeature -Name WindowsPowerShellWebAccess -ComputerName $computer -IncludeManagementTools -Restart
Install-PswaWebApplication -UseTestCertificate

                                                                                      Up, Windows Azure
Как скачать файл .publishsettings для подписки Windows Azure с помощью PowerShell?
Get-AzurePublishSettingsFile

                                                                                                              Up, SCCM

                          Как импортировать модуль для Configuration Manager 2012 с помощью PowerShell?
# Solution_решение 1
Import-Module ($Env:SMS_ADMIN_UI_PATH.Substring(0,$Env:SMS_ADMIN_UI_PATH.Length-5) + '\ConfigurationManager.psd1')
 
# Solution_решение 2
Import-Module -Name 'C:\Program Files\Microsoft Configuration Manager\AdminConsole\bin\ConfigurationManager.psd1'

                                                                                                              Up, Restore
                                       Как запустить восстановление системы на дисках C: и D: с помощью PowerShell?
Enable-ComputerRestore -Drive 'C:\', 'D:\'

                     Как создать точки восстановления системы на локальном компьютере с помощью PowerShell?
Get-ComputerRestorePoint

                                      Как узнать статус последнего восстановления системы с помощью PowerShell?
Get-ComputerRestorePoint -LastStatus

                              Как запустить восстановление системы на локальном компьютере с помощью PowerShell?
Restore-Computer -RestorePoint 137

                                                                                             Up, Alias
Как перечислить все алиасы с помощью PowerShell?
Get-Alias
gal # Alias

Как перечислить все алиасы, начинающиеся/заканчивающиеся на определенную букву (например: е), с помощью PowerShell?
Get-Alias -Name e* # Starting with "e"
Get-Alias -Name *e # Ending with "e"

                                              Как создать новый алиас с помощью PowerShell?
New-Alias -Name ip -Value ipconfig

                                              Как изменить существующий алиас с помощью PowerShell?
Set-Alias -Name ip -Value Get-NetIPAddress

                                                Как удалить алиас с помощью PowerShell?
Remove-Item -Path alias:\ip

                               Как экспортировать и импортировать алиасы с помощью PowerShell?
Export-Alias -Path C:\scripts\aliases.txt
Import-Alias -Path C:\scripts\aliases.txt

                                  Как найти алиас командлета с помощью PowerShell?
Get-Alias -Definition Get-ChildItem

                           Как найти командлет алиаса с помощью PowerShell?
(Get-Command -Name gci).Definition

                                                                                Up,Format Operator (-f)
Как отобразить определённый элемент с оператором форматирования -f с помощью PowerShell?
'{0}' -f 'a', 'b'                                       # Returns "a"
'{1}' -f 'a', 'b'                                        # Returns "b"
      
Как отобразить число в шестнадцатеричной системе исчисления (в нижнем/верхнем регисте) с оператором форматирования -f при помощи PowerShell?
'0x{0:x}' -f 10                                                      # Returns 0xa (lower case)
'0x{0:X}' -f 10                                                     # Returns 0xA (upper case)

Как отобразить количество в процентах с оператором форматирования -f при помощи PowerShell?
'{0:P}' -f .789                                                        # Returns 78,90 %

Как отобразить число в формате валюты с оператором форматирования -f при помощи PowerShell?
'{0:C2}' -f 789                                               # Returns $789,00

Как указать количество знаков после запятой с оператором форматирования -f при помощи PowerShell?
'{0:N0}' -f 123.456789                                        # Returns 123
'{0:N1}' -f 123.456789                                         # Returns 123,5
'{0:N2}' -f 123.456789                                         # Returns 123,46

Как отобразить число с разделителями тысяч с оператором форматирования -f при помощи PowerShell?
'{0:#,#}' -f 123456789                                                                            # Returns 123.456.789

Как отобразить день недели в коротком/длинном формате с оператором форматирования -f при помощи PowerShell?
'{0:ddd}' -f (Get-Date)                                  # Returns Mon
'{0:dddd}' -f (Get-Date)                              # Returns Monday

Как отобразить день месяца с оператором форматирования -f при помощи PowerShell?
'{0:dd}' -f (Get-Date)                                        # Returns 16

Как отобразить часы/минуты/секунды с оператором форматирования -f при помощи PowerShell?
'{0:hh}' -f (Get-Date)                             # Hours
'{0:mm}' -f (Get-Date)                           # Minutes
'{0:SS}' -f (Get-Date)                           # Seconds

Как отобразить час в 24-часовом формате с оператором форматирования -f при помощи PowerShell?
'{0:HH}' -f (Get-Date) # Returns 22 (22:09)

Как отобразить год в укороченном/полном формате с оператором форматирования -f при помощи PowerShell?
'{0:yy}' -f (Get-Date) # Returns 15 (2015)
'{0:yyyy}' -f (Get-Date) # Returns 2015

                                                                       Up, PowerShell v5

                                        Как получить список источников пакетов с помощью PowerShell?
Get-PackageSource

                                                          Как сжать/zip файлы с помощью PowerShell?
Compress-Archive -Path C:\scripts\* -DestinationPath C:\scripts.zip -CompressionLevel Optimal

                                                 Как распаковать/unzip файлы с помощью PowerShell?
Expand-Archive -Path C:\scripts.zip -DestinationPath C:\scripts

                                Как установить пакет Sysinternals, используя OneGet, с помощью PowerShell?
Find-Package Sysinternals | Install-Package -Verbose

                                                                                  Up, Windows Forms

                                     Как отобразить окно “Информация” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'OK', 'Information')

                         Как отобразить окно “Предупреждение” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'OK', 'Warning')

                                  Как отобразить окно “Ошибка” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'OK', 'Error')

                                      Как отобразить окно с кнопкой “OK” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'OK', 'Asterisk')

                        Как отобразить окно с кнопками “OK – Отменить” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'OKCancel', 'Asterisk')

                  Как отобразить окно с кнопками “Прервать-Повторить-Пропустить” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'AbortRetryIgnore', 'Asterisk')

                                 Как отобразить окно с кнопками “Да – Нет” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'YesNo', 'Asterisk')

                                    Как отобразить окно с кнопками “Да – Нет – Отменить” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'YesNoCancel', 'Asterisk')

                              Как отобразить окно с кнопками “Повторить – Отменить” с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'RetryCancel', 'Asterisk')

                                                Как отобразить окно без значка с помощью PowerShell?
[System.Windows.Forms.MessageBox]::Show('MyMessage', 'MyTitle', 'OK', 'None')

                                           Как отобразить поле ввода для пользователя с помощью PowerShell?
$nationality = [Microsoft.VisualBasic.Interaction]::InputBox('What is your nationality ?', 'Nationality', '')

                                                                                                               Up, WMI

Как преобразовать дату в формате WMI (формат DTMF Distributed Management Task Force) в формат DateTime с помощью PowerShell?

# Solution_решение 1
[Management.ManagementDateTimeConverter]::ToDateTime((Get-WmiObject -Class Win32_OperatingSystem).InstallDate)
 
# Solution_решение 2
([WMI] '').ConvertToDateTime((Get-WmiObject -Class Win32_OperatingSystem -ComputerName localhost).InstallDate)

Как преобразовать дату из формата DateTime в формат WMI (формат DTMF Distributed Management Task Force) с помощью PowerShell?
[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($(Get-Date))

                                     Как перечислить все пространства имен WMI с помощью PowerShell?
Get-WmiObject -Namespace 'root' -Class '__Namespace' | Select-Object -Property Name | Sort-Object -Property Name

               Как перечислить все классы root\cimv2 пространства имен WMI с помощью PowerShell?
Get-WmiObject -Namespace 'root\cimv2' -List | Sort-Object -Property Name

                                                             Up, CIM (Common Information Model)
                             Как получить экземпляры CIM определенного класса с помощью PowerShell?
Get-CimInstance -Namespace 'root\CIMv2' -ClassName Win32_DiskDrive

                                                                               Up, Help
                                     Как скачать последние файлы справки с помощью PowerShell?
Update-Help -Force

                              Как обновить справку для конкретного модуля с помощью PowerShell?
Update-Help -Module ServerManager


My Favourite Links

# Windows Server 2016 Technical Preview 5 
# Windows Management Framework 5.0 
# What's New in Windows PowerShell 
# PowerShell – Feedback Center 
# PowerShell Core About Topics 
# .NET Framework Class Library 
# Chocolatey Gallery Packages 
# ISESteroids Version History 
# PowerShell Gallery Modules 
# PowerShellEmpire GitHub 
# PSScriptAnalyzer - Github 
# Active Directory Classes 
# PowerShell Blog Team 
# PowerSploit GitHub 
# AD Security 
# PInvoke




                                                                                         ссылки для скачивания        WMF 3.0 
скачиваем пакет по ссылке выше для своей архитектуры
Скачиваем WMF 3.0 с сайта Microsoft обновление Windows6.1­KB2506143­x64.MSU, или для 32, открываем окно командной строки там, куда скачали MSU­шку и распаковываем содержимое из команднойстроки командой 
expand Windows6.1­KB2506143­x64.msu ­f:* C:\Temp (убедитесь, что каталог существует и туда  распаковываются файлы) 
запускаем установку при помощи PkgMgr.exe — pkgmgr.exe /n:Windows6.1­KB2506143­x64.xml  

